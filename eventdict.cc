//
// File generated by rootcint at Tue Aug  4 09:41:11 2015

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME eventdict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "eventdict.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void myVertex_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_myVertex(void *p = 0);
   static void *newArray_myVertex(Long_t size, void *p);
   static void delete_myVertex(void *p);
   static void deleteArray_myVertex(void *p);
   static void destruct_myVertex(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::myVertex*)
   {
      ::myVertex *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::myVertex >(0);
      static ::ROOT::TGenericClassInfo 
         instance("myVertex", ::myVertex::Class_Version(), "./myVertex.h", 8,
                  typeid(::myVertex), DefineBehavior(ptr, ptr),
                  &::myVertex::Dictionary, isa_proxy, 4,
                  sizeof(::myVertex) );
      instance.SetNew(&new_myVertex);
      instance.SetNewArray(&newArray_myVertex);
      instance.SetDelete(&delete_myVertex);
      instance.SetDeleteArray(&deleteArray_myVertex);
      instance.SetDestructor(&destruct_myVertex);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::myVertex*)
   {
      return GenerateInitInstanceLocal((::myVertex*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::myVertex*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void myTriggerObject_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_myTriggerObject(void *p = 0);
   static void *newArray_myTriggerObject(Long_t size, void *p);
   static void delete_myTriggerObject(void *p);
   static void deleteArray_myTriggerObject(void *p);
   static void destruct_myTriggerObject(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::myTriggerObject*)
   {
      ::myTriggerObject *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::myTriggerObject >(0);
      static ::ROOT::TGenericClassInfo 
         instance("myTriggerObject", ::myTriggerObject::Class_Version(), "./myTriggerObject.h", 8,
                  typeid(::myTriggerObject), DefineBehavior(ptr, ptr),
                  &::myTriggerObject::Dictionary, isa_proxy, 4,
                  sizeof(::myTriggerObject) );
      instance.SetNew(&new_myTriggerObject);
      instance.SetNewArray(&newArray_myTriggerObject);
      instance.SetDelete(&delete_myTriggerObject);
      instance.SetDeleteArray(&deleteArray_myTriggerObject);
      instance.SetDestructor(&destruct_myTriggerObject);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::myTriggerObject*)
   {
      return GenerateInitInstanceLocal((::myTriggerObject*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::myTriggerObject*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void myGenObject_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_myGenObject(void *p = 0);
   static void *newArray_myGenObject(Long_t size, void *p);
   static void delete_myGenObject(void *p);
   static void deleteArray_myGenObject(void *p);
   static void destruct_myGenObject(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::myGenObject*)
   {
      ::myGenObject *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::myGenObject >(0);
      static ::ROOT::TGenericClassInfo 
         instance("myGenObject", ::myGenObject::Class_Version(), "./myGenObject.h", 8,
                  typeid(::myGenObject), DefineBehavior(ptr, ptr),
                  &::myGenObject::Dictionary, isa_proxy, 4,
                  sizeof(::myGenObject) );
      instance.SetNew(&new_myGenObject);
      instance.SetNewArray(&newArray_myGenObject);
      instance.SetDelete(&delete_myGenObject);
      instance.SetDeleteArray(&deleteArray_myGenObject);
      instance.SetDestructor(&destruct_myGenObject);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::myGenObject*)
   {
      return GenerateInitInstanceLocal((::myGenObject*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::myGenObject*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void myMuon_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_myMuon(void *p = 0);
   static void *newArray_myMuon(Long_t size, void *p);
   static void delete_myMuon(void *p);
   static void deleteArray_myMuon(void *p);
   static void destruct_myMuon(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::myMuon*)
   {
      ::myMuon *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::myMuon >(0);
      static ::ROOT::TGenericClassInfo 
         instance("myMuon", ::myMuon::Class_Version(), "./myMuon.h", 8,
                  typeid(::myMuon), DefineBehavior(ptr, ptr),
                  &::myMuon::Dictionary, isa_proxy, 4,
                  sizeof(::myMuon) );
      instance.SetNew(&new_myMuon);
      instance.SetNewArray(&newArray_myMuon);
      instance.SetDelete(&delete_myMuon);
      instance.SetDeleteArray(&deleteArray_myMuon);
      instance.SetDestructor(&destruct_myMuon);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::myMuon*)
   {
      return GenerateInitInstanceLocal((::myMuon*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::myMuon*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void myElectron_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_myElectron(void *p = 0);
   static void *newArray_myElectron(Long_t size, void *p);
   static void delete_myElectron(void *p);
   static void deleteArray_myElectron(void *p);
   static void destruct_myElectron(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::myElectron*)
   {
      ::myElectron *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::myElectron >(0);
      static ::ROOT::TGenericClassInfo 
         instance("myElectron", ::myElectron::Class_Version(), "./myElectron.h", 8,
                  typeid(::myElectron), DefineBehavior(ptr, ptr),
                  &::myElectron::Dictionary, isa_proxy, 4,
                  sizeof(::myElectron) );
      instance.SetNew(&new_myElectron);
      instance.SetNewArray(&newArray_myElectron);
      instance.SetDelete(&delete_myElectron);
      instance.SetDeleteArray(&deleteArray_myElectron);
      instance.SetDestructor(&destruct_myElectron);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::myElectron*)
   {
      return GenerateInitInstanceLocal((::myElectron*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::myElectron*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void myTau_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_myTau(void *p = 0);
   static void *newArray_myTau(Long_t size, void *p);
   static void delete_myTau(void *p);
   static void deleteArray_myTau(void *p);
   static void destruct_myTau(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::myTau*)
   {
      ::myTau *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::myTau >(0);
      static ::ROOT::TGenericClassInfo 
         instance("myTau", ::myTau::Class_Version(), "./myTau.h", 8,
                  typeid(::myTau), DefineBehavior(ptr, ptr),
                  &::myTau::Dictionary, isa_proxy, 4,
                  sizeof(::myTau) );
      instance.SetNew(&new_myTau);
      instance.SetNewArray(&newArray_myTau);
      instance.SetDelete(&delete_myTau);
      instance.SetDeleteArray(&deleteArray_myTau);
      instance.SetDestructor(&destruct_myTau);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::myTau*)
   {
      return GenerateInitInstanceLocal((::myTau*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::myTau*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void myJet_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_myJet(void *p = 0);
   static void *newArray_myJet(Long_t size, void *p);
   static void delete_myJet(void *p);
   static void deleteArray_myJet(void *p);
   static void destruct_myJet(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::myJet*)
   {
      ::myJet *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::myJet >(0);
      static ::ROOT::TGenericClassInfo 
         instance("myJet", ::myJet::Class_Version(), "./myJet.h", 8,
                  typeid(::myJet), DefineBehavior(ptr, ptr),
                  &::myJet::Dictionary, isa_proxy, 4,
                  sizeof(::myJet) );
      instance.SetNew(&new_myJet);
      instance.SetNewArray(&newArray_myJet);
      instance.SetDelete(&delete_myJet);
      instance.SetDeleteArray(&deleteArray_myJet);
      instance.SetDestructor(&destruct_myJet);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::myJet*)
   {
      return GenerateInitInstanceLocal((::myJet*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::myJet*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void myMET_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_myMET(void *p = 0);
   static void *newArray_myMET(Long_t size, void *p);
   static void delete_myMET(void *p);
   static void deleteArray_myMET(void *p);
   static void destruct_myMET(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::myMET*)
   {
      ::myMET *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::myMET >(0);
      static ::ROOT::TGenericClassInfo 
         instance("myMET", ::myMET::Class_Version(), "./myMET.h", 8,
                  typeid(::myMET), DefineBehavior(ptr, ptr),
                  &::myMET::Dictionary, isa_proxy, 4,
                  sizeof(::myMET) );
      instance.SetNew(&new_myMET);
      instance.SetNewArray(&newArray_myMET);
      instance.SetDelete(&delete_myMET);
      instance.SetDeleteArray(&deleteArray_myMET);
      instance.SetDestructor(&destruct_myMET);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::myMET*)
   {
      return GenerateInitInstanceLocal((::myMET*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::myMET*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void mySV_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_mySV(void *p = 0);
   static void *newArray_mySV(Long_t size, void *p);
   static void delete_mySV(void *p);
   static void deleteArray_mySV(void *p);
   static void destruct_mySV(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::mySV*)
   {
      ::mySV *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::mySV >(0);
      static ::ROOT::TGenericClassInfo 
         instance("mySV", ::mySV::Class_Version(), "./mySV.h", 8,
                  typeid(::mySV), DefineBehavior(ptr, ptr),
                  &::mySV::Dictionary, isa_proxy, 4,
                  sizeof(::mySV) );
      instance.SetNew(&new_mySV);
      instance.SetNewArray(&newArray_mySV);
      instance.SetDelete(&delete_mySV);
      instance.SetDeleteArray(&deleteArray_mySV);
      instance.SetDestructor(&destruct_mySV);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::mySV*)
   {
      return GenerateInitInstanceLocal((::mySV*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::mySV*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void myevent_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_myevent(void *p = 0);
   static void *newArray_myevent(Long_t size, void *p);
   static void delete_myevent(void *p);
   static void deleteArray_myevent(void *p);
   static void destruct_myevent(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::myevent*)
   {
      ::myevent *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::myevent >(0);
      static ::ROOT::TGenericClassInfo 
         instance("myevent", ::myevent::Class_Version(), "./myevent.h", 18,
                  typeid(::myevent), DefineBehavior(ptr, ptr),
                  &::myevent::Dictionary, isa_proxy, 4,
                  sizeof(::myevent) );
      instance.SetNew(&new_myevent);
      instance.SetNewArray(&newArray_myevent);
      instance.SetDelete(&delete_myevent);
      instance.SetDeleteArray(&deleteArray_myevent);
      instance.SetDestructor(&destruct_myevent);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::myevent*)
   {
      return GenerateInitInstanceLocal((::myevent*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::myevent*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void vectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgRcLcLiterator_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgRcLcLiterator_Dictionary();
   static void *new_vectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgRcLcLiterator(void *p = 0);
   static void *newArray_vectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgRcLcLiterator(Long_t size, void *p);
   static void delete_vectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgRcLcLiterator(void *p);
   static void deleteArray_vectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgRcLcLiterator(void *p);
   static void destruct_vectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgRcLcLiterator(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::vector<myGenObject,allocator<myGenObject> >::iterator*)
   {
      ::vector<myGenObject,allocator<myGenObject> >::iterator *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::vector<myGenObject,allocator<myGenObject> >::iterator),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<myGenObject,allocator<myGenObject> >::iterator", "prec_stl/vector", 269,
                  typeid(::vector<myGenObject,allocator<myGenObject> >::iterator), DefineBehavior(ptr, ptr),
                  0, &vectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgRcLcLiterator_Dictionary, isa_proxy, 0,
                  sizeof(::vector<myGenObject,allocator<myGenObject> >::iterator) );
      instance.SetNew(&new_vectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgRcLcLiterator);
      instance.SetNewArray(&newArray_vectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgRcLcLiterator);
      instance.SetDelete(&delete_vectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgRcLcLiterator);
      instance.SetDeleteArray(&deleteArray_vectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgRcLcLiterator);
      instance.SetDestructor(&destruct_vectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgRcLcLiterator);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::vector<myGenObject,allocator<myGenObject> >::iterator*)
   {
      return GenerateInitInstanceLocal((::vector<myGenObject,allocator<myGenObject> >::iterator*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::vector<myGenObject,allocator<myGenObject> >::iterator*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgRcLcLiterator_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::vector<myGenObject,allocator<myGenObject> >::iterator*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void vectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgRcLcLiterator_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgRcLcLiterator_Dictionary();
   static void *new_vectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgRcLcLiterator(void *p = 0);
   static void *newArray_vectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgRcLcLiterator(Long_t size, void *p);
   static void delete_vectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgRcLcLiterator(void *p);
   static void deleteArray_vectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgRcLcLiterator(void *p);
   static void destruct_vectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgRcLcLiterator(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::vector<myTriggerObject,allocator<myTriggerObject> >::iterator*)
   {
      ::vector<myTriggerObject,allocator<myTriggerObject> >::iterator *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::vector<myTriggerObject,allocator<myTriggerObject> >::iterator),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<myTriggerObject,allocator<myTriggerObject> >::iterator", "prec_stl/vector", 269,
                  typeid(::vector<myTriggerObject,allocator<myTriggerObject> >::iterator), DefineBehavior(ptr, ptr),
                  0, &vectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgRcLcLiterator_Dictionary, isa_proxy, 0,
                  sizeof(::vector<myTriggerObject,allocator<myTriggerObject> >::iterator) );
      instance.SetNew(&new_vectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgRcLcLiterator);
      instance.SetNewArray(&newArray_vectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgRcLcLiterator);
      instance.SetDelete(&delete_vectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgRcLcLiterator);
      instance.SetDeleteArray(&deleteArray_vectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgRcLcLiterator);
      instance.SetDestructor(&destruct_vectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgRcLcLiterator);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::vector<myTriggerObject,allocator<myTriggerObject> >::iterator*)
   {
      return GenerateInitInstanceLocal((::vector<myTriggerObject,allocator<myTriggerObject> >::iterator*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::vector<myTriggerObject,allocator<myTriggerObject> >::iterator*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgRcLcLiterator_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::vector<myTriggerObject,allocator<myTriggerObject> >::iterator*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void vectorlEmyJetcOallocatorlEmyJetgRsPgRcLcLiterator_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEmyJetcOallocatorlEmyJetgRsPgRcLcLiterator_Dictionary();
   static void *new_vectorlEmyJetcOallocatorlEmyJetgRsPgRcLcLiterator(void *p = 0);
   static void *newArray_vectorlEmyJetcOallocatorlEmyJetgRsPgRcLcLiterator(Long_t size, void *p);
   static void delete_vectorlEmyJetcOallocatorlEmyJetgRsPgRcLcLiterator(void *p);
   static void deleteArray_vectorlEmyJetcOallocatorlEmyJetgRsPgRcLcLiterator(void *p);
   static void destruct_vectorlEmyJetcOallocatorlEmyJetgRsPgRcLcLiterator(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::vector<myJet,allocator<myJet> >::iterator*)
   {
      ::vector<myJet,allocator<myJet> >::iterator *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::vector<myJet,allocator<myJet> >::iterator),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<myJet,allocator<myJet> >::iterator", "prec_stl/vector", 269,
                  typeid(::vector<myJet,allocator<myJet> >::iterator), DefineBehavior(ptr, ptr),
                  0, &vectorlEmyJetcOallocatorlEmyJetgRsPgRcLcLiterator_Dictionary, isa_proxy, 0,
                  sizeof(::vector<myJet,allocator<myJet> >::iterator) );
      instance.SetNew(&new_vectorlEmyJetcOallocatorlEmyJetgRsPgRcLcLiterator);
      instance.SetNewArray(&newArray_vectorlEmyJetcOallocatorlEmyJetgRsPgRcLcLiterator);
      instance.SetDelete(&delete_vectorlEmyJetcOallocatorlEmyJetgRsPgRcLcLiterator);
      instance.SetDeleteArray(&deleteArray_vectorlEmyJetcOallocatorlEmyJetgRsPgRcLcLiterator);
      instance.SetDestructor(&destruct_vectorlEmyJetcOallocatorlEmyJetgRsPgRcLcLiterator);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::vector<myJet,allocator<myJet> >::iterator*)
   {
      return GenerateInitInstanceLocal((::vector<myJet,allocator<myJet> >::iterator*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::vector<myJet,allocator<myJet> >::iterator*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEmyJetcOallocatorlEmyJetgRsPgRcLcLiterator_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::vector<myJet,allocator<myJet> >::iterator*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void vectorlEmyElectroncOallocatorlEmyElectrongRsPgRcLcLiterator_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEmyElectroncOallocatorlEmyElectrongRsPgRcLcLiterator_Dictionary();
   static void *new_vectorlEmyElectroncOallocatorlEmyElectrongRsPgRcLcLiterator(void *p = 0);
   static void *newArray_vectorlEmyElectroncOallocatorlEmyElectrongRsPgRcLcLiterator(Long_t size, void *p);
   static void delete_vectorlEmyElectroncOallocatorlEmyElectrongRsPgRcLcLiterator(void *p);
   static void deleteArray_vectorlEmyElectroncOallocatorlEmyElectrongRsPgRcLcLiterator(void *p);
   static void destruct_vectorlEmyElectroncOallocatorlEmyElectrongRsPgRcLcLiterator(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::vector<myElectron,allocator<myElectron> >::iterator*)
   {
      ::vector<myElectron,allocator<myElectron> >::iterator *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::vector<myElectron,allocator<myElectron> >::iterator),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<myElectron,allocator<myElectron> >::iterator", "prec_stl/vector", 269,
                  typeid(::vector<myElectron,allocator<myElectron> >::iterator), DefineBehavior(ptr, ptr),
                  0, &vectorlEmyElectroncOallocatorlEmyElectrongRsPgRcLcLiterator_Dictionary, isa_proxy, 0,
                  sizeof(::vector<myElectron,allocator<myElectron> >::iterator) );
      instance.SetNew(&new_vectorlEmyElectroncOallocatorlEmyElectrongRsPgRcLcLiterator);
      instance.SetNewArray(&newArray_vectorlEmyElectroncOallocatorlEmyElectrongRsPgRcLcLiterator);
      instance.SetDelete(&delete_vectorlEmyElectroncOallocatorlEmyElectrongRsPgRcLcLiterator);
      instance.SetDeleteArray(&deleteArray_vectorlEmyElectroncOallocatorlEmyElectrongRsPgRcLcLiterator);
      instance.SetDestructor(&destruct_vectorlEmyElectroncOallocatorlEmyElectrongRsPgRcLcLiterator);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::vector<myElectron,allocator<myElectron> >::iterator*)
   {
      return GenerateInitInstanceLocal((::vector<myElectron,allocator<myElectron> >::iterator*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::vector<myElectron,allocator<myElectron> >::iterator*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEmyElectroncOallocatorlEmyElectrongRsPgRcLcLiterator_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::vector<myElectron,allocator<myElectron> >::iterator*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void vectorlEmyMuoncOallocatorlEmyMuongRsPgRcLcLiterator_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEmyMuoncOallocatorlEmyMuongRsPgRcLcLiterator_Dictionary();
   static void *new_vectorlEmyMuoncOallocatorlEmyMuongRsPgRcLcLiterator(void *p = 0);
   static void *newArray_vectorlEmyMuoncOallocatorlEmyMuongRsPgRcLcLiterator(Long_t size, void *p);
   static void delete_vectorlEmyMuoncOallocatorlEmyMuongRsPgRcLcLiterator(void *p);
   static void deleteArray_vectorlEmyMuoncOallocatorlEmyMuongRsPgRcLcLiterator(void *p);
   static void destruct_vectorlEmyMuoncOallocatorlEmyMuongRsPgRcLcLiterator(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::vector<myMuon,allocator<myMuon> >::iterator*)
   {
      ::vector<myMuon,allocator<myMuon> >::iterator *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::vector<myMuon,allocator<myMuon> >::iterator),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<myMuon,allocator<myMuon> >::iterator", "prec_stl/vector", 269,
                  typeid(::vector<myMuon,allocator<myMuon> >::iterator), DefineBehavior(ptr, ptr),
                  0, &vectorlEmyMuoncOallocatorlEmyMuongRsPgRcLcLiterator_Dictionary, isa_proxy, 0,
                  sizeof(::vector<myMuon,allocator<myMuon> >::iterator) );
      instance.SetNew(&new_vectorlEmyMuoncOallocatorlEmyMuongRsPgRcLcLiterator);
      instance.SetNewArray(&newArray_vectorlEmyMuoncOallocatorlEmyMuongRsPgRcLcLiterator);
      instance.SetDelete(&delete_vectorlEmyMuoncOallocatorlEmyMuongRsPgRcLcLiterator);
      instance.SetDeleteArray(&deleteArray_vectorlEmyMuoncOallocatorlEmyMuongRsPgRcLcLiterator);
      instance.SetDestructor(&destruct_vectorlEmyMuoncOallocatorlEmyMuongRsPgRcLcLiterator);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::vector<myMuon,allocator<myMuon> >::iterator*)
   {
      return GenerateInitInstanceLocal((::vector<myMuon,allocator<myMuon> >::iterator*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::vector<myMuon,allocator<myMuon> >::iterator*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEmyMuoncOallocatorlEmyMuongRsPgRcLcLiterator_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::vector<myMuon,allocator<myMuon> >::iterator*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void vectorlEmyTaucOallocatorlEmyTaugRsPgRcLcLiterator_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEmyTaucOallocatorlEmyTaugRsPgRcLcLiterator_Dictionary();
   static void *new_vectorlEmyTaucOallocatorlEmyTaugRsPgRcLcLiterator(void *p = 0);
   static void *newArray_vectorlEmyTaucOallocatorlEmyTaugRsPgRcLcLiterator(Long_t size, void *p);
   static void delete_vectorlEmyTaucOallocatorlEmyTaugRsPgRcLcLiterator(void *p);
   static void deleteArray_vectorlEmyTaucOallocatorlEmyTaugRsPgRcLcLiterator(void *p);
   static void destruct_vectorlEmyTaucOallocatorlEmyTaugRsPgRcLcLiterator(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::vector<myTau,allocator<myTau> >::iterator*)
   {
      ::vector<myTau,allocator<myTau> >::iterator *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::vector<myTau,allocator<myTau> >::iterator),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<myTau,allocator<myTau> >::iterator", "prec_stl/vector", 269,
                  typeid(::vector<myTau,allocator<myTau> >::iterator), DefineBehavior(ptr, ptr),
                  0, &vectorlEmyTaucOallocatorlEmyTaugRsPgRcLcLiterator_Dictionary, isa_proxy, 0,
                  sizeof(::vector<myTau,allocator<myTau> >::iterator) );
      instance.SetNew(&new_vectorlEmyTaucOallocatorlEmyTaugRsPgRcLcLiterator);
      instance.SetNewArray(&newArray_vectorlEmyTaucOallocatorlEmyTaugRsPgRcLcLiterator);
      instance.SetDelete(&delete_vectorlEmyTaucOallocatorlEmyTaugRsPgRcLcLiterator);
      instance.SetDeleteArray(&deleteArray_vectorlEmyTaucOallocatorlEmyTaugRsPgRcLcLiterator);
      instance.SetDestructor(&destruct_vectorlEmyTaucOallocatorlEmyTaugRsPgRcLcLiterator);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::vector<myTau,allocator<myTau> >::iterator*)
   {
      return GenerateInitInstanceLocal((::vector<myTau,allocator<myTau> >::iterator*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::vector<myTau,allocator<myTau> >::iterator*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEmyTaucOallocatorlEmyTaugRsPgRcLcLiterator_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::vector<myTau,allocator<myTau> >::iterator*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void vectorlEmyMETcOallocatorlEmyMETgRsPgRcLcLiterator_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEmyMETcOallocatorlEmyMETgRsPgRcLcLiterator_Dictionary();
   static void *new_vectorlEmyMETcOallocatorlEmyMETgRsPgRcLcLiterator(void *p = 0);
   static void *newArray_vectorlEmyMETcOallocatorlEmyMETgRsPgRcLcLiterator(Long_t size, void *p);
   static void delete_vectorlEmyMETcOallocatorlEmyMETgRsPgRcLcLiterator(void *p);
   static void deleteArray_vectorlEmyMETcOallocatorlEmyMETgRsPgRcLcLiterator(void *p);
   static void destruct_vectorlEmyMETcOallocatorlEmyMETgRsPgRcLcLiterator(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::vector<myMET,allocator<myMET> >::iterator*)
   {
      ::vector<myMET,allocator<myMET> >::iterator *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::vector<myMET,allocator<myMET> >::iterator),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<myMET,allocator<myMET> >::iterator", "prec_stl/vector", 269,
                  typeid(::vector<myMET,allocator<myMET> >::iterator), DefineBehavior(ptr, ptr),
                  0, &vectorlEmyMETcOallocatorlEmyMETgRsPgRcLcLiterator_Dictionary, isa_proxy, 0,
                  sizeof(::vector<myMET,allocator<myMET> >::iterator) );
      instance.SetNew(&new_vectorlEmyMETcOallocatorlEmyMETgRsPgRcLcLiterator);
      instance.SetNewArray(&newArray_vectorlEmyMETcOallocatorlEmyMETgRsPgRcLcLiterator);
      instance.SetDelete(&delete_vectorlEmyMETcOallocatorlEmyMETgRsPgRcLcLiterator);
      instance.SetDeleteArray(&deleteArray_vectorlEmyMETcOallocatorlEmyMETgRsPgRcLcLiterator);
      instance.SetDestructor(&destruct_vectorlEmyMETcOallocatorlEmyMETgRsPgRcLcLiterator);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::vector<myMET,allocator<myMET> >::iterator*)
   {
      return GenerateInitInstanceLocal((::vector<myMET,allocator<myMET> >::iterator*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::vector<myMET,allocator<myMET> >::iterator*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEmyMETcOallocatorlEmyMETgRsPgRcLcLiterator_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::vector<myMET,allocator<myMET> >::iterator*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void vectorlEmyVertexcOallocatorlEmyVertexgRsPgRcLcLiterator_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEmyVertexcOallocatorlEmyVertexgRsPgRcLcLiterator_Dictionary();
   static void *new_vectorlEmyVertexcOallocatorlEmyVertexgRsPgRcLcLiterator(void *p = 0);
   static void *newArray_vectorlEmyVertexcOallocatorlEmyVertexgRsPgRcLcLiterator(Long_t size, void *p);
   static void delete_vectorlEmyVertexcOallocatorlEmyVertexgRsPgRcLcLiterator(void *p);
   static void deleteArray_vectorlEmyVertexcOallocatorlEmyVertexgRsPgRcLcLiterator(void *p);
   static void destruct_vectorlEmyVertexcOallocatorlEmyVertexgRsPgRcLcLiterator(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::vector<myVertex,allocator<myVertex> >::iterator*)
   {
      ::vector<myVertex,allocator<myVertex> >::iterator *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::vector<myVertex,allocator<myVertex> >::iterator),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<myVertex,allocator<myVertex> >::iterator", "prec_stl/vector", 269,
                  typeid(::vector<myVertex,allocator<myVertex> >::iterator), DefineBehavior(ptr, ptr),
                  0, &vectorlEmyVertexcOallocatorlEmyVertexgRsPgRcLcLiterator_Dictionary, isa_proxy, 0,
                  sizeof(::vector<myVertex,allocator<myVertex> >::iterator) );
      instance.SetNew(&new_vectorlEmyVertexcOallocatorlEmyVertexgRsPgRcLcLiterator);
      instance.SetNewArray(&newArray_vectorlEmyVertexcOallocatorlEmyVertexgRsPgRcLcLiterator);
      instance.SetDelete(&delete_vectorlEmyVertexcOallocatorlEmyVertexgRsPgRcLcLiterator);
      instance.SetDeleteArray(&deleteArray_vectorlEmyVertexcOallocatorlEmyVertexgRsPgRcLcLiterator);
      instance.SetDestructor(&destruct_vectorlEmyVertexcOallocatorlEmyVertexgRsPgRcLcLiterator);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::vector<myVertex,allocator<myVertex> >::iterator*)
   {
      return GenerateInitInstanceLocal((::vector<myVertex,allocator<myVertex> >::iterator*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::vector<myVertex,allocator<myVertex> >::iterator*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEmyVertexcOallocatorlEmyVertexgRsPgRcLcLiterator_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::vector<myVertex,allocator<myVertex> >::iterator*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void vectorlEmySVcOallocatorlEmySVgRsPgRcLcLiterator_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEmySVcOallocatorlEmySVgRsPgRcLcLiterator_Dictionary();
   static void *new_vectorlEmySVcOallocatorlEmySVgRsPgRcLcLiterator(void *p = 0);
   static void *newArray_vectorlEmySVcOallocatorlEmySVgRsPgRcLcLiterator(Long_t size, void *p);
   static void delete_vectorlEmySVcOallocatorlEmySVgRsPgRcLcLiterator(void *p);
   static void deleteArray_vectorlEmySVcOallocatorlEmySVgRsPgRcLcLiterator(void *p);
   static void destruct_vectorlEmySVcOallocatorlEmySVgRsPgRcLcLiterator(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::vector<mySV,allocator<mySV> >::iterator*)
   {
      ::vector<mySV,allocator<mySV> >::iterator *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::vector<mySV,allocator<mySV> >::iterator),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<mySV,allocator<mySV> >::iterator", "prec_stl/vector", 269,
                  typeid(::vector<mySV,allocator<mySV> >::iterator), DefineBehavior(ptr, ptr),
                  0, &vectorlEmySVcOallocatorlEmySVgRsPgRcLcLiterator_Dictionary, isa_proxy, 0,
                  sizeof(::vector<mySV,allocator<mySV> >::iterator) );
      instance.SetNew(&new_vectorlEmySVcOallocatorlEmySVgRsPgRcLcLiterator);
      instance.SetNewArray(&newArray_vectorlEmySVcOallocatorlEmySVgRsPgRcLcLiterator);
      instance.SetDelete(&delete_vectorlEmySVcOallocatorlEmySVgRsPgRcLcLiterator);
      instance.SetDeleteArray(&deleteArray_vectorlEmySVcOallocatorlEmySVgRsPgRcLcLiterator);
      instance.SetDestructor(&destruct_vectorlEmySVcOallocatorlEmySVgRsPgRcLcLiterator);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::vector<mySV,allocator<mySV> >::iterator*)
   {
      return GenerateInitInstanceLocal((::vector<mySV,allocator<mySV> >::iterator*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::vector<mySV,allocator<mySV> >::iterator*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEmySVcOallocatorlEmySVgRsPgRcLcLiterator_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::vector<mySV,allocator<mySV> >::iterator*)0x0)->GetClass();
   }

} // end of namespace ROOT

//______________________________________________________________________________
atomic_TClass_ptr myVertex::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *myVertex::Class_Name()
{
   return "myVertex";
}

//______________________________________________________________________________
const char *myVertex::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::myVertex*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int myVertex::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::myVertex*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void myVertex::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::myVertex*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *myVertex::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::myVertex*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr myTriggerObject::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *myTriggerObject::Class_Name()
{
   return "myTriggerObject";
}

//______________________________________________________________________________
const char *myTriggerObject::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::myTriggerObject*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int myTriggerObject::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::myTriggerObject*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void myTriggerObject::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::myTriggerObject*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *myTriggerObject::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::myTriggerObject*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr myGenObject::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *myGenObject::Class_Name()
{
   return "myGenObject";
}

//______________________________________________________________________________
const char *myGenObject::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::myGenObject*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int myGenObject::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::myGenObject*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void myGenObject::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::myGenObject*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *myGenObject::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::myGenObject*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr myMuon::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *myMuon::Class_Name()
{
   return "myMuon";
}

//______________________________________________________________________________
const char *myMuon::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::myMuon*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int myMuon::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::myMuon*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void myMuon::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::myMuon*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *myMuon::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::myMuon*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr myElectron::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *myElectron::Class_Name()
{
   return "myElectron";
}

//______________________________________________________________________________
const char *myElectron::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::myElectron*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int myElectron::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::myElectron*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void myElectron::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::myElectron*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *myElectron::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::myElectron*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr myTau::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *myTau::Class_Name()
{
   return "myTau";
}

//______________________________________________________________________________
const char *myTau::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::myTau*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int myTau::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::myTau*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void myTau::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::myTau*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *myTau::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::myTau*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr myJet::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *myJet::Class_Name()
{
   return "myJet";
}

//______________________________________________________________________________
const char *myJet::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::myJet*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int myJet::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::myJet*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void myJet::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::myJet*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *myJet::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::myJet*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr myMET::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *myMET::Class_Name()
{
   return "myMET";
}

//______________________________________________________________________________
const char *myMET::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::myMET*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int myMET::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::myMET*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void myMET::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::myMET*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *myMET::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::myMET*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr mySV::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *mySV::Class_Name()
{
   return "mySV";
}

//______________________________________________________________________________
const char *mySV::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::mySV*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int mySV::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::mySV*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void mySV::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::mySV*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *mySV::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::mySV*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr myevent::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *myevent::Class_Name()
{
   return "myevent";
}

//______________________________________________________________________________
const char *myevent::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::myevent*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int myevent::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::myevent*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void myevent::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::myevent*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *myevent::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::myevent*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void myVertex::Streamer(TBuffer &R__b)
{
   // Stream an object of class myVertex.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(myVertex::Class(),this);
   } else {
      R__b.WriteClassBuffer(myVertex::Class(),this);
   }
}

//______________________________________________________________________________
void myVertex::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class myVertex.
      TClass *R__cl = ::myVertex::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "px", &px);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "py", &py);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pz", &pz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "position_Rho", &position_Rho);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tracksSize", &tracksSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "normalizedChi2", &normalizedChi2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ndof", &ndof);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Num_Vertex", &Num_Vertex);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_myVertex(void *p) {
      return  p ? new(p) ::myVertex : new ::myVertex;
   }
   static void *newArray_myVertex(Long_t nElements, void *p) {
      return p ? new(p) ::myVertex[nElements] : new ::myVertex[nElements];
   }
   // Wrapper around operator delete
   static void delete_myVertex(void *p) {
      delete ((::myVertex*)p);
   }
   static void deleteArray_myVertex(void *p) {
      delete [] ((::myVertex*)p);
   }
   static void destruct_myVertex(void *p) {
      typedef ::myVertex current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::myVertex

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEmyVertexcOallocatorlEmyVertexgRsPgRcLcLiterator(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::vector<myVertex,allocator<myVertex> >::iterator : new ::vector<myVertex,allocator<myVertex> >::iterator;
   }
   static void *newArray_vectorlEmyVertexcOallocatorlEmyVertexgRsPgRcLcLiterator(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::vector<myVertex,allocator<myVertex> >::iterator[nElements] : new ::vector<myVertex,allocator<myVertex> >::iterator[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEmyVertexcOallocatorlEmyVertexgRsPgRcLcLiterator(void *p) {
      delete ((::vector<myVertex,allocator<myVertex> >::iterator*)p);
   }
   static void deleteArray_vectorlEmyVertexcOallocatorlEmyVertexgRsPgRcLcLiterator(void *p) {
      delete [] ((::vector<myVertex,allocator<myVertex> >::iterator*)p);
   }
   static void destruct_vectorlEmyVertexcOallocatorlEmyVertexgRsPgRcLcLiterator(void *p) {
      typedef ::vector<myVertex,allocator<myVertex> >::iterator current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::vector<myVertex,allocator<myVertex> >::iterator

//______________________________________________________________________________
void myTriggerObject::Streamer(TBuffer &R__b)
{
   // Stream an object of class myTriggerObject.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(myTriggerObject::Class(),this);
   } else {
      R__b.WriteClassBuffer(myTriggerObject::Class(),this);
   }
}

//______________________________________________________________________________
void myTriggerObject::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class myTriggerObject.
      TClass *R__cl = ::myTriggerObject::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "path", (void*)&path);
      R__insp.InspectMember("string", (void*)&path, "path.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isLastFilter", &isLastFilter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isL3", &isL3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi", &phi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pt", &pt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eta", &eta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "px", &px);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "py", &py);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pz", &pz);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_myTriggerObject(void *p) {
      return  p ? new(p) ::myTriggerObject : new ::myTriggerObject;
   }
   static void *newArray_myTriggerObject(Long_t nElements, void *p) {
      return p ? new(p) ::myTriggerObject[nElements] : new ::myTriggerObject[nElements];
   }
   // Wrapper around operator delete
   static void delete_myTriggerObject(void *p) {
      delete ((::myTriggerObject*)p);
   }
   static void deleteArray_myTriggerObject(void *p) {
      delete [] ((::myTriggerObject*)p);
   }
   static void destruct_myTriggerObject(void *p) {
      typedef ::myTriggerObject current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::myTriggerObject

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgRcLcLiterator(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::vector<myTriggerObject,allocator<myTriggerObject> >::iterator : new ::vector<myTriggerObject,allocator<myTriggerObject> >::iterator;
   }
   static void *newArray_vectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgRcLcLiterator(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::vector<myTriggerObject,allocator<myTriggerObject> >::iterator[nElements] : new ::vector<myTriggerObject,allocator<myTriggerObject> >::iterator[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgRcLcLiterator(void *p) {
      delete ((::vector<myTriggerObject,allocator<myTriggerObject> >::iterator*)p);
   }
   static void deleteArray_vectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgRcLcLiterator(void *p) {
      delete [] ((::vector<myTriggerObject,allocator<myTriggerObject> >::iterator*)p);
   }
   static void destruct_vectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgRcLcLiterator(void *p) {
      typedef ::vector<myTriggerObject,allocator<myTriggerObject> >::iterator current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::vector<myTriggerObject,allocator<myTriggerObject> >::iterator

//______________________________________________________________________________
void myGenObject::Streamer(TBuffer &R__b)
{
   // Stream an object of class myGenObject.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(myGenObject::Class(),this);
   } else {
      R__b.WriteClassBuffer(myGenObject::Class(),this);
   }
}

//______________________________________________________________________________
void myGenObject::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class myGenObject.
      TClass *R__cl = ::myGenObject::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "E", &E);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Energy", &Energy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "px", &px);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "py", &py);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pz", &pz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pt", &pt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eta", &eta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi", &phi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "charge", &charge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "z", &z);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mass", &mass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "et", &et);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mod_pt", &mod_pt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mod_eta", &mod_eta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mod_phi", &mod_phi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mod_charge", &mod_charge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mod_z", &mod_z);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mod_mass", &mod_mass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Gmod_pt", &Gmod_pt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Gmod_eta", &Gmod_eta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Gmod_phi", &Gmod_phi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Gmod_charge", &Gmod_charge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Gmod_z", &Gmod_z);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Gmod_mass", &Gmod_mass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pdgId", &pdgId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "status", &status);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mod_pdgId", &mod_pdgId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mod_status", &mod_status);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Gmod_pdgId", &Gmod_pdgId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Gmod_status", &Gmod_status);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gen_index", &gen_index);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "decay_mode", &decay_mode);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_myGenObject(void *p) {
      return  p ? new(p) ::myGenObject : new ::myGenObject;
   }
   static void *newArray_myGenObject(Long_t nElements, void *p) {
      return p ? new(p) ::myGenObject[nElements] : new ::myGenObject[nElements];
   }
   // Wrapper around operator delete
   static void delete_myGenObject(void *p) {
      delete ((::myGenObject*)p);
   }
   static void deleteArray_myGenObject(void *p) {
      delete [] ((::myGenObject*)p);
   }
   static void destruct_myGenObject(void *p) {
      typedef ::myGenObject current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::myGenObject

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgRcLcLiterator(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::vector<myGenObject,allocator<myGenObject> >::iterator : new ::vector<myGenObject,allocator<myGenObject> >::iterator;
   }
   static void *newArray_vectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgRcLcLiterator(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::vector<myGenObject,allocator<myGenObject> >::iterator[nElements] : new ::vector<myGenObject,allocator<myGenObject> >::iterator[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgRcLcLiterator(void *p) {
      delete ((::vector<myGenObject,allocator<myGenObject> >::iterator*)p);
   }
   static void deleteArray_vectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgRcLcLiterator(void *p) {
      delete [] ((::vector<myGenObject,allocator<myGenObject> >::iterator*)p);
   }
   static void destruct_vectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgRcLcLiterator(void *p) {
      typedef ::vector<myGenObject,allocator<myGenObject> >::iterator current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::vector<myGenObject,allocator<myGenObject> >::iterator

//______________________________________________________________________________
void myElectron::Streamer(TBuffer &R__b)
{
   // Stream an object of class myElectron.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(myElectron::Class(),this);
   } else {
      R__b.WriteClassBuffer(myElectron::Class(),this);
   }
}

//______________________________________________________________________________
void myElectron::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class myElectron.
      TClass *R__cl = ::myElectron::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pt", &pt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eta", &eta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "px", &px);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "py", &py);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi", &phi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "charge", &charge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "E", &E);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "et", &et);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pz", &pz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "z", &z);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mass", &mass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Energy", &Energy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mt", &mt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eta_SC", &eta_SC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi_SC", &phi_SC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dxy", &dxy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dz", &dz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ecalEnergy", &ecalEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "full5x5", &full5x5);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "absiso", &absiso);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "reliso", &reliso);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pfIsoCharged", &pfIsoCharged);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pfIsoNeutral", &pfIsoNeutral);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pfIsoGamma", &pfIsoGamma);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pfIsoPU", &pfIsoPU);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gen_index", &gen_index);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "numLostHitEleInner", &numLostHitEleInner);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "deltaPhiSuperClusterTrackAtVtx", &deltaPhiSuperClusterTrackAtVtx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "deltaEtaSuperClusterTrackAtVtx", &deltaEtaSuperClusterTrackAtVtx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigmaIetaIeta", &sigmaIetaIeta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigmaEtaEta", &sigmaEtaEta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ecalIso", &ecalIso);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hcalIso", &hcalIso);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "caloIso", &caloIso);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hcalOverEcal", &hcalOverEcal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "SIP", &SIP);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ooEmooP", &ooEmooP);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "passConversionVeto", &passConversionVeto);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rawE_SC", &rawE_SC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "preshowerE_SC", &preshowerE_SC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "MVAtrigID", &MVAtrigID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "MVAnontrigID", &MVAnontrigID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cutID_loose", &cutID_loose);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cutID_medium", &cutID_medium);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cutID_tight", &cutID_tight);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cutID_veto", &cutID_veto);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "MVAID_nontrig_Loose", &MVAID_nontrig_Loose);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "MVAID_nontrig_Tight", &MVAID_nontrig_Tight);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_myElectron(void *p) {
      return  p ? new(p) ::myElectron : new ::myElectron;
   }
   static void *newArray_myElectron(Long_t nElements, void *p) {
      return p ? new(p) ::myElectron[nElements] : new ::myElectron[nElements];
   }
   // Wrapper around operator delete
   static void delete_myElectron(void *p) {
      delete ((::myElectron*)p);
   }
   static void deleteArray_myElectron(void *p) {
      delete [] ((::myElectron*)p);
   }
   static void destruct_myElectron(void *p) {
      typedef ::myElectron current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::myElectron

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEmyElectroncOallocatorlEmyElectrongRsPgRcLcLiterator(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::vector<myElectron,allocator<myElectron> >::iterator : new ::vector<myElectron,allocator<myElectron> >::iterator;
   }
   static void *newArray_vectorlEmyElectroncOallocatorlEmyElectrongRsPgRcLcLiterator(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::vector<myElectron,allocator<myElectron> >::iterator[nElements] : new ::vector<myElectron,allocator<myElectron> >::iterator[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEmyElectroncOallocatorlEmyElectrongRsPgRcLcLiterator(void *p) {
      delete ((::vector<myElectron,allocator<myElectron> >::iterator*)p);
   }
   static void deleteArray_vectorlEmyElectroncOallocatorlEmyElectrongRsPgRcLcLiterator(void *p) {
      delete [] ((::vector<myElectron,allocator<myElectron> >::iterator*)p);
   }
   static void destruct_vectorlEmyElectroncOallocatorlEmyElectrongRsPgRcLcLiterator(void *p) {
      typedef ::vector<myElectron,allocator<myElectron> >::iterator current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::vector<myElectron,allocator<myElectron> >::iterator

//______________________________________________________________________________
void myTau::Streamer(TBuffer &R__b)
{
   // Stream an object of class myTau.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(myTau::Class(),this);
   } else {
      R__b.WriteClassBuffer(myTau::Class(),this);
   }
}

//______________________________________________________________________________
void myTau::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class myTau.
      TClass *R__cl = ::myTau::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pt", &pt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eta", &eta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "px", &px);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "py", &py);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi", &phi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "charge", &charge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "E", &E);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "et", &et);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pz", &pz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "z", &z);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mass", &mass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dz_Ver_match", &dz_Ver_match);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Energy", &Energy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mt", &mt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "jetMass", &jetMass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eta_SC", &eta_SC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi_SC", &phi_SC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gen_index", &gen_index);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dxy", &dxy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dz", &dz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "zImpact", &zImpact);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isFirstVtx", &isFirstVtx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "decayMode", &decayMode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "leadChargedParticlePt", &leadChargedParticlePt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trackRefPt", &trackRefPt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "numChargedParticlesSignalCone", &numChargedParticlesSignalCone);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "numNeutralHadronsSignalCone", &numNeutralHadronsSignalCone);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "numPhotonsSignalCone", &numPhotonsSignalCone);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "numParticlesSignalCone", &numParticlesSignalCone);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "signalPiZeroCandidates", &signalPiZeroCandidates);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "numChargedParticlesIsoCone", &numChargedParticlesIsoCone);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "numNeutralHadronsIsoCone", &numNeutralHadronsIsoCone);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "numPhotonsIsoCone", &numPhotonsIsoCone);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "numParticlesIsoCone", &numParticlesIsoCone);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ptSumChargedParticlesIsoCone", &ptSumChargedParticlesIsoCone);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ptSumPhotonsIsoCone", &ptSumPhotonsIsoCone);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "discriminationByDecayModeFinding", &discriminationByDecayModeFinding);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "discriminationByElectronMVA5VLoose", &discriminationByElectronMVA5VLoose);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "discriminationByElectronMVA5Loose", &discriminationByElectronMVA5Loose);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "discriminationByElectronMVA5Medium", &discriminationByElectronMVA5Medium);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "discriminationByElectronLoose", &discriminationByElectronLoose);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "discriminationByMuonLoose3", &discriminationByMuonLoose3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "discriminationByMuonTight3", &discriminationByMuonTight3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "byLooseCombinedIsolationDeltaBetaCorr3Hits", &byLooseCombinedIsolationDeltaBetaCorr3Hits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "byMediumCombinedIsolationDeltaBetaCorr3Hits", &byMediumCombinedIsolationDeltaBetaCorr3Hits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "byTightCombinedIsolationDeltaBetaCorr3Hits", &byTightCombinedIsolationDeltaBetaCorr3Hits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "byVLooseIsolationMVA3oldDMwLT", &byVLooseIsolationMVA3oldDMwLT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "byLooseIsolationMVA3oldDMwLT", &byLooseIsolationMVA3oldDMwLT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "byMediumIsolationMVA3oldDMwLT", &byMediumIsolationMVA3oldDMwLT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "byTightIsolationMVA3oldDMwLT", &byTightIsolationMVA3oldDMwLT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "byVTightIsolationMVA3oldDMwLT", &byVTightIsolationMVA3oldDMwLT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "byRawCombinedIsolationDeltaBetaCorr3Hits", &byRawCombinedIsolationDeltaBetaCorr3Hits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "discriminationByDecayModeFindingNewDMs", &discriminationByDecayModeFindingNewDMs);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "discriminationByDecayModeFindingOldDMs", &discriminationByDecayModeFindingOldDMs);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "IsolationChargedIsoPtSum", &IsolationChargedIsoPtSum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "IsolationNeutralIsoPtSum", &IsolationNeutralIsoPtSum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "IsolationPUcorrPtSum", &IsolationPUcorrPtSum);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_myTau(void *p) {
      return  p ? new(p) ::myTau : new ::myTau;
   }
   static void *newArray_myTau(Long_t nElements, void *p) {
      return p ? new(p) ::myTau[nElements] : new ::myTau[nElements];
   }
   // Wrapper around operator delete
   static void delete_myTau(void *p) {
      delete ((::myTau*)p);
   }
   static void deleteArray_myTau(void *p) {
      delete [] ((::myTau*)p);
   }
   static void destruct_myTau(void *p) {
      typedef ::myTau current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::myTau

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEmyTaucOallocatorlEmyTaugRsPgRcLcLiterator(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::vector<myTau,allocator<myTau> >::iterator : new ::vector<myTau,allocator<myTau> >::iterator;
   }
   static void *newArray_vectorlEmyTaucOallocatorlEmyTaugRsPgRcLcLiterator(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::vector<myTau,allocator<myTau> >::iterator[nElements] : new ::vector<myTau,allocator<myTau> >::iterator[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEmyTaucOallocatorlEmyTaugRsPgRcLcLiterator(void *p) {
      delete ((::vector<myTau,allocator<myTau> >::iterator*)p);
   }
   static void deleteArray_vectorlEmyTaucOallocatorlEmyTaugRsPgRcLcLiterator(void *p) {
      delete [] ((::vector<myTau,allocator<myTau> >::iterator*)p);
   }
   static void destruct_vectorlEmyTaucOallocatorlEmyTaugRsPgRcLcLiterator(void *p) {
      typedef ::vector<myTau,allocator<myTau> >::iterator current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::vector<myTau,allocator<myTau> >::iterator

//______________________________________________________________________________
void myMuon::Streamer(TBuffer &R__b)
{
   // Stream an object of class myMuon.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(myMuon::Class(),this);
   } else {
      R__b.WriteClassBuffer(myMuon::Class(),this);
   }
}

//______________________________________________________________________________
void myMuon::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class myMuon.
      TClass *R__cl = ::myMuon::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pt", &pt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eta", &eta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "px", &px);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "py", &py);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi", &phi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "charge", &charge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "E", &E);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "et", &et);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pz", &pz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "z", &z);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mass", &mass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Energy", &Energy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mt", &mt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "absiso", &absiso);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "reliso", &reliso);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pfIsoAll", &pfIsoAll);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pfIsoCharged", &pfIsoCharged);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pfIsoNeutral", &pfIsoNeutral);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pfIsoGamma", &pfIsoGamma);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pfIsoPU", &pfIsoPU);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gen_index", &gen_index);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dB", &dB);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "emfraction", &emfraction);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "DepositR03Ecal", &DepositR03Ecal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "DepositR03Hcal", &DepositR03Hcal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "DepositR03TrackerOfficial", &DepositR03TrackerOfficial);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "GlobalMuonPromptTight", &GlobalMuonPromptTight);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isLooseMuon", &isLooseMuon);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isTightMuon", &isTightMuon);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isSoftMuon", &isSoftMuon);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isHighPtMuon", &isHighPtMuon);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isMediumMuon", &isMediumMuon);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TMOneStationLoose", &TMOneStationLoose);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TM2DCompatibilityLoose", &TM2DCompatibilityLoose);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isGlobalMuon", &isGlobalMuon);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isTrackerMuon", &isTrackerMuon);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isStandAloneMuon", &isStandAloneMuon);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isPFMuon", &isPFMuon);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "numberOfValidMuonHits", &numberOfValidMuonHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "numberOfHits", &numberOfHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "numMatchStation", &numMatchStation);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "numberOfValidPixelHits", &numberOfValidPixelHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "normalizedChi2_innTrk", &normalizedChi2_innTrk);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "numberOfValidMuonHits_innTrk", &numberOfValidMuonHits_innTrk);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "numberOfHits_innTrk", &numberOfHits_innTrk);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "normalizedChi2", &normalizedChi2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trkLayerMeasure", &trkLayerMeasure);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "intrkLayerMeasure", &intrkLayerMeasure);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "intrkLayerpixel", &intrkLayerpixel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dxy", &dxy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dz", &dz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "segmentCompatibility", &segmentCompatibility);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "validFraction", &validFraction);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trkKink", &trkKink);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chi2LocalPosition", &chi2LocalPosition);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_myMuon(void *p) {
      return  p ? new(p) ::myMuon : new ::myMuon;
   }
   static void *newArray_myMuon(Long_t nElements, void *p) {
      return p ? new(p) ::myMuon[nElements] : new ::myMuon[nElements];
   }
   // Wrapper around operator delete
   static void delete_myMuon(void *p) {
      delete ((::myMuon*)p);
   }
   static void deleteArray_myMuon(void *p) {
      delete [] ((::myMuon*)p);
   }
   static void destruct_myMuon(void *p) {
      typedef ::myMuon current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::myMuon

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEmyMuoncOallocatorlEmyMuongRsPgRcLcLiterator(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::vector<myMuon,allocator<myMuon> >::iterator : new ::vector<myMuon,allocator<myMuon> >::iterator;
   }
   static void *newArray_vectorlEmyMuoncOallocatorlEmyMuongRsPgRcLcLiterator(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::vector<myMuon,allocator<myMuon> >::iterator[nElements] : new ::vector<myMuon,allocator<myMuon> >::iterator[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEmyMuoncOallocatorlEmyMuongRsPgRcLcLiterator(void *p) {
      delete ((::vector<myMuon,allocator<myMuon> >::iterator*)p);
   }
   static void deleteArray_vectorlEmyMuoncOallocatorlEmyMuongRsPgRcLcLiterator(void *p) {
      delete [] ((::vector<myMuon,allocator<myMuon> >::iterator*)p);
   }
   static void destruct_vectorlEmyMuoncOallocatorlEmyMuongRsPgRcLcLiterator(void *p) {
      typedef ::vector<myMuon,allocator<myMuon> >::iterator current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::vector<myMuon,allocator<myMuon> >::iterator

//______________________________________________________________________________
void myJet::Streamer(TBuffer &R__b)
{
   // Stream an object of class myJet.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(myJet::Class(),this);
   } else {
      R__b.WriteClassBuffer(myJet::Class(),this);
   }
}

//______________________________________________________________________________
void myJet::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class myJet.
      TClass *R__cl = ::myJet::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pt", &pt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eta", &eta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "px", &px);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "py", &py);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi", &phi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "E", &E);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pz", &pz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "z", &z);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mass", &mass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Energy", &Energy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vtxMass", &vtxMass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vtxNtracks", &vtxNtracks);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vtx3DVal", &vtx3DVal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vtx3DSig", &vtx3DSig);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "partonFlavour", &partonFlavour);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gen_index", &gen_index);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "jetId_Loose", &jetId_Loose);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "jetId_Medium", &jetId_Medium);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "jetId_Tight", &jetId_Tight);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "CSV", &CSV);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "puJetId", &puJetId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "puJetIdraw", &puJetIdraw);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_myJet(void *p) {
      return  p ? new(p) ::myJet : new ::myJet;
   }
   static void *newArray_myJet(Long_t nElements, void *p) {
      return p ? new(p) ::myJet[nElements] : new ::myJet[nElements];
   }
   // Wrapper around operator delete
   static void delete_myJet(void *p) {
      delete ((::myJet*)p);
   }
   static void deleteArray_myJet(void *p) {
      delete [] ((::myJet*)p);
   }
   static void destruct_myJet(void *p) {
      typedef ::myJet current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::myJet

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEmyJetcOallocatorlEmyJetgRsPgRcLcLiterator(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::vector<myJet,allocator<myJet> >::iterator : new ::vector<myJet,allocator<myJet> >::iterator;
   }
   static void *newArray_vectorlEmyJetcOallocatorlEmyJetgRsPgRcLcLiterator(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::vector<myJet,allocator<myJet> >::iterator[nElements] : new ::vector<myJet,allocator<myJet> >::iterator[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEmyJetcOallocatorlEmyJetgRsPgRcLcLiterator(void *p) {
      delete ((::vector<myJet,allocator<myJet> >::iterator*)p);
   }
   static void deleteArray_vectorlEmyJetcOallocatorlEmyJetgRsPgRcLcLiterator(void *p) {
      delete [] ((::vector<myJet,allocator<myJet> >::iterator*)p);
   }
   static void destruct_vectorlEmyJetcOallocatorlEmyJetgRsPgRcLcLiterator(void *p) {
      typedef ::vector<myJet,allocator<myJet> >::iterator current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::vector<myJet,allocator<myJet> >::iterator

//______________________________________________________________________________
void myMET::Streamer(TBuffer &R__b)
{
   // Stream an object of class myMET.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(myMET::Class(),this);
   } else {
      R__b.WriteClassBuffer(myMET::Class(),this);
   }
}

//______________________________________________________________________________
void myMET::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class myMET.
      TClass *R__cl = ::myMET::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pt", &pt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eta", &eta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "px", &px);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "py", &py);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi", &phi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "et", &et);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "genMET", &genMET);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pt_JetEnUp", &pt_JetEnUp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pt_JetEnDown", &pt_JetEnDown);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pt_MuonEnUp", &pt_MuonEnUp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pt_MuonEnDown", &pt_MuonEnDown);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pt_ElectronEnUp", &pt_ElectronEnUp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pt_ElectronEnDown", &pt_ElectronEnDown);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pt_UnclusteredEnUp", &pt_UnclusteredEnUp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pt_UnclusteredEnDown", &pt_UnclusteredEnDown);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pt_JetResUp", &pt_JetResUp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pt_JetResDown", &pt_JetResDown);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi_JetEnUp", &phi_JetEnUp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi_JetEnDown", &phi_JetEnDown);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi_MuonEnUp", &phi_MuonEnUp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi_MuonEnDown", &phi_MuonEnDown);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi_ElectronEnUp", &phi_ElectronEnUp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi_ElectronEnDown", &phi_ElectronEnDown);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi_UnclusteredEnUp", &phi_UnclusteredEnUp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi_UnclusteredEnDown", &phi_UnclusteredEnDown);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi_JetResUp", &phi_JetResUp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi_JetResDown", &phi_JetResDown);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_myMET(void *p) {
      return  p ? new(p) ::myMET : new ::myMET;
   }
   static void *newArray_myMET(Long_t nElements, void *p) {
      return p ? new(p) ::myMET[nElements] : new ::myMET[nElements];
   }
   // Wrapper around operator delete
   static void delete_myMET(void *p) {
      delete ((::myMET*)p);
   }
   static void deleteArray_myMET(void *p) {
      delete [] ((::myMET*)p);
   }
   static void destruct_myMET(void *p) {
      typedef ::myMET current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::myMET

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEmyMETcOallocatorlEmyMETgRsPgRcLcLiterator(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::vector<myMET,allocator<myMET> >::iterator : new ::vector<myMET,allocator<myMET> >::iterator;
   }
   static void *newArray_vectorlEmyMETcOallocatorlEmyMETgRsPgRcLcLiterator(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::vector<myMET,allocator<myMET> >::iterator[nElements] : new ::vector<myMET,allocator<myMET> >::iterator[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEmyMETcOallocatorlEmyMETgRsPgRcLcLiterator(void *p) {
      delete ((::vector<myMET,allocator<myMET> >::iterator*)p);
   }
   static void deleteArray_vectorlEmyMETcOallocatorlEmyMETgRsPgRcLcLiterator(void *p) {
      delete [] ((::vector<myMET,allocator<myMET> >::iterator*)p);
   }
   static void destruct_vectorlEmyMETcOallocatorlEmyMETgRsPgRcLcLiterator(void *p) {
      typedef ::vector<myMET,allocator<myMET> >::iterator current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::vector<myMET,allocator<myMET> >::iterator

//______________________________________________________________________________
void mySV::Streamer(TBuffer &R__b)
{
   // Stream an object of class mySV.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(mySV::Class(),this);
   } else {
      R__b.WriteClassBuffer(mySV::Class(),this);
   }
}

//______________________________________________________________________________
void mySV::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class mySV.
      TClass *R__cl = ::mySV::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pt", &pt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eta", &eta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi", &phi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mass", &mass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "met", &met);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_mySV(void *p) {
      return  p ? new(p) ::mySV : new ::mySV;
   }
   static void *newArray_mySV(Long_t nElements, void *p) {
      return p ? new(p) ::mySV[nElements] : new ::mySV[nElements];
   }
   // Wrapper around operator delete
   static void delete_mySV(void *p) {
      delete ((::mySV*)p);
   }
   static void deleteArray_mySV(void *p) {
      delete [] ((::mySV*)p);
   }
   static void destruct_mySV(void *p) {
      typedef ::mySV current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::mySV

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEmySVcOallocatorlEmySVgRsPgRcLcLiterator(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::vector<mySV,allocator<mySV> >::iterator : new ::vector<mySV,allocator<mySV> >::iterator;
   }
   static void *newArray_vectorlEmySVcOallocatorlEmySVgRsPgRcLcLiterator(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::vector<mySV,allocator<mySV> >::iterator[nElements] : new ::vector<mySV,allocator<mySV> >::iterator[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEmySVcOallocatorlEmySVgRsPgRcLcLiterator(void *p) {
      delete ((::vector<mySV,allocator<mySV> >::iterator*)p);
   }
   static void deleteArray_vectorlEmySVcOallocatorlEmySVgRsPgRcLcLiterator(void *p) {
      delete [] ((::vector<mySV,allocator<mySV> >::iterator*)p);
   }
   static void destruct_vectorlEmySVcOallocatorlEmySVgRsPgRcLcLiterator(void *p) {
      typedef ::vector<mySV,allocator<mySV> >::iterator current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::vector<mySV,allocator<mySV> >::iterator

//______________________________________________________________________________
void myevent::Streamer(TBuffer &R__b)
{
   // Stream an object of class myevent.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(myevent::Class(),this);
   } else {
      R__b.WriteClassBuffer(myevent::Class(),this);
   }
}

//______________________________________________________________________________
void myevent::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class myevent.
      TClass *R__cl = ::myevent::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "RecGenParticles", (void*)&RecGenParticles);
      R__insp.InspectMember("vector<myGenObject>", (void*)&RecGenParticles, "RecGenParticles.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TriggerObj", (void*)&TriggerObj);
      R__insp.InspectMember("vector<myTriggerObject>", (void*)&TriggerObj, "TriggerObj.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "PreselectedJets", (void*)&PreselectedJets);
      R__insp.InspectMember("vector<myJet>", (void*)&PreselectedJets, "PreselectedJets.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "PreSelectedElectrons", (void*)&PreSelectedElectrons);
      R__insp.InspectMember("vector<myElectron>", (void*)&PreSelectedElectrons, "PreSelectedElectrons.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "PreSelectedMuons", (void*)&PreSelectedMuons);
      R__insp.InspectMember("vector<myMuon>", (void*)&PreSelectedMuons, "PreSelectedMuons.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "PreSelectedTaus", (void*)&PreSelectedTaus);
      R__insp.InspectMember("vector<myTau>", (void*)&PreSelectedTaus, "PreSelectedTaus.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "LooseTaus", (void*)&LooseTaus);
      R__insp.InspectMember("vector<myTau>", (void*)&LooseTaus, "LooseTaus.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "RecPFMet", (void*)&RecPFMet);
      R__insp.InspectMember("vector<myMET>", (void*)&RecPFMet, "RecPFMet.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Vertex", (void*)&Vertex);
      R__insp.InspectMember("vector<myVertex>", (void*)&Vertex, "Vertex.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "PairMet_etau", (void*)&PairMet_etau);
      R__insp.InspectMember("vector<myMET>", (void*)&PairMet_etau, "PairMet_etau.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "PairMet_mutau", (void*)&PairMet_mutau);
      R__insp.InspectMember("vector<myMET>", (void*)&PairMet_mutau, "PairMet_mutau.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "PairMet_tautau", (void*)&PairMet_tautau);
      R__insp.InspectMember("vector<myMET>", (void*)&PairMet_tautau, "PairMet_tautau.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "PairMet_emu", (void*)&PairMet_emu);
      R__insp.InspectMember("vector<myMET>", (void*)&PairMet_emu, "PairMet_emu.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "SV_etau", (void*)&SV_etau);
      R__insp.InspectMember("vector<mySV>", (void*)&SV_etau, "SV_etau.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "SV_mutau", (void*)&SV_mutau);
      R__insp.InspectMember("vector<mySV>", (void*)&SV_mutau, "SV_mutau.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "SV_tautau", (void*)&SV_tautau);
      R__insp.InspectMember("vector<mySV>", (void*)&SV_tautau, "SV_tautau.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "SV_emu", (void*)&SV_emu);
      R__insp.InspectMember("vector<mySV>", (void*)&SV_emu, "SV_emu.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "PairRecoilMet_etau", (void*)&PairRecoilMet_etau);
      R__insp.InspectMember("vector<myMET>", (void*)&PairRecoilMet_etau, "PairRecoilMet_etau.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "PairRecoilMet_mutau", (void*)&PairRecoilMet_mutau);
      R__insp.InspectMember("vector<myMET>", (void*)&PairRecoilMet_mutau, "PairRecoilMet_mutau.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "PairRecoilMet_tautau", (void*)&PairRecoilMet_tautau);
      R__insp.InspectMember("vector<myMET>", (void*)&PairRecoilMet_tautau, "PairRecoilMet_tautau.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "PairRecoilMet_emu", (void*)&PairRecoilMet_emu);
      R__insp.InspectMember("vector<myMET>", (void*)&PairRecoilMet_emu, "PairRecoilMet_emu.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "PairMet_etau_sigMatrix_00", (void*)&PairMet_etau_sigMatrix_00);
      R__insp.InspectMember("vector<float>", (void*)&PairMet_etau_sigMatrix_00, "PairMet_etau_sigMatrix_00.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "PairMet_etau_sigMatrix_10", (void*)&PairMet_etau_sigMatrix_10);
      R__insp.InspectMember("vector<float>", (void*)&PairMet_etau_sigMatrix_10, "PairMet_etau_sigMatrix_10.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "PairMet_etau_sigMatrix_01", (void*)&PairMet_etau_sigMatrix_01);
      R__insp.InspectMember("vector<float>", (void*)&PairMet_etau_sigMatrix_01, "PairMet_etau_sigMatrix_01.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "PairMet_etau_sigMatrix_11", (void*)&PairMet_etau_sigMatrix_11);
      R__insp.InspectMember("vector<float>", (void*)&PairMet_etau_sigMatrix_11, "PairMet_etau_sigMatrix_11.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "PairMet_mutau_sigMatrix_00", (void*)&PairMet_mutau_sigMatrix_00);
      R__insp.InspectMember("vector<float>", (void*)&PairMet_mutau_sigMatrix_00, "PairMet_mutau_sigMatrix_00.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "PairMet_mutau_sigMatrix_10", (void*)&PairMet_mutau_sigMatrix_10);
      R__insp.InspectMember("vector<float>", (void*)&PairMet_mutau_sigMatrix_10, "PairMet_mutau_sigMatrix_10.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "PairMet_mutau_sigMatrix_01", (void*)&PairMet_mutau_sigMatrix_01);
      R__insp.InspectMember("vector<float>", (void*)&PairMet_mutau_sigMatrix_01, "PairMet_mutau_sigMatrix_01.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "PairMet_mutau_sigMatrix_11", (void*)&PairMet_mutau_sigMatrix_11);
      R__insp.InspectMember("vector<float>", (void*)&PairMet_mutau_sigMatrix_11, "PairMet_mutau_sigMatrix_11.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "PairMet_tautau_sigMatrix_00", (void*)&PairMet_tautau_sigMatrix_00);
      R__insp.InspectMember("vector<float>", (void*)&PairMet_tautau_sigMatrix_00, "PairMet_tautau_sigMatrix_00.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "PairMet_tautau_sigMatrix_10", (void*)&PairMet_tautau_sigMatrix_10);
      R__insp.InspectMember("vector<float>", (void*)&PairMet_tautau_sigMatrix_10, "PairMet_tautau_sigMatrix_10.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "PairMet_tautau_sigMatrix_01", (void*)&PairMet_tautau_sigMatrix_01);
      R__insp.InspectMember("vector<float>", (void*)&PairMet_tautau_sigMatrix_01, "PairMet_tautau_sigMatrix_01.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "PairMet_tautau_sigMatrix_11", (void*)&PairMet_tautau_sigMatrix_11);
      R__insp.InspectMember("vector<float>", (void*)&PairMet_tautau_sigMatrix_11, "PairMet_tautau_sigMatrix_11.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "PairMet_emu_sigMatrix_00", (void*)&PairMet_emu_sigMatrix_00);
      R__insp.InspectMember("vector<float>", (void*)&PairMet_emu_sigMatrix_00, "PairMet_emu_sigMatrix_00.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "PairMet_emu_sigMatrix_10", (void*)&PairMet_emu_sigMatrix_10);
      R__insp.InspectMember("vector<float>", (void*)&PairMet_emu_sigMatrix_10, "PairMet_emu_sigMatrix_10.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "PairMet_emu_sigMatrix_01", (void*)&PairMet_emu_sigMatrix_01);
      R__insp.InspectMember("vector<float>", (void*)&PairMet_emu_sigMatrix_01, "PairMet_emu_sigMatrix_01.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "PairMet_emu_sigMatrix_11", (void*)&PairMet_emu_sigMatrix_11);
      R__insp.InspectMember("vector<float>", (void*)&PairMet_emu_sigMatrix_11, "PairMet_emu_sigMatrix_11.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "HLT", (void*)&HLT);
      R__insp.InspectMember("map<string,int>", (void*)&HLT, "HLT.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "METfilters", (void*)&METfilters);
      R__insp.InspectMember("map<string,int>", (void*)&METfilters, "METfilters.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "runNumber", &runNumber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eventNumber", &eventNumber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lumiNumber", &lumiNumber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "PUInfo", &PUInfo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "PUInfo_true", &PUInfo_true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "PUInfo_Bunch0", &PUInfo_Bunch0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Rho", &Rho);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "NUP", &NUP);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_myevent(void *p) {
      return  p ? new(p) ::myevent : new ::myevent;
   }
   static void *newArray_myevent(Long_t nElements, void *p) {
      return p ? new(p) ::myevent[nElements] : new ::myevent[nElements];
   }
   // Wrapper around operator delete
   static void delete_myevent(void *p) {
      delete ((::myevent*)p);
   }
   static void deleteArray_myevent(void *p) {
      delete [] ((::myevent*)p);
   }
   static void destruct_myevent(void *p) {
      typedef ::myevent current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::myevent

namespace ROOT {
   void maplEstringcOintgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplEstringcOintgR_Dictionary();
   static void *new_maplEstringcOintgR(void *p = 0);
   static void *newArray_maplEstringcOintgR(Long_t size, void *p);
   static void delete_maplEstringcOintgR(void *p);
   static void deleteArray_maplEstringcOintgR(void *p);
   static void destruct_maplEstringcOintgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const map<string,int>*)
   {
      map<string,int> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<string,int>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<string,int>", -2, "map.dll", 0,
                  typeid(map<string,int>), DefineBehavior(ptr, ptr),
                  0, &maplEstringcOintgR_Dictionary, isa_proxy, 0,
                  sizeof(map<string,int>) );
      instance.SetNew(&new_maplEstringcOintgR);
      instance.SetNewArray(&newArray_maplEstringcOintgR);
      instance.SetDelete(&delete_maplEstringcOintgR);
      instance.SetDeleteArray(&deleteArray_maplEstringcOintgR);
      instance.SetDestructor(&destruct_maplEstringcOintgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::MapInsert< map<string,int> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<string,int>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplEstringcOintgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const map<string,int>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_maplEstringcOintgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,int> : new map<string,int>;
   }
   static void *newArray_maplEstringcOintgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,int>[nElements] : new map<string,int>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplEstringcOintgR(void *p) {
      delete ((map<string,int>*)p);
   }
   static void deleteArray_maplEstringcOintgR(void *p) {
      delete [] ((map<string,int>*)p);
   }
   static void destruct_maplEstringcOintgR(void *p) {
      typedef map<string,int> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class map<string,int>

namespace ROOT {
   void vectorlEfloatgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEfloatgR_Dictionary();
   static void *new_vectorlEfloatgR(void *p = 0);
   static void *newArray_vectorlEfloatgR(Long_t size, void *p);
   static void delete_vectorlEfloatgR(void *p);
   static void deleteArray_vectorlEfloatgR(void *p);
   static void destruct_vectorlEfloatgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<float>*)
   {
      vector<float> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<float>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<float>", -2, "vector.dll", 0,
                  typeid(vector<float>), DefineBehavior(ptr, ptr),
                  0, &vectorlEfloatgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<float>) );
      instance.SetNew(&new_vectorlEfloatgR);
      instance.SetNewArray(&newArray_vectorlEfloatgR);
      instance.SetDelete(&delete_vectorlEfloatgR);
      instance.SetDeleteArray(&deleteArray_vectorlEfloatgR);
      instance.SetDestructor(&destruct_vectorlEfloatgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<float> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<float>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEfloatgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<float>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEfloatgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<float> : new vector<float>;
   }
   static void *newArray_vectorlEfloatgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<float>[nElements] : new vector<float>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEfloatgR(void *p) {
      delete ((vector<float>*)p);
   }
   static void deleteArray_vectorlEfloatgR(void *p) {
      delete [] ((vector<float>*)p);
   }
   static void destruct_vectorlEfloatgR(void *p) {
      typedef vector<float> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<float>

namespace ROOT {
   void vectorlEmyElectrongR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEmyElectrongR_Dictionary();
   static void *new_vectorlEmyElectrongR(void *p = 0);
   static void *newArray_vectorlEmyElectrongR(Long_t size, void *p);
   static void delete_vectorlEmyElectrongR(void *p);
   static void deleteArray_vectorlEmyElectrongR(void *p);
   static void destruct_vectorlEmyElectrongR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<myElectron>*)
   {
      vector<myElectron> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<myElectron>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<myElectron>", -2, "prec_stl/vector", 49,
                  typeid(vector<myElectron>), DefineBehavior(ptr, ptr),
                  0, &vectorlEmyElectrongR_Dictionary, isa_proxy, 0,
                  sizeof(vector<myElectron>) );
      instance.SetNew(&new_vectorlEmyElectrongR);
      instance.SetNewArray(&newArray_vectorlEmyElectrongR);
      instance.SetDelete(&delete_vectorlEmyElectrongR);
      instance.SetDeleteArray(&deleteArray_vectorlEmyElectrongR);
      instance.SetDestructor(&destruct_vectorlEmyElectrongR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<myElectron> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<myElectron>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEmyElectrongR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<myElectron>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEmyElectrongR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<myElectron> : new vector<myElectron>;
   }
   static void *newArray_vectorlEmyElectrongR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<myElectron>[nElements] : new vector<myElectron>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEmyElectrongR(void *p) {
      delete ((vector<myElectron>*)p);
   }
   static void deleteArray_vectorlEmyElectrongR(void *p) {
      delete [] ((vector<myElectron>*)p);
   }
   static void destruct_vectorlEmyElectrongR(void *p) {
      typedef vector<myElectron> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<myElectron>

namespace ROOT {
   void vectorlEmyGenObjectgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEmyGenObjectgR_Dictionary();
   static void *new_vectorlEmyGenObjectgR(void *p = 0);
   static void *newArray_vectorlEmyGenObjectgR(Long_t size, void *p);
   static void delete_vectorlEmyGenObjectgR(void *p);
   static void deleteArray_vectorlEmyGenObjectgR(void *p);
   static void destruct_vectorlEmyGenObjectgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<myGenObject>*)
   {
      vector<myGenObject> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<myGenObject>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<myGenObject>", -2, "prec_stl/vector", 49,
                  typeid(vector<myGenObject>), DefineBehavior(ptr, ptr),
                  0, &vectorlEmyGenObjectgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<myGenObject>) );
      instance.SetNew(&new_vectorlEmyGenObjectgR);
      instance.SetNewArray(&newArray_vectorlEmyGenObjectgR);
      instance.SetDelete(&delete_vectorlEmyGenObjectgR);
      instance.SetDeleteArray(&deleteArray_vectorlEmyGenObjectgR);
      instance.SetDestructor(&destruct_vectorlEmyGenObjectgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<myGenObject> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<myGenObject>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEmyGenObjectgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<myGenObject>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEmyGenObjectgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<myGenObject> : new vector<myGenObject>;
   }
   static void *newArray_vectorlEmyGenObjectgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<myGenObject>[nElements] : new vector<myGenObject>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEmyGenObjectgR(void *p) {
      delete ((vector<myGenObject>*)p);
   }
   static void deleteArray_vectorlEmyGenObjectgR(void *p) {
      delete [] ((vector<myGenObject>*)p);
   }
   static void destruct_vectorlEmyGenObjectgR(void *p) {
      typedef vector<myGenObject> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<myGenObject>

namespace ROOT {
   void vectorlEmyJetgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEmyJetgR_Dictionary();
   static void *new_vectorlEmyJetgR(void *p = 0);
   static void *newArray_vectorlEmyJetgR(Long_t size, void *p);
   static void delete_vectorlEmyJetgR(void *p);
   static void deleteArray_vectorlEmyJetgR(void *p);
   static void destruct_vectorlEmyJetgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<myJet>*)
   {
      vector<myJet> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<myJet>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<myJet>", -2, "prec_stl/vector", 49,
                  typeid(vector<myJet>), DefineBehavior(ptr, ptr),
                  0, &vectorlEmyJetgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<myJet>) );
      instance.SetNew(&new_vectorlEmyJetgR);
      instance.SetNewArray(&newArray_vectorlEmyJetgR);
      instance.SetDelete(&delete_vectorlEmyJetgR);
      instance.SetDeleteArray(&deleteArray_vectorlEmyJetgR);
      instance.SetDestructor(&destruct_vectorlEmyJetgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<myJet> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<myJet>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEmyJetgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<myJet>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEmyJetgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<myJet> : new vector<myJet>;
   }
   static void *newArray_vectorlEmyJetgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<myJet>[nElements] : new vector<myJet>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEmyJetgR(void *p) {
      delete ((vector<myJet>*)p);
   }
   static void deleteArray_vectorlEmyJetgR(void *p) {
      delete [] ((vector<myJet>*)p);
   }
   static void destruct_vectorlEmyJetgR(void *p) {
      typedef vector<myJet> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<myJet>

namespace ROOT {
   void vectorlEmyMETgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEmyMETgR_Dictionary();
   static void *new_vectorlEmyMETgR(void *p = 0);
   static void *newArray_vectorlEmyMETgR(Long_t size, void *p);
   static void delete_vectorlEmyMETgR(void *p);
   static void deleteArray_vectorlEmyMETgR(void *p);
   static void destruct_vectorlEmyMETgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<myMET>*)
   {
      vector<myMET> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<myMET>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<myMET>", -2, "prec_stl/vector", 49,
                  typeid(vector<myMET>), DefineBehavior(ptr, ptr),
                  0, &vectorlEmyMETgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<myMET>) );
      instance.SetNew(&new_vectorlEmyMETgR);
      instance.SetNewArray(&newArray_vectorlEmyMETgR);
      instance.SetDelete(&delete_vectorlEmyMETgR);
      instance.SetDeleteArray(&deleteArray_vectorlEmyMETgR);
      instance.SetDestructor(&destruct_vectorlEmyMETgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<myMET> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<myMET>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEmyMETgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<myMET>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEmyMETgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<myMET> : new vector<myMET>;
   }
   static void *newArray_vectorlEmyMETgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<myMET>[nElements] : new vector<myMET>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEmyMETgR(void *p) {
      delete ((vector<myMET>*)p);
   }
   static void deleteArray_vectorlEmyMETgR(void *p) {
      delete [] ((vector<myMET>*)p);
   }
   static void destruct_vectorlEmyMETgR(void *p) {
      typedef vector<myMET> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<myMET>

namespace ROOT {
   void vectorlEmyMuongR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEmyMuongR_Dictionary();
   static void *new_vectorlEmyMuongR(void *p = 0);
   static void *newArray_vectorlEmyMuongR(Long_t size, void *p);
   static void delete_vectorlEmyMuongR(void *p);
   static void deleteArray_vectorlEmyMuongR(void *p);
   static void destruct_vectorlEmyMuongR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<myMuon>*)
   {
      vector<myMuon> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<myMuon>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<myMuon>", -2, "prec_stl/vector", 49,
                  typeid(vector<myMuon>), DefineBehavior(ptr, ptr),
                  0, &vectorlEmyMuongR_Dictionary, isa_proxy, 0,
                  sizeof(vector<myMuon>) );
      instance.SetNew(&new_vectorlEmyMuongR);
      instance.SetNewArray(&newArray_vectorlEmyMuongR);
      instance.SetDelete(&delete_vectorlEmyMuongR);
      instance.SetDeleteArray(&deleteArray_vectorlEmyMuongR);
      instance.SetDestructor(&destruct_vectorlEmyMuongR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<myMuon> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<myMuon>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEmyMuongR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<myMuon>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEmyMuongR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<myMuon> : new vector<myMuon>;
   }
   static void *newArray_vectorlEmyMuongR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<myMuon>[nElements] : new vector<myMuon>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEmyMuongR(void *p) {
      delete ((vector<myMuon>*)p);
   }
   static void deleteArray_vectorlEmyMuongR(void *p) {
      delete [] ((vector<myMuon>*)p);
   }
   static void destruct_vectorlEmyMuongR(void *p) {
      typedef vector<myMuon> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<myMuon>

namespace ROOT {
   void vectorlEmySVgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEmySVgR_Dictionary();
   static void *new_vectorlEmySVgR(void *p = 0);
   static void *newArray_vectorlEmySVgR(Long_t size, void *p);
   static void delete_vectorlEmySVgR(void *p);
   static void deleteArray_vectorlEmySVgR(void *p);
   static void destruct_vectorlEmySVgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<mySV>*)
   {
      vector<mySV> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<mySV>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<mySV>", -2, "prec_stl/vector", 49,
                  typeid(vector<mySV>), DefineBehavior(ptr, ptr),
                  0, &vectorlEmySVgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<mySV>) );
      instance.SetNew(&new_vectorlEmySVgR);
      instance.SetNewArray(&newArray_vectorlEmySVgR);
      instance.SetDelete(&delete_vectorlEmySVgR);
      instance.SetDeleteArray(&deleteArray_vectorlEmySVgR);
      instance.SetDestructor(&destruct_vectorlEmySVgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<mySV> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<mySV>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEmySVgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<mySV>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEmySVgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<mySV> : new vector<mySV>;
   }
   static void *newArray_vectorlEmySVgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<mySV>[nElements] : new vector<mySV>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEmySVgR(void *p) {
      delete ((vector<mySV>*)p);
   }
   static void deleteArray_vectorlEmySVgR(void *p) {
      delete [] ((vector<mySV>*)p);
   }
   static void destruct_vectorlEmySVgR(void *p) {
      typedef vector<mySV> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<mySV>

namespace ROOT {
   void vectorlEmyTaugR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEmyTaugR_Dictionary();
   static void *new_vectorlEmyTaugR(void *p = 0);
   static void *newArray_vectorlEmyTaugR(Long_t size, void *p);
   static void delete_vectorlEmyTaugR(void *p);
   static void deleteArray_vectorlEmyTaugR(void *p);
   static void destruct_vectorlEmyTaugR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<myTau>*)
   {
      vector<myTau> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<myTau>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<myTau>", -2, "prec_stl/vector", 49,
                  typeid(vector<myTau>), DefineBehavior(ptr, ptr),
                  0, &vectorlEmyTaugR_Dictionary, isa_proxy, 0,
                  sizeof(vector<myTau>) );
      instance.SetNew(&new_vectorlEmyTaugR);
      instance.SetNewArray(&newArray_vectorlEmyTaugR);
      instance.SetDelete(&delete_vectorlEmyTaugR);
      instance.SetDeleteArray(&deleteArray_vectorlEmyTaugR);
      instance.SetDestructor(&destruct_vectorlEmyTaugR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<myTau> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<myTau>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEmyTaugR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<myTau>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEmyTaugR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<myTau> : new vector<myTau>;
   }
   static void *newArray_vectorlEmyTaugR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<myTau>[nElements] : new vector<myTau>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEmyTaugR(void *p) {
      delete ((vector<myTau>*)p);
   }
   static void deleteArray_vectorlEmyTaugR(void *p) {
      delete [] ((vector<myTau>*)p);
   }
   static void destruct_vectorlEmyTaugR(void *p) {
      typedef vector<myTau> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<myTau>

namespace ROOT {
   void vectorlEmyTriggerObjectgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEmyTriggerObjectgR_Dictionary();
   static void *new_vectorlEmyTriggerObjectgR(void *p = 0);
   static void *newArray_vectorlEmyTriggerObjectgR(Long_t size, void *p);
   static void delete_vectorlEmyTriggerObjectgR(void *p);
   static void deleteArray_vectorlEmyTriggerObjectgR(void *p);
   static void destruct_vectorlEmyTriggerObjectgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<myTriggerObject>*)
   {
      vector<myTriggerObject> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<myTriggerObject>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<myTriggerObject>", -2, "prec_stl/vector", 49,
                  typeid(vector<myTriggerObject>), DefineBehavior(ptr, ptr),
                  0, &vectorlEmyTriggerObjectgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<myTriggerObject>) );
      instance.SetNew(&new_vectorlEmyTriggerObjectgR);
      instance.SetNewArray(&newArray_vectorlEmyTriggerObjectgR);
      instance.SetDelete(&delete_vectorlEmyTriggerObjectgR);
      instance.SetDeleteArray(&deleteArray_vectorlEmyTriggerObjectgR);
      instance.SetDestructor(&destruct_vectorlEmyTriggerObjectgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<myTriggerObject> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<myTriggerObject>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEmyTriggerObjectgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<myTriggerObject>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEmyTriggerObjectgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<myTriggerObject> : new vector<myTriggerObject>;
   }
   static void *newArray_vectorlEmyTriggerObjectgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<myTriggerObject>[nElements] : new vector<myTriggerObject>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEmyTriggerObjectgR(void *p) {
      delete ((vector<myTriggerObject>*)p);
   }
   static void deleteArray_vectorlEmyTriggerObjectgR(void *p) {
      delete [] ((vector<myTriggerObject>*)p);
   }
   static void destruct_vectorlEmyTriggerObjectgR(void *p) {
      typedef vector<myTriggerObject> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<myTriggerObject>

namespace ROOT {
   void vectorlEmyVertexgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEmyVertexgR_Dictionary();
   static void *new_vectorlEmyVertexgR(void *p = 0);
   static void *newArray_vectorlEmyVertexgR(Long_t size, void *p);
   static void delete_vectorlEmyVertexgR(void *p);
   static void deleteArray_vectorlEmyVertexgR(void *p);
   static void destruct_vectorlEmyVertexgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<myVertex>*)
   {
      vector<myVertex> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<myVertex>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<myVertex>", -2, "prec_stl/vector", 49,
                  typeid(vector<myVertex>), DefineBehavior(ptr, ptr),
                  0, &vectorlEmyVertexgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<myVertex>) );
      instance.SetNew(&new_vectorlEmyVertexgR);
      instance.SetNewArray(&newArray_vectorlEmyVertexgR);
      instance.SetDelete(&delete_vectorlEmyVertexgR);
      instance.SetDeleteArray(&deleteArray_vectorlEmyVertexgR);
      instance.SetDestructor(&destruct_vectorlEmyVertexgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<myVertex> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<myVertex>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEmyVertexgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<myVertex>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEmyVertexgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<myVertex> : new vector<myVertex>;
   }
   static void *newArray_vectorlEmyVertexgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<myVertex>[nElements] : new vector<myVertex>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEmyVertexgR(void *p) {
      delete ((vector<myVertex>*)p);
   }
   static void deleteArray_vectorlEmyVertexgR(void *p) {
      delete [] ((vector<myVertex>*)p);
   }
   static void destruct_vectorlEmyVertexgR(void *p) {
      typedef vector<myVertex> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<myVertex>

/********************************************************
* eventdict.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableeventdict();

extern "C" void G__set_cpp_environmenteventdict() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("myevent.h");
  G__cpp_reset_tagtableeventdict();
}
#include <new>
extern "C" int G__cpp_dllreveventdict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* myVertex */
static int G__eventdict_450_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   myVertex* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new myVertex[n];
     } else {
       p = new((void*) gvp) myVertex[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new myVertex;
     } else {
       p = new((void*) gvp) myVertex;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_myVertex));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_450_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) myVertex::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_450_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) myVertex::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_450_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) myVertex::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_450_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      myVertex::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_450_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((myVertex*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_450_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) myVertex::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_450_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) myVertex::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_450_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) myVertex::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_450_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) myVertex::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_450_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   myVertex* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new myVertex(*(myVertex*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_myVertex));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef myVertex G__TmyVertex;
static int G__eventdict_450_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (myVertex*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((myVertex*) (soff+(sizeof(myVertex)*i)))->~G__TmyVertex();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (myVertex*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((myVertex*) (soff))->~G__TmyVertex();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_450_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   myVertex* dest = (myVertex*) G__getstructoffset();
   *dest = *(myVertex*) libp->para[0].ref;
   const myVertex& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* myTriggerObject */
static int G__eventdict_451_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   myTriggerObject* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new myTriggerObject[n];
     } else {
       p = new((void*) gvp) myTriggerObject[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new myTriggerObject;
     } else {
       p = new((void*) gvp) myTriggerObject;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_myTriggerObject));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_451_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) myTriggerObject::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_451_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) myTriggerObject::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_451_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) myTriggerObject::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_451_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      myTriggerObject::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_451_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((myTriggerObject*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_451_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) myTriggerObject::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_451_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) myTriggerObject::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_451_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) myTriggerObject::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_451_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) myTriggerObject::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_451_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   myTriggerObject* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new myTriggerObject(*(myTriggerObject*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_myTriggerObject));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef myTriggerObject G__TmyTriggerObject;
static int G__eventdict_451_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (myTriggerObject*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((myTriggerObject*) (soff+(sizeof(myTriggerObject)*i)))->~G__TmyTriggerObject();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (myTriggerObject*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((myTriggerObject*) (soff))->~G__TmyTriggerObject();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_451_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   myTriggerObject* dest = (myTriggerObject*) G__getstructoffset();
   *dest = *(myTriggerObject*) libp->para[0].ref;
   const myTriggerObject& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* myGenObject */
static int G__eventdict_452_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   myGenObject* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new myGenObject[n];
     } else {
       p = new((void*) gvp) myGenObject[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new myGenObject;
     } else {
       p = new((void*) gvp) myGenObject;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_myGenObject));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_452_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) myGenObject::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_452_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) myGenObject::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_452_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) myGenObject::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_452_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      myGenObject::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_452_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((myGenObject*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_452_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) myGenObject::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_452_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) myGenObject::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_452_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) myGenObject::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_452_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) myGenObject::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_452_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   myGenObject* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new myGenObject(*(myGenObject*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_myGenObject));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef myGenObject G__TmyGenObject;
static int G__eventdict_452_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (myGenObject*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((myGenObject*) (soff+(sizeof(myGenObject)*i)))->~G__TmyGenObject();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (myGenObject*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((myGenObject*) (soff))->~G__TmyGenObject();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_452_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   myGenObject* dest = (myGenObject*) G__getstructoffset();
   *dest = *(myGenObject*) libp->para[0].ref;
   const myGenObject& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* myMuon */
static int G__eventdict_453_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   myMuon* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new myMuon[n];
     } else {
       p = new((void*) gvp) myMuon[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new myMuon;
     } else {
       p = new((void*) gvp) myMuon;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_myMuon));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_453_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) myMuon::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_453_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) myMuon::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_453_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) myMuon::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_453_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      myMuon::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_453_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((myMuon*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_453_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) myMuon::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_453_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) myMuon::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_453_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) myMuon::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_453_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) myMuon::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_453_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   myMuon* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new myMuon(*(myMuon*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_myMuon));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef myMuon G__TmyMuon;
static int G__eventdict_453_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (myMuon*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((myMuon*) (soff+(sizeof(myMuon)*i)))->~G__TmyMuon();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (myMuon*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((myMuon*) (soff))->~G__TmyMuon();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_453_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   myMuon* dest = (myMuon*) G__getstructoffset();
   *dest = *(myMuon*) libp->para[0].ref;
   const myMuon& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* myElectron */
static int G__eventdict_454_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   myElectron* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new myElectron[n];
     } else {
       p = new((void*) gvp) myElectron[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new myElectron;
     } else {
       p = new((void*) gvp) myElectron;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_myElectron));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_454_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) myElectron::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_454_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) myElectron::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_454_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) myElectron::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_454_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      myElectron::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_454_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((myElectron*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_454_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) myElectron::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_454_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) myElectron::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_454_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) myElectron::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_454_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) myElectron::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_454_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   myElectron* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new myElectron(*(myElectron*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_myElectron));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef myElectron G__TmyElectron;
static int G__eventdict_454_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (myElectron*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((myElectron*) (soff+(sizeof(myElectron)*i)))->~G__TmyElectron();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (myElectron*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((myElectron*) (soff))->~G__TmyElectron();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_454_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   myElectron* dest = (myElectron*) G__getstructoffset();
   *dest = *(myElectron*) libp->para[0].ref;
   const myElectron& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* myTau */
static int G__eventdict_455_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   myTau* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new myTau[n];
     } else {
       p = new((void*) gvp) myTau[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new myTau;
     } else {
       p = new((void*) gvp) myTau;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_myTau));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_455_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) myTau::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_455_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) myTau::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_455_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) myTau::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_455_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      myTau::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_455_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((myTau*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_455_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) myTau::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_455_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) myTau::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_455_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) myTau::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_455_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) myTau::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_455_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   myTau* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new myTau(*(myTau*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_myTau));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef myTau G__TmyTau;
static int G__eventdict_455_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (myTau*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((myTau*) (soff+(sizeof(myTau)*i)))->~G__TmyTau();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (myTau*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((myTau*) (soff))->~G__TmyTau();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_455_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   myTau* dest = (myTau*) G__getstructoffset();
   *dest = *(myTau*) libp->para[0].ref;
   const myTau& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* myJet */
static int G__eventdict_456_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   myJet* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new myJet[n];
     } else {
       p = new((void*) gvp) myJet[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new myJet;
     } else {
       p = new((void*) gvp) myJet;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_myJet));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_456_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) myJet::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_456_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) myJet::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_456_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) myJet::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_456_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      myJet::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_456_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((myJet*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_456_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) myJet::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_456_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) myJet::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_456_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) myJet::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_456_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) myJet::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_456_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   myJet* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new myJet(*(myJet*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_myJet));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef myJet G__TmyJet;
static int G__eventdict_456_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (myJet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((myJet*) (soff+(sizeof(myJet)*i)))->~G__TmyJet();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (myJet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((myJet*) (soff))->~G__TmyJet();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_456_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   myJet* dest = (myJet*) G__getstructoffset();
   *dest = *(myJet*) libp->para[0].ref;
   const myJet& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* myMET */
static int G__eventdict_457_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   myMET* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new myMET[n];
     } else {
       p = new((void*) gvp) myMET[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new myMET;
     } else {
       p = new((void*) gvp) myMET;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_myMET));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_457_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) myMET::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_457_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) myMET::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_457_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) myMET::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_457_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      myMET::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_457_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((myMET*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_457_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) myMET::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_457_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) myMET::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_457_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) myMET::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_457_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) myMET::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_457_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   myMET* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new myMET(*(myMET*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_myMET));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef myMET G__TmyMET;
static int G__eventdict_457_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (myMET*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((myMET*) (soff+(sizeof(myMET)*i)))->~G__TmyMET();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (myMET*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((myMET*) (soff))->~G__TmyMET();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_457_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   myMET* dest = (myMET*) G__getstructoffset();
   *dest = *(myMET*) libp->para[0].ref;
   const myMET& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* mySV */
static int G__eventdict_458_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   mySV* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new mySV[n];
     } else {
       p = new((void*) gvp) mySV[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new mySV;
     } else {
       p = new((void*) gvp) mySV;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_mySV));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_458_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) mySV::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_458_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) mySV::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_458_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) mySV::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_458_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      mySV::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_458_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((mySV*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_458_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) mySV::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_458_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) mySV::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_458_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) mySV::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_458_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) mySV::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_458_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   mySV* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new mySV(*(mySV*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_mySV));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef mySV G__TmySV;
static int G__eventdict_458_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (mySV*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((mySV*) (soff+(sizeof(mySV)*i)))->~G__TmySV();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (mySV*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((mySV*) (soff))->~G__TmySV();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_458_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   mySV* dest = (mySV*) G__getstructoffset();
   *dest = *(mySV*) libp->para[0].ref;
   const mySV& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* myevent */
static int G__eventdict_459_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   myevent* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new myevent[n];
     } else {
       p = new((void*) gvp) myevent[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new myevent;
     } else {
       p = new((void*) gvp) myevent;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_myevent));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_459_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) myevent::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_459_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) myevent::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_459_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) myevent::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_459_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      myevent::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_459_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((myevent*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_459_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) myevent::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_459_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) myevent::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_459_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) myevent::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_459_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) myevent::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_459_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   myevent* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new myevent(*(myevent*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_myevent));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef myevent G__Tmyevent;
static int G__eventdict_459_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (myevent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((myevent*) (soff+(sizeof(myevent)*i)))->~G__Tmyevent();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (myevent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((myevent*) (soff))->~G__Tmyevent();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_459_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   myevent* dest = (myevent*) G__getstructoffset();
   *dest = *(myevent*) libp->para[0].ref;
   const myevent& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<myGenObject,allocator<myGenObject> > */
static int G__eventdict_461_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myGenObject,allocator<myGenObject> >::reference obj = ((vector<myGenObject,allocator<myGenObject> >*) G__getstructoffset())->at((vector<myGenObject,allocator<myGenObject> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_461_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<myGenObject,allocator<myGenObject> >::const_reference obj = ((const vector<myGenObject,allocator<myGenObject> >*) G__getstructoffset())->at((vector<myGenObject,allocator<myGenObject> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_461_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<myGenObject,allocator<myGenObject> >::iterator* pobj;
         vector<myGenObject,allocator<myGenObject> >::iterator xobj = ((vector<myGenObject,allocator<myGenObject> >*) G__getstructoffset())->begin();
         pobj = new vector<myGenObject,allocator<myGenObject> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_461_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<myGenObject,allocator<myGenObject> >::iterator* pobj;
         vector<myGenObject,allocator<myGenObject> >::iterator xobj = ((vector<myGenObject,allocator<myGenObject> >*) G__getstructoffset())->end();
         pobj = new vector<myGenObject,allocator<myGenObject> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_461_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<myGenObject,allocator<myGenObject> >::reverse_iterator* pobj;
         vector<myGenObject,allocator<myGenObject> >::reverse_iterator xobj = ((vector<myGenObject,allocator<myGenObject> >*) G__getstructoffset())->rbegin();
         pobj = new vector<myGenObject,allocator<myGenObject> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_461_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<myGenObject,allocator<myGenObject> >::reverse_iterator* pobj;
         vector<myGenObject,allocator<myGenObject> >::reverse_iterator xobj = ((vector<myGenObject,allocator<myGenObject> >*) G__getstructoffset())->rend();
         pobj = new vector<myGenObject,allocator<myGenObject> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_461_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<myGenObject,allocator<myGenObject> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_461_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<myGenObject,allocator<myGenObject> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_461_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<myGenObject,allocator<myGenObject> >*) G__getstructoffset())->resize((vector<myGenObject,allocator<myGenObject> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_461_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<myGenObject,allocator<myGenObject> >*) G__getstructoffset())->resize((vector<myGenObject,allocator<myGenObject> >::size_type) G__int(libp->para[0]), *((myGenObject*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_461_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<myGenObject,allocator<myGenObject> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_461_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<myGenObject,allocator<myGenObject> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_461_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myGenObject,allocator<myGenObject> >::reference obj = ((vector<myGenObject,allocator<myGenObject> >*) G__getstructoffset())->operator[]((vector<myGenObject,allocator<myGenObject> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_461_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<myGenObject,allocator<myGenObject> >::const_reference obj = ((const vector<myGenObject,allocator<myGenObject> >*) G__getstructoffset())->operator[]((vector<myGenObject,allocator<myGenObject> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_461_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<myGenObject,allocator<myGenObject> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<myGenObject,allocator<myGenObject> >[n];
     } else {
       p = new((void*) gvp) vector<myGenObject,allocator<myGenObject> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<myGenObject,allocator<myGenObject> >;
     } else {
       p = new((void*) gvp) vector<myGenObject,allocator<myGenObject> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_461_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<myGenObject,allocator<myGenObject> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<myGenObject,allocator<myGenObject> >((vector<myGenObject,allocator<myGenObject> >::size_type) G__int(libp->para[0]), *(myGenObject*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<myGenObject,allocator<myGenObject> >((vector<myGenObject,allocator<myGenObject> >::size_type) G__int(libp->para[0]), *(myGenObject*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<myGenObject,allocator<myGenObject> >((vector<myGenObject,allocator<myGenObject> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<myGenObject,allocator<myGenObject> >((vector<myGenObject,allocator<myGenObject> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_461_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<myGenObject,allocator<myGenObject> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<myGenObject,allocator<myGenObject> >(*(vector<myGenObject,allocator<myGenObject> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<myGenObject,allocator<myGenObject> >(*(vector<myGenObject,allocator<myGenObject> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_461_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<myGenObject,allocator<myGenObject> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<myGenObject,allocator<myGenObject> >(*((vector<myGenObject,allocator<myGenObject> >::const_iterator*) G__int(libp->para[0])), *((vector<myGenObject,allocator<myGenObject> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<myGenObject,allocator<myGenObject> >(*((vector<myGenObject,allocator<myGenObject> >::const_iterator*) G__int(libp->para[0])), *((vector<myGenObject,allocator<myGenObject> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_461_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myGenObject,allocator<myGenObject> >& obj = ((vector<myGenObject,allocator<myGenObject> >*) G__getstructoffset())->operator=(*(vector<myGenObject,allocator<myGenObject> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_461_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<myGenObject,allocator<myGenObject> >*) G__getstructoffset())->reserve((vector<myGenObject,allocator<myGenObject> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_461_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const myGenObject& obj = ((vector<myGenObject,allocator<myGenObject> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_461_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const myGenObject& obj = ((vector<myGenObject,allocator<myGenObject> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_461_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<myGenObject,allocator<myGenObject> >*) G__getstructoffset())->push_back(*(myGenObject*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_461_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<myGenObject,allocator<myGenObject> >*) G__getstructoffset())->swap(*(vector<myGenObject,allocator<myGenObject> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_461_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<myGenObject,allocator<myGenObject> >::iterator* pobj;
         vector<myGenObject,allocator<myGenObject> >::iterator xobj = ((vector<myGenObject,allocator<myGenObject> >*) G__getstructoffset())->insert(*((vector<myGenObject,allocator<myGenObject> >::iterator*) G__int(libp->para[0])), *(myGenObject*) libp->para[1].ref);
         pobj = new vector<myGenObject,allocator<myGenObject> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_461_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<myGenObject,allocator<myGenObject> >*) G__getstructoffset())->insert(*((vector<myGenObject,allocator<myGenObject> >::iterator*) G__int(libp->para[0])), *((vector<myGenObject,allocator<myGenObject> >::const_iterator*) G__int(libp->para[1]))
, *((vector<myGenObject,allocator<myGenObject> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_461_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<myGenObject,allocator<myGenObject> >*) G__getstructoffset())->insert(*((vector<myGenObject,allocator<myGenObject> >::iterator*) G__int(libp->para[0])), (vector<myGenObject,allocator<myGenObject> >::size_type) G__int(libp->para[1])
, *(myGenObject*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_461_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<myGenObject,allocator<myGenObject> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_461_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<myGenObject,allocator<myGenObject> >*) G__getstructoffset())->erase(*((vector<myGenObject,allocator<myGenObject> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_461_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<myGenObject,allocator<myGenObject> >*) G__getstructoffset())->erase(*((vector<myGenObject,allocator<myGenObject> >::iterator*) G__int(libp->para[0])), *((vector<myGenObject,allocator<myGenObject> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_461_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<myGenObject,allocator<myGenObject> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<myGenObject,allocator<myGenObject> > G__TvectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgR;
static int G__eventdict_461_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<myGenObject,allocator<myGenObject> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<myGenObject,allocator<myGenObject> >*) (soff+(sizeof(vector<myGenObject,allocator<myGenObject> >)*i)))->~G__TvectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<myGenObject,allocator<myGenObject> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<myGenObject,allocator<myGenObject> >*) (soff))->~G__TvectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<myGenObject,allocator<myGenObject> >::iterator */
static int G__eventdict_462_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<myGenObject,allocator<myGenObject> >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<myGenObject,allocator<myGenObject> >::iterator[n];
     } else {
       p = new((void*) gvp) vector<myGenObject,allocator<myGenObject> >::iterator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<myGenObject,allocator<myGenObject> >::iterator;
     } else {
       p = new((void*) gvp) vector<myGenObject,allocator<myGenObject> >::iterator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_462_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<myGenObject,allocator<myGenObject> >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<myGenObject,allocator<myGenObject> >::iterator(libp->para[0].ref ? *(const vector<myGenObject,allocator<myGenObject> >::iterator::pointer*) libp->para[0].ref : *(const vector<myGenObject,allocator<myGenObject> >::iterator::pointer*) (void*) (&G__Mlong(libp->para[0])));
   } else {
     p = new((void*) gvp) vector<myGenObject,allocator<myGenObject> >::iterator(libp->para[0].ref ? *(const vector<myGenObject,allocator<myGenObject> >::iterator::pointer*) libp->para[0].ref : *(const vector<myGenObject,allocator<myGenObject> >::iterator::pointer*) (void*) (&G__Mlong(libp->para[0])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_462_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myGenObject,allocator<myGenObject> >::iterator::reference obj = ((const vector<myGenObject,allocator<myGenObject> >::iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_462_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const vector<myGenObject,allocator<myGenObject> >::iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_462_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myGenObject,allocator<myGenObject> >::iterator& obj = ((vector<myGenObject,allocator<myGenObject> >::iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_462_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<myGenObject,allocator<myGenObject> >::iterator* pobj;
         vector<myGenObject,allocator<myGenObject> >::iterator xobj = ((vector<myGenObject,allocator<myGenObject> >::iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new vector<myGenObject,allocator<myGenObject> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_462_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myGenObject,allocator<myGenObject> >::iterator& obj = ((vector<myGenObject,allocator<myGenObject> >::iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_462_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<myGenObject,allocator<myGenObject> >::iterator* pobj;
         vector<myGenObject,allocator<myGenObject> >::iterator xobj = ((vector<myGenObject,allocator<myGenObject> >::iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new vector<myGenObject,allocator<myGenObject> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_462_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myGenObject,allocator<myGenObject> >::iterator::reference obj = ((const vector<myGenObject,allocator<myGenObject> >::iterator*) G__getstructoffset())->operator[](*(vector<myGenObject,allocator<myGenObject> >::iterator::difference_type*) G__Longref(&libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_462_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myGenObject,allocator<myGenObject> >::iterator& obj = ((vector<myGenObject,allocator<myGenObject> >::iterator*) G__getstructoffset())->operator+=(*(vector<myGenObject,allocator<myGenObject> >::iterator::difference_type*) G__Longref(&libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_462_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myGenObject,allocator<myGenObject> >::iterator* pobj;
         const vector<myGenObject,allocator<myGenObject> >::iterator xobj = ((const vector<myGenObject,allocator<myGenObject> >::iterator*) G__getstructoffset())->operator+(*(vector<myGenObject,allocator<myGenObject> >::iterator::difference_type*) G__Longref(&libp->para[0]));
         pobj = new vector<myGenObject,allocator<myGenObject> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_462_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myGenObject,allocator<myGenObject> >::iterator& obj = ((vector<myGenObject,allocator<myGenObject> >::iterator*) G__getstructoffset())->operator-=(*(vector<myGenObject,allocator<myGenObject> >::iterator::difference_type*) G__Longref(&libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_462_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myGenObject,allocator<myGenObject> >::iterator* pobj;
         const vector<myGenObject,allocator<myGenObject> >::iterator xobj = ((const vector<myGenObject,allocator<myGenObject> >::iterator*) G__getstructoffset())->operator-(*(vector<myGenObject,allocator<myGenObject> >::iterator::difference_type*) G__Longref(&libp->para[0]));
         pobj = new vector<myGenObject,allocator<myGenObject> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_462_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myGenObject,allocator<myGenObject> >::iterator::pointer& obj = ((const vector<myGenObject,allocator<myGenObject> >::iterator*) G__getstructoffset())->base();
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_462_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<myGenObject,allocator<myGenObject> >::iterator* pobj;
         vector<myGenObject,allocator<myGenObject> >::iterator xobj = ((vector<myGenObject,allocator<myGenObject> >::iterator*) G__getstructoffset())->operator=(*(vector<myGenObject,allocator<myGenObject> >::iterator*) libp->para[0].ref);
         pobj = new vector<myGenObject,allocator<myGenObject> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_462_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   vector<myGenObject,allocator<myGenObject> >::iterator* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new vector<myGenObject,allocator<myGenObject> >::iterator(*(vector<myGenObject,allocator<myGenObject> >::iterator*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<myGenObject,allocator<myGenObject> >::iterator G__TvectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgRcLcLiterator;
static int G__eventdict_462_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<myGenObject,allocator<myGenObject> >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<myGenObject,allocator<myGenObject> >::iterator*) (soff+(sizeof(vector<myGenObject,allocator<myGenObject> >::iterator)*i)))->~G__TvectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgRcLcLiterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<myGenObject,allocator<myGenObject> >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<myGenObject,allocator<myGenObject> >::iterator*) (soff))->~G__TvectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgRcLcLiterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<myTriggerObject,allocator<myTriggerObject> > */
static int G__eventdict_465_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myTriggerObject,allocator<myTriggerObject> >::reference obj = ((vector<myTriggerObject,allocator<myTriggerObject> >*) G__getstructoffset())->at((vector<myTriggerObject,allocator<myTriggerObject> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_465_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<myTriggerObject,allocator<myTriggerObject> >::const_reference obj = ((const vector<myTriggerObject,allocator<myTriggerObject> >*) G__getstructoffset())->at((vector<myTriggerObject,allocator<myTriggerObject> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_465_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<myTriggerObject,allocator<myTriggerObject> >::iterator* pobj;
         vector<myTriggerObject,allocator<myTriggerObject> >::iterator xobj = ((vector<myTriggerObject,allocator<myTriggerObject> >*) G__getstructoffset())->begin();
         pobj = new vector<myTriggerObject,allocator<myTriggerObject> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_465_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<myTriggerObject,allocator<myTriggerObject> >::iterator* pobj;
         vector<myTriggerObject,allocator<myTriggerObject> >::iterator xobj = ((vector<myTriggerObject,allocator<myTriggerObject> >*) G__getstructoffset())->end();
         pobj = new vector<myTriggerObject,allocator<myTriggerObject> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_465_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<myTriggerObject,allocator<myTriggerObject> >::reverse_iterator* pobj;
         vector<myTriggerObject,allocator<myTriggerObject> >::reverse_iterator xobj = ((vector<myTriggerObject,allocator<myTriggerObject> >*) G__getstructoffset())->rbegin();
         pobj = new vector<myTriggerObject,allocator<myTriggerObject> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_465_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<myTriggerObject,allocator<myTriggerObject> >::reverse_iterator* pobj;
         vector<myTriggerObject,allocator<myTriggerObject> >::reverse_iterator xobj = ((vector<myTriggerObject,allocator<myTriggerObject> >*) G__getstructoffset())->rend();
         pobj = new vector<myTriggerObject,allocator<myTriggerObject> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_465_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<myTriggerObject,allocator<myTriggerObject> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_465_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<myTriggerObject,allocator<myTriggerObject> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_465_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<myTriggerObject,allocator<myTriggerObject> >*) G__getstructoffset())->resize((vector<myTriggerObject,allocator<myTriggerObject> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_465_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<myTriggerObject,allocator<myTriggerObject> >*) G__getstructoffset())->resize((vector<myTriggerObject,allocator<myTriggerObject> >::size_type) G__int(libp->para[0]), *((myTriggerObject*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_465_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<myTriggerObject,allocator<myTriggerObject> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_465_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<myTriggerObject,allocator<myTriggerObject> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_465_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myTriggerObject,allocator<myTriggerObject> >::reference obj = ((vector<myTriggerObject,allocator<myTriggerObject> >*) G__getstructoffset())->operator[]((vector<myTriggerObject,allocator<myTriggerObject> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_465_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<myTriggerObject,allocator<myTriggerObject> >::const_reference obj = ((const vector<myTriggerObject,allocator<myTriggerObject> >*) G__getstructoffset())->operator[]((vector<myTriggerObject,allocator<myTriggerObject> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_465_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<myTriggerObject,allocator<myTriggerObject> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<myTriggerObject,allocator<myTriggerObject> >[n];
     } else {
       p = new((void*) gvp) vector<myTriggerObject,allocator<myTriggerObject> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<myTriggerObject,allocator<myTriggerObject> >;
     } else {
       p = new((void*) gvp) vector<myTriggerObject,allocator<myTriggerObject> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_465_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<myTriggerObject,allocator<myTriggerObject> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<myTriggerObject,allocator<myTriggerObject> >((vector<myTriggerObject,allocator<myTriggerObject> >::size_type) G__int(libp->para[0]), *(myTriggerObject*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<myTriggerObject,allocator<myTriggerObject> >((vector<myTriggerObject,allocator<myTriggerObject> >::size_type) G__int(libp->para[0]), *(myTriggerObject*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<myTriggerObject,allocator<myTriggerObject> >((vector<myTriggerObject,allocator<myTriggerObject> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<myTriggerObject,allocator<myTriggerObject> >((vector<myTriggerObject,allocator<myTriggerObject> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_465_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<myTriggerObject,allocator<myTriggerObject> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<myTriggerObject,allocator<myTriggerObject> >(*(vector<myTriggerObject,allocator<myTriggerObject> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<myTriggerObject,allocator<myTriggerObject> >(*(vector<myTriggerObject,allocator<myTriggerObject> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_465_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<myTriggerObject,allocator<myTriggerObject> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<myTriggerObject,allocator<myTriggerObject> >(*((vector<myTriggerObject,allocator<myTriggerObject> >::const_iterator*) G__int(libp->para[0])), *((vector<myTriggerObject,allocator<myTriggerObject> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<myTriggerObject,allocator<myTriggerObject> >(*((vector<myTriggerObject,allocator<myTriggerObject> >::const_iterator*) G__int(libp->para[0])), *((vector<myTriggerObject,allocator<myTriggerObject> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_465_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myTriggerObject,allocator<myTriggerObject> >& obj = ((vector<myTriggerObject,allocator<myTriggerObject> >*) G__getstructoffset())->operator=(*(vector<myTriggerObject,allocator<myTriggerObject> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_465_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<myTriggerObject,allocator<myTriggerObject> >*) G__getstructoffset())->reserve((vector<myTriggerObject,allocator<myTriggerObject> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_465_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const myTriggerObject& obj = ((vector<myTriggerObject,allocator<myTriggerObject> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_465_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const myTriggerObject& obj = ((vector<myTriggerObject,allocator<myTriggerObject> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_465_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<myTriggerObject,allocator<myTriggerObject> >*) G__getstructoffset())->push_back(*(myTriggerObject*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_465_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<myTriggerObject,allocator<myTriggerObject> >*) G__getstructoffset())->swap(*(vector<myTriggerObject,allocator<myTriggerObject> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_465_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<myTriggerObject,allocator<myTriggerObject> >::iterator* pobj;
         vector<myTriggerObject,allocator<myTriggerObject> >::iterator xobj = ((vector<myTriggerObject,allocator<myTriggerObject> >*) G__getstructoffset())->insert(*((vector<myTriggerObject,allocator<myTriggerObject> >::iterator*) G__int(libp->para[0])), *(myTriggerObject*) libp->para[1].ref);
         pobj = new vector<myTriggerObject,allocator<myTriggerObject> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_465_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<myTriggerObject,allocator<myTriggerObject> >*) G__getstructoffset())->insert(*((vector<myTriggerObject,allocator<myTriggerObject> >::iterator*) G__int(libp->para[0])), *((vector<myTriggerObject,allocator<myTriggerObject> >::const_iterator*) G__int(libp->para[1]))
, *((vector<myTriggerObject,allocator<myTriggerObject> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_465_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<myTriggerObject,allocator<myTriggerObject> >*) G__getstructoffset())->insert(*((vector<myTriggerObject,allocator<myTriggerObject> >::iterator*) G__int(libp->para[0])), (vector<myTriggerObject,allocator<myTriggerObject> >::size_type) G__int(libp->para[1])
, *(myTriggerObject*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_465_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<myTriggerObject,allocator<myTriggerObject> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_465_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<myTriggerObject,allocator<myTriggerObject> >*) G__getstructoffset())->erase(*((vector<myTriggerObject,allocator<myTriggerObject> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_465_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<myTriggerObject,allocator<myTriggerObject> >*) G__getstructoffset())->erase(*((vector<myTriggerObject,allocator<myTriggerObject> >::iterator*) G__int(libp->para[0])), *((vector<myTriggerObject,allocator<myTriggerObject> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_465_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<myTriggerObject,allocator<myTriggerObject> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<myTriggerObject,allocator<myTriggerObject> > G__TvectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgR;
static int G__eventdict_465_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<myTriggerObject,allocator<myTriggerObject> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<myTriggerObject,allocator<myTriggerObject> >*) (soff+(sizeof(vector<myTriggerObject,allocator<myTriggerObject> >)*i)))->~G__TvectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<myTriggerObject,allocator<myTriggerObject> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<myTriggerObject,allocator<myTriggerObject> >*) (soff))->~G__TvectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<myTriggerObject,allocator<myTriggerObject> >::iterator */
static int G__eventdict_466_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<myTriggerObject,allocator<myTriggerObject> >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<myTriggerObject,allocator<myTriggerObject> >::iterator[n];
     } else {
       p = new((void*) gvp) vector<myTriggerObject,allocator<myTriggerObject> >::iterator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<myTriggerObject,allocator<myTriggerObject> >::iterator;
     } else {
       p = new((void*) gvp) vector<myTriggerObject,allocator<myTriggerObject> >::iterator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_466_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<myTriggerObject,allocator<myTriggerObject> >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<myTriggerObject,allocator<myTriggerObject> >::iterator(libp->para[0].ref ? *(const vector<myTriggerObject,allocator<myTriggerObject> >::iterator::pointer*) libp->para[0].ref : *(const vector<myTriggerObject,allocator<myTriggerObject> >::iterator::pointer*) (void*) (&G__Mlong(libp->para[0])));
   } else {
     p = new((void*) gvp) vector<myTriggerObject,allocator<myTriggerObject> >::iterator(libp->para[0].ref ? *(const vector<myTriggerObject,allocator<myTriggerObject> >::iterator::pointer*) libp->para[0].ref : *(const vector<myTriggerObject,allocator<myTriggerObject> >::iterator::pointer*) (void*) (&G__Mlong(libp->para[0])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_466_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myTriggerObject,allocator<myTriggerObject> >::iterator::reference obj = ((const vector<myTriggerObject,allocator<myTriggerObject> >::iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_466_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const vector<myTriggerObject,allocator<myTriggerObject> >::iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_466_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myTriggerObject,allocator<myTriggerObject> >::iterator& obj = ((vector<myTriggerObject,allocator<myTriggerObject> >::iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_466_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<myTriggerObject,allocator<myTriggerObject> >::iterator* pobj;
         vector<myTriggerObject,allocator<myTriggerObject> >::iterator xobj = ((vector<myTriggerObject,allocator<myTriggerObject> >::iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new vector<myTriggerObject,allocator<myTriggerObject> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_466_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myTriggerObject,allocator<myTriggerObject> >::iterator& obj = ((vector<myTriggerObject,allocator<myTriggerObject> >::iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_466_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<myTriggerObject,allocator<myTriggerObject> >::iterator* pobj;
         vector<myTriggerObject,allocator<myTriggerObject> >::iterator xobj = ((vector<myTriggerObject,allocator<myTriggerObject> >::iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new vector<myTriggerObject,allocator<myTriggerObject> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_466_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myTriggerObject,allocator<myTriggerObject> >::iterator::reference obj = ((const vector<myTriggerObject,allocator<myTriggerObject> >::iterator*) G__getstructoffset())->operator[](*(vector<myTriggerObject,allocator<myTriggerObject> >::iterator::difference_type*) G__Longref(&libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_466_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myTriggerObject,allocator<myTriggerObject> >::iterator& obj = ((vector<myTriggerObject,allocator<myTriggerObject> >::iterator*) G__getstructoffset())->operator+=(*(vector<myTriggerObject,allocator<myTriggerObject> >::iterator::difference_type*) G__Longref(&libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_466_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myTriggerObject,allocator<myTriggerObject> >::iterator* pobj;
         const vector<myTriggerObject,allocator<myTriggerObject> >::iterator xobj = ((const vector<myTriggerObject,allocator<myTriggerObject> >::iterator*) G__getstructoffset())->operator+(*(vector<myTriggerObject,allocator<myTriggerObject> >::iterator::difference_type*) G__Longref(&libp->para[0]));
         pobj = new vector<myTriggerObject,allocator<myTriggerObject> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_466_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myTriggerObject,allocator<myTriggerObject> >::iterator& obj = ((vector<myTriggerObject,allocator<myTriggerObject> >::iterator*) G__getstructoffset())->operator-=(*(vector<myTriggerObject,allocator<myTriggerObject> >::iterator::difference_type*) G__Longref(&libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_466_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myTriggerObject,allocator<myTriggerObject> >::iterator* pobj;
         const vector<myTriggerObject,allocator<myTriggerObject> >::iterator xobj = ((const vector<myTriggerObject,allocator<myTriggerObject> >::iterator*) G__getstructoffset())->operator-(*(vector<myTriggerObject,allocator<myTriggerObject> >::iterator::difference_type*) G__Longref(&libp->para[0]));
         pobj = new vector<myTriggerObject,allocator<myTriggerObject> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_466_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myTriggerObject,allocator<myTriggerObject> >::iterator::pointer& obj = ((const vector<myTriggerObject,allocator<myTriggerObject> >::iterator*) G__getstructoffset())->base();
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_466_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<myTriggerObject,allocator<myTriggerObject> >::iterator* pobj;
         vector<myTriggerObject,allocator<myTriggerObject> >::iterator xobj = ((vector<myTriggerObject,allocator<myTriggerObject> >::iterator*) G__getstructoffset())->operator=(*(vector<myTriggerObject,allocator<myTriggerObject> >::iterator*) libp->para[0].ref);
         pobj = new vector<myTriggerObject,allocator<myTriggerObject> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_466_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   vector<myTriggerObject,allocator<myTriggerObject> >::iterator* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new vector<myTriggerObject,allocator<myTriggerObject> >::iterator(*(vector<myTriggerObject,allocator<myTriggerObject> >::iterator*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<myTriggerObject,allocator<myTriggerObject> >::iterator G__TvectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgRcLcLiterator;
static int G__eventdict_466_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<myTriggerObject,allocator<myTriggerObject> >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<myTriggerObject,allocator<myTriggerObject> >::iterator*) (soff+(sizeof(vector<myTriggerObject,allocator<myTriggerObject> >::iterator)*i)))->~G__TvectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgRcLcLiterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<myTriggerObject,allocator<myTriggerObject> >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<myTriggerObject,allocator<myTriggerObject> >::iterator*) (soff))->~G__TvectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgRcLcLiterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<myJet,allocator<myJet> > */
static int G__eventdict_469_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myJet,allocator<myJet> >::reference obj = ((vector<myJet,allocator<myJet> >*) G__getstructoffset())->at((vector<myJet,allocator<myJet> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_469_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<myJet,allocator<myJet> >::const_reference obj = ((const vector<myJet,allocator<myJet> >*) G__getstructoffset())->at((vector<myJet,allocator<myJet> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_469_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<myJet,allocator<myJet> >::iterator* pobj;
         vector<myJet,allocator<myJet> >::iterator xobj = ((vector<myJet,allocator<myJet> >*) G__getstructoffset())->begin();
         pobj = new vector<myJet,allocator<myJet> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_469_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<myJet,allocator<myJet> >::iterator* pobj;
         vector<myJet,allocator<myJet> >::iterator xobj = ((vector<myJet,allocator<myJet> >*) G__getstructoffset())->end();
         pobj = new vector<myJet,allocator<myJet> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_469_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<myJet,allocator<myJet> >::reverse_iterator* pobj;
         vector<myJet,allocator<myJet> >::reverse_iterator xobj = ((vector<myJet,allocator<myJet> >*) G__getstructoffset())->rbegin();
         pobj = new vector<myJet,allocator<myJet> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_469_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<myJet,allocator<myJet> >::reverse_iterator* pobj;
         vector<myJet,allocator<myJet> >::reverse_iterator xobj = ((vector<myJet,allocator<myJet> >*) G__getstructoffset())->rend();
         pobj = new vector<myJet,allocator<myJet> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_469_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<myJet,allocator<myJet> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_469_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<myJet,allocator<myJet> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_469_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<myJet,allocator<myJet> >*) G__getstructoffset())->resize((vector<myJet,allocator<myJet> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_469_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<myJet,allocator<myJet> >*) G__getstructoffset())->resize((vector<myJet,allocator<myJet> >::size_type) G__int(libp->para[0]), *((myJet*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_469_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<myJet,allocator<myJet> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_469_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<myJet,allocator<myJet> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_469_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myJet,allocator<myJet> >::reference obj = ((vector<myJet,allocator<myJet> >*) G__getstructoffset())->operator[]((vector<myJet,allocator<myJet> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_469_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<myJet,allocator<myJet> >::const_reference obj = ((const vector<myJet,allocator<myJet> >*) G__getstructoffset())->operator[]((vector<myJet,allocator<myJet> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_469_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<myJet,allocator<myJet> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<myJet,allocator<myJet> >[n];
     } else {
       p = new((void*) gvp) vector<myJet,allocator<myJet> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<myJet,allocator<myJet> >;
     } else {
       p = new((void*) gvp) vector<myJet,allocator<myJet> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyJetcOallocatorlEmyJetgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_469_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<myJet,allocator<myJet> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<myJet,allocator<myJet> >((vector<myJet,allocator<myJet> >::size_type) G__int(libp->para[0]), *(myJet*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<myJet,allocator<myJet> >((vector<myJet,allocator<myJet> >::size_type) G__int(libp->para[0]), *(myJet*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<myJet,allocator<myJet> >((vector<myJet,allocator<myJet> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<myJet,allocator<myJet> >((vector<myJet,allocator<myJet> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyJetcOallocatorlEmyJetgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_469_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<myJet,allocator<myJet> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<myJet,allocator<myJet> >(*(vector<myJet,allocator<myJet> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<myJet,allocator<myJet> >(*(vector<myJet,allocator<myJet> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyJetcOallocatorlEmyJetgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_469_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<myJet,allocator<myJet> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<myJet,allocator<myJet> >(*((vector<myJet,allocator<myJet> >::const_iterator*) G__int(libp->para[0])), *((vector<myJet,allocator<myJet> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<myJet,allocator<myJet> >(*((vector<myJet,allocator<myJet> >::const_iterator*) G__int(libp->para[0])), *((vector<myJet,allocator<myJet> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyJetcOallocatorlEmyJetgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_469_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myJet,allocator<myJet> >& obj = ((vector<myJet,allocator<myJet> >*) G__getstructoffset())->operator=(*(vector<myJet,allocator<myJet> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_469_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<myJet,allocator<myJet> >*) G__getstructoffset())->reserve((vector<myJet,allocator<myJet> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_469_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const myJet& obj = ((vector<myJet,allocator<myJet> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_469_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const myJet& obj = ((vector<myJet,allocator<myJet> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_469_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<myJet,allocator<myJet> >*) G__getstructoffset())->push_back(*(myJet*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_469_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<myJet,allocator<myJet> >*) G__getstructoffset())->swap(*(vector<myJet,allocator<myJet> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_469_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<myJet,allocator<myJet> >::iterator* pobj;
         vector<myJet,allocator<myJet> >::iterator xobj = ((vector<myJet,allocator<myJet> >*) G__getstructoffset())->insert(*((vector<myJet,allocator<myJet> >::iterator*) G__int(libp->para[0])), *(myJet*) libp->para[1].ref);
         pobj = new vector<myJet,allocator<myJet> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_469_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<myJet,allocator<myJet> >*) G__getstructoffset())->insert(*((vector<myJet,allocator<myJet> >::iterator*) G__int(libp->para[0])), *((vector<myJet,allocator<myJet> >::const_iterator*) G__int(libp->para[1]))
, *((vector<myJet,allocator<myJet> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_469_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<myJet,allocator<myJet> >*) G__getstructoffset())->insert(*((vector<myJet,allocator<myJet> >::iterator*) G__int(libp->para[0])), (vector<myJet,allocator<myJet> >::size_type) G__int(libp->para[1])
, *(myJet*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_469_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<myJet,allocator<myJet> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_469_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<myJet,allocator<myJet> >*) G__getstructoffset())->erase(*((vector<myJet,allocator<myJet> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_469_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<myJet,allocator<myJet> >*) G__getstructoffset())->erase(*((vector<myJet,allocator<myJet> >::iterator*) G__int(libp->para[0])), *((vector<myJet,allocator<myJet> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_469_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<myJet,allocator<myJet> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<myJet,allocator<myJet> > G__TvectorlEmyJetcOallocatorlEmyJetgRsPgR;
static int G__eventdict_469_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<myJet,allocator<myJet> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<myJet,allocator<myJet> >*) (soff+(sizeof(vector<myJet,allocator<myJet> >)*i)))->~G__TvectorlEmyJetcOallocatorlEmyJetgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<myJet,allocator<myJet> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<myJet,allocator<myJet> >*) (soff))->~G__TvectorlEmyJetcOallocatorlEmyJetgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<myJet,allocator<myJet> >::iterator */
static int G__eventdict_470_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<myJet,allocator<myJet> >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<myJet,allocator<myJet> >::iterator[n];
     } else {
       p = new((void*) gvp) vector<myJet,allocator<myJet> >::iterator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<myJet,allocator<myJet> >::iterator;
     } else {
       p = new((void*) gvp) vector<myJet,allocator<myJet> >::iterator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyJetcOallocatorlEmyJetgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_470_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<myJet,allocator<myJet> >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<myJet,allocator<myJet> >::iterator(libp->para[0].ref ? *(const vector<myJet,allocator<myJet> >::iterator::pointer*) libp->para[0].ref : *(const vector<myJet,allocator<myJet> >::iterator::pointer*) (void*) (&G__Mlong(libp->para[0])));
   } else {
     p = new((void*) gvp) vector<myJet,allocator<myJet> >::iterator(libp->para[0].ref ? *(const vector<myJet,allocator<myJet> >::iterator::pointer*) libp->para[0].ref : *(const vector<myJet,allocator<myJet> >::iterator::pointer*) (void*) (&G__Mlong(libp->para[0])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyJetcOallocatorlEmyJetgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_470_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myJet,allocator<myJet> >::iterator::reference obj = ((const vector<myJet,allocator<myJet> >::iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_470_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const vector<myJet,allocator<myJet> >::iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_470_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myJet,allocator<myJet> >::iterator& obj = ((vector<myJet,allocator<myJet> >::iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_470_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<myJet,allocator<myJet> >::iterator* pobj;
         vector<myJet,allocator<myJet> >::iterator xobj = ((vector<myJet,allocator<myJet> >::iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new vector<myJet,allocator<myJet> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_470_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myJet,allocator<myJet> >::iterator& obj = ((vector<myJet,allocator<myJet> >::iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_470_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<myJet,allocator<myJet> >::iterator* pobj;
         vector<myJet,allocator<myJet> >::iterator xobj = ((vector<myJet,allocator<myJet> >::iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new vector<myJet,allocator<myJet> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_470_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myJet,allocator<myJet> >::iterator::reference obj = ((const vector<myJet,allocator<myJet> >::iterator*) G__getstructoffset())->operator[](*(vector<myJet,allocator<myJet> >::iterator::difference_type*) G__Longref(&libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_470_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myJet,allocator<myJet> >::iterator& obj = ((vector<myJet,allocator<myJet> >::iterator*) G__getstructoffset())->operator+=(*(vector<myJet,allocator<myJet> >::iterator::difference_type*) G__Longref(&libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_470_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myJet,allocator<myJet> >::iterator* pobj;
         const vector<myJet,allocator<myJet> >::iterator xobj = ((const vector<myJet,allocator<myJet> >::iterator*) G__getstructoffset())->operator+(*(vector<myJet,allocator<myJet> >::iterator::difference_type*) G__Longref(&libp->para[0]));
         pobj = new vector<myJet,allocator<myJet> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_470_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myJet,allocator<myJet> >::iterator& obj = ((vector<myJet,allocator<myJet> >::iterator*) G__getstructoffset())->operator-=(*(vector<myJet,allocator<myJet> >::iterator::difference_type*) G__Longref(&libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_470_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myJet,allocator<myJet> >::iterator* pobj;
         const vector<myJet,allocator<myJet> >::iterator xobj = ((const vector<myJet,allocator<myJet> >::iterator*) G__getstructoffset())->operator-(*(vector<myJet,allocator<myJet> >::iterator::difference_type*) G__Longref(&libp->para[0]));
         pobj = new vector<myJet,allocator<myJet> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_470_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myJet,allocator<myJet> >::iterator::pointer& obj = ((const vector<myJet,allocator<myJet> >::iterator*) G__getstructoffset())->base();
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_470_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<myJet,allocator<myJet> >::iterator* pobj;
         vector<myJet,allocator<myJet> >::iterator xobj = ((vector<myJet,allocator<myJet> >::iterator*) G__getstructoffset())->operator=(*(vector<myJet,allocator<myJet> >::iterator*) libp->para[0].ref);
         pobj = new vector<myJet,allocator<myJet> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_470_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   vector<myJet,allocator<myJet> >::iterator* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new vector<myJet,allocator<myJet> >::iterator(*(vector<myJet,allocator<myJet> >::iterator*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyJetcOallocatorlEmyJetgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<myJet,allocator<myJet> >::iterator G__TvectorlEmyJetcOallocatorlEmyJetgRsPgRcLcLiterator;
static int G__eventdict_470_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<myJet,allocator<myJet> >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<myJet,allocator<myJet> >::iterator*) (soff+(sizeof(vector<myJet,allocator<myJet> >::iterator)*i)))->~G__TvectorlEmyJetcOallocatorlEmyJetgRsPgRcLcLiterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<myJet,allocator<myJet> >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<myJet,allocator<myJet> >::iterator*) (soff))->~G__TvectorlEmyJetcOallocatorlEmyJetgRsPgRcLcLiterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<myElectron,allocator<myElectron> > */
static int G__eventdict_473_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myElectron,allocator<myElectron> >::reference obj = ((vector<myElectron,allocator<myElectron> >*) G__getstructoffset())->at((vector<myElectron,allocator<myElectron> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_473_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<myElectron,allocator<myElectron> >::const_reference obj = ((const vector<myElectron,allocator<myElectron> >*) G__getstructoffset())->at((vector<myElectron,allocator<myElectron> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_473_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<myElectron,allocator<myElectron> >::iterator* pobj;
         vector<myElectron,allocator<myElectron> >::iterator xobj = ((vector<myElectron,allocator<myElectron> >*) G__getstructoffset())->begin();
         pobj = new vector<myElectron,allocator<myElectron> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_473_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<myElectron,allocator<myElectron> >::iterator* pobj;
         vector<myElectron,allocator<myElectron> >::iterator xobj = ((vector<myElectron,allocator<myElectron> >*) G__getstructoffset())->end();
         pobj = new vector<myElectron,allocator<myElectron> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_473_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<myElectron,allocator<myElectron> >::reverse_iterator* pobj;
         vector<myElectron,allocator<myElectron> >::reverse_iterator xobj = ((vector<myElectron,allocator<myElectron> >*) G__getstructoffset())->rbegin();
         pobj = new vector<myElectron,allocator<myElectron> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_473_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<myElectron,allocator<myElectron> >::reverse_iterator* pobj;
         vector<myElectron,allocator<myElectron> >::reverse_iterator xobj = ((vector<myElectron,allocator<myElectron> >*) G__getstructoffset())->rend();
         pobj = new vector<myElectron,allocator<myElectron> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_473_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<myElectron,allocator<myElectron> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_473_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<myElectron,allocator<myElectron> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_473_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<myElectron,allocator<myElectron> >*) G__getstructoffset())->resize((vector<myElectron,allocator<myElectron> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_473_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<myElectron,allocator<myElectron> >*) G__getstructoffset())->resize((vector<myElectron,allocator<myElectron> >::size_type) G__int(libp->para[0]), *((myElectron*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_473_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<myElectron,allocator<myElectron> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_473_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<myElectron,allocator<myElectron> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_473_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myElectron,allocator<myElectron> >::reference obj = ((vector<myElectron,allocator<myElectron> >*) G__getstructoffset())->operator[]((vector<myElectron,allocator<myElectron> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_473_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<myElectron,allocator<myElectron> >::const_reference obj = ((const vector<myElectron,allocator<myElectron> >*) G__getstructoffset())->operator[]((vector<myElectron,allocator<myElectron> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_473_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<myElectron,allocator<myElectron> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<myElectron,allocator<myElectron> >[n];
     } else {
       p = new((void*) gvp) vector<myElectron,allocator<myElectron> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<myElectron,allocator<myElectron> >;
     } else {
       p = new((void*) gvp) vector<myElectron,allocator<myElectron> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyElectroncOallocatorlEmyElectrongRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_473_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<myElectron,allocator<myElectron> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<myElectron,allocator<myElectron> >((vector<myElectron,allocator<myElectron> >::size_type) G__int(libp->para[0]), *(myElectron*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<myElectron,allocator<myElectron> >((vector<myElectron,allocator<myElectron> >::size_type) G__int(libp->para[0]), *(myElectron*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<myElectron,allocator<myElectron> >((vector<myElectron,allocator<myElectron> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<myElectron,allocator<myElectron> >((vector<myElectron,allocator<myElectron> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyElectroncOallocatorlEmyElectrongRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_473_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<myElectron,allocator<myElectron> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<myElectron,allocator<myElectron> >(*(vector<myElectron,allocator<myElectron> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<myElectron,allocator<myElectron> >(*(vector<myElectron,allocator<myElectron> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyElectroncOallocatorlEmyElectrongRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_473_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<myElectron,allocator<myElectron> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<myElectron,allocator<myElectron> >(*((vector<myElectron,allocator<myElectron> >::const_iterator*) G__int(libp->para[0])), *((vector<myElectron,allocator<myElectron> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<myElectron,allocator<myElectron> >(*((vector<myElectron,allocator<myElectron> >::const_iterator*) G__int(libp->para[0])), *((vector<myElectron,allocator<myElectron> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyElectroncOallocatorlEmyElectrongRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_473_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myElectron,allocator<myElectron> >& obj = ((vector<myElectron,allocator<myElectron> >*) G__getstructoffset())->operator=(*(vector<myElectron,allocator<myElectron> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_473_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<myElectron,allocator<myElectron> >*) G__getstructoffset())->reserve((vector<myElectron,allocator<myElectron> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_473_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const myElectron& obj = ((vector<myElectron,allocator<myElectron> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_473_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const myElectron& obj = ((vector<myElectron,allocator<myElectron> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_473_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<myElectron,allocator<myElectron> >*) G__getstructoffset())->push_back(*(myElectron*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_473_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<myElectron,allocator<myElectron> >*) G__getstructoffset())->swap(*(vector<myElectron,allocator<myElectron> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_473_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<myElectron,allocator<myElectron> >::iterator* pobj;
         vector<myElectron,allocator<myElectron> >::iterator xobj = ((vector<myElectron,allocator<myElectron> >*) G__getstructoffset())->insert(*((vector<myElectron,allocator<myElectron> >::iterator*) G__int(libp->para[0])), *(myElectron*) libp->para[1].ref);
         pobj = new vector<myElectron,allocator<myElectron> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_473_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<myElectron,allocator<myElectron> >*) G__getstructoffset())->insert(*((vector<myElectron,allocator<myElectron> >::iterator*) G__int(libp->para[0])), *((vector<myElectron,allocator<myElectron> >::const_iterator*) G__int(libp->para[1]))
, *((vector<myElectron,allocator<myElectron> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_473_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<myElectron,allocator<myElectron> >*) G__getstructoffset())->insert(*((vector<myElectron,allocator<myElectron> >::iterator*) G__int(libp->para[0])), (vector<myElectron,allocator<myElectron> >::size_type) G__int(libp->para[1])
, *(myElectron*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_473_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<myElectron,allocator<myElectron> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_473_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<myElectron,allocator<myElectron> >*) G__getstructoffset())->erase(*((vector<myElectron,allocator<myElectron> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_473_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<myElectron,allocator<myElectron> >*) G__getstructoffset())->erase(*((vector<myElectron,allocator<myElectron> >::iterator*) G__int(libp->para[0])), *((vector<myElectron,allocator<myElectron> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_473_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<myElectron,allocator<myElectron> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<myElectron,allocator<myElectron> > G__TvectorlEmyElectroncOallocatorlEmyElectrongRsPgR;
static int G__eventdict_473_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<myElectron,allocator<myElectron> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<myElectron,allocator<myElectron> >*) (soff+(sizeof(vector<myElectron,allocator<myElectron> >)*i)))->~G__TvectorlEmyElectroncOallocatorlEmyElectrongRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<myElectron,allocator<myElectron> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<myElectron,allocator<myElectron> >*) (soff))->~G__TvectorlEmyElectroncOallocatorlEmyElectrongRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<myElectron,allocator<myElectron> >::iterator */
static int G__eventdict_474_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<myElectron,allocator<myElectron> >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<myElectron,allocator<myElectron> >::iterator[n];
     } else {
       p = new((void*) gvp) vector<myElectron,allocator<myElectron> >::iterator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<myElectron,allocator<myElectron> >::iterator;
     } else {
       p = new((void*) gvp) vector<myElectron,allocator<myElectron> >::iterator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyElectroncOallocatorlEmyElectrongRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_474_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<myElectron,allocator<myElectron> >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<myElectron,allocator<myElectron> >::iterator(libp->para[0].ref ? *(const vector<myElectron,allocator<myElectron> >::iterator::pointer*) libp->para[0].ref : *(const vector<myElectron,allocator<myElectron> >::iterator::pointer*) (void*) (&G__Mlong(libp->para[0])));
   } else {
     p = new((void*) gvp) vector<myElectron,allocator<myElectron> >::iterator(libp->para[0].ref ? *(const vector<myElectron,allocator<myElectron> >::iterator::pointer*) libp->para[0].ref : *(const vector<myElectron,allocator<myElectron> >::iterator::pointer*) (void*) (&G__Mlong(libp->para[0])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyElectroncOallocatorlEmyElectrongRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_474_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myElectron,allocator<myElectron> >::iterator::reference obj = ((const vector<myElectron,allocator<myElectron> >::iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_474_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const vector<myElectron,allocator<myElectron> >::iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_474_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myElectron,allocator<myElectron> >::iterator& obj = ((vector<myElectron,allocator<myElectron> >::iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_474_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<myElectron,allocator<myElectron> >::iterator* pobj;
         vector<myElectron,allocator<myElectron> >::iterator xobj = ((vector<myElectron,allocator<myElectron> >::iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new vector<myElectron,allocator<myElectron> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_474_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myElectron,allocator<myElectron> >::iterator& obj = ((vector<myElectron,allocator<myElectron> >::iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_474_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<myElectron,allocator<myElectron> >::iterator* pobj;
         vector<myElectron,allocator<myElectron> >::iterator xobj = ((vector<myElectron,allocator<myElectron> >::iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new vector<myElectron,allocator<myElectron> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_474_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myElectron,allocator<myElectron> >::iterator::reference obj = ((const vector<myElectron,allocator<myElectron> >::iterator*) G__getstructoffset())->operator[](*(vector<myElectron,allocator<myElectron> >::iterator::difference_type*) G__Longref(&libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_474_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myElectron,allocator<myElectron> >::iterator& obj = ((vector<myElectron,allocator<myElectron> >::iterator*) G__getstructoffset())->operator+=(*(vector<myElectron,allocator<myElectron> >::iterator::difference_type*) G__Longref(&libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_474_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myElectron,allocator<myElectron> >::iterator* pobj;
         const vector<myElectron,allocator<myElectron> >::iterator xobj = ((const vector<myElectron,allocator<myElectron> >::iterator*) G__getstructoffset())->operator+(*(vector<myElectron,allocator<myElectron> >::iterator::difference_type*) G__Longref(&libp->para[0]));
         pobj = new vector<myElectron,allocator<myElectron> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_474_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myElectron,allocator<myElectron> >::iterator& obj = ((vector<myElectron,allocator<myElectron> >::iterator*) G__getstructoffset())->operator-=(*(vector<myElectron,allocator<myElectron> >::iterator::difference_type*) G__Longref(&libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_474_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myElectron,allocator<myElectron> >::iterator* pobj;
         const vector<myElectron,allocator<myElectron> >::iterator xobj = ((const vector<myElectron,allocator<myElectron> >::iterator*) G__getstructoffset())->operator-(*(vector<myElectron,allocator<myElectron> >::iterator::difference_type*) G__Longref(&libp->para[0]));
         pobj = new vector<myElectron,allocator<myElectron> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_474_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myElectron,allocator<myElectron> >::iterator::pointer& obj = ((const vector<myElectron,allocator<myElectron> >::iterator*) G__getstructoffset())->base();
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_474_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<myElectron,allocator<myElectron> >::iterator* pobj;
         vector<myElectron,allocator<myElectron> >::iterator xobj = ((vector<myElectron,allocator<myElectron> >::iterator*) G__getstructoffset())->operator=(*(vector<myElectron,allocator<myElectron> >::iterator*) libp->para[0].ref);
         pobj = new vector<myElectron,allocator<myElectron> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_474_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   vector<myElectron,allocator<myElectron> >::iterator* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new vector<myElectron,allocator<myElectron> >::iterator(*(vector<myElectron,allocator<myElectron> >::iterator*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyElectroncOallocatorlEmyElectrongRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<myElectron,allocator<myElectron> >::iterator G__TvectorlEmyElectroncOallocatorlEmyElectrongRsPgRcLcLiterator;
static int G__eventdict_474_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<myElectron,allocator<myElectron> >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<myElectron,allocator<myElectron> >::iterator*) (soff+(sizeof(vector<myElectron,allocator<myElectron> >::iterator)*i)))->~G__TvectorlEmyElectroncOallocatorlEmyElectrongRsPgRcLcLiterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<myElectron,allocator<myElectron> >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<myElectron,allocator<myElectron> >::iterator*) (soff))->~G__TvectorlEmyElectroncOallocatorlEmyElectrongRsPgRcLcLiterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<myMuon,allocator<myMuon> > */
static int G__eventdict_477_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myMuon,allocator<myMuon> >::reference obj = ((vector<myMuon,allocator<myMuon> >*) G__getstructoffset())->at((vector<myMuon,allocator<myMuon> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_477_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<myMuon,allocator<myMuon> >::const_reference obj = ((const vector<myMuon,allocator<myMuon> >*) G__getstructoffset())->at((vector<myMuon,allocator<myMuon> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_477_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<myMuon,allocator<myMuon> >::iterator* pobj;
         vector<myMuon,allocator<myMuon> >::iterator xobj = ((vector<myMuon,allocator<myMuon> >*) G__getstructoffset())->begin();
         pobj = new vector<myMuon,allocator<myMuon> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_477_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<myMuon,allocator<myMuon> >::iterator* pobj;
         vector<myMuon,allocator<myMuon> >::iterator xobj = ((vector<myMuon,allocator<myMuon> >*) G__getstructoffset())->end();
         pobj = new vector<myMuon,allocator<myMuon> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_477_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<myMuon,allocator<myMuon> >::reverse_iterator* pobj;
         vector<myMuon,allocator<myMuon> >::reverse_iterator xobj = ((vector<myMuon,allocator<myMuon> >*) G__getstructoffset())->rbegin();
         pobj = new vector<myMuon,allocator<myMuon> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_477_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<myMuon,allocator<myMuon> >::reverse_iterator* pobj;
         vector<myMuon,allocator<myMuon> >::reverse_iterator xobj = ((vector<myMuon,allocator<myMuon> >*) G__getstructoffset())->rend();
         pobj = new vector<myMuon,allocator<myMuon> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_477_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<myMuon,allocator<myMuon> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_477_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<myMuon,allocator<myMuon> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_477_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<myMuon,allocator<myMuon> >*) G__getstructoffset())->resize((vector<myMuon,allocator<myMuon> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_477_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<myMuon,allocator<myMuon> >*) G__getstructoffset())->resize((vector<myMuon,allocator<myMuon> >::size_type) G__int(libp->para[0]), *((myMuon*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_477_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<myMuon,allocator<myMuon> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_477_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<myMuon,allocator<myMuon> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_477_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myMuon,allocator<myMuon> >::reference obj = ((vector<myMuon,allocator<myMuon> >*) G__getstructoffset())->operator[]((vector<myMuon,allocator<myMuon> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_477_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<myMuon,allocator<myMuon> >::const_reference obj = ((const vector<myMuon,allocator<myMuon> >*) G__getstructoffset())->operator[]((vector<myMuon,allocator<myMuon> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_477_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<myMuon,allocator<myMuon> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<myMuon,allocator<myMuon> >[n];
     } else {
       p = new((void*) gvp) vector<myMuon,allocator<myMuon> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<myMuon,allocator<myMuon> >;
     } else {
       p = new((void*) gvp) vector<myMuon,allocator<myMuon> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMuoncOallocatorlEmyMuongRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_477_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<myMuon,allocator<myMuon> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<myMuon,allocator<myMuon> >((vector<myMuon,allocator<myMuon> >::size_type) G__int(libp->para[0]), *(myMuon*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<myMuon,allocator<myMuon> >((vector<myMuon,allocator<myMuon> >::size_type) G__int(libp->para[0]), *(myMuon*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<myMuon,allocator<myMuon> >((vector<myMuon,allocator<myMuon> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<myMuon,allocator<myMuon> >((vector<myMuon,allocator<myMuon> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMuoncOallocatorlEmyMuongRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_477_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<myMuon,allocator<myMuon> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<myMuon,allocator<myMuon> >(*(vector<myMuon,allocator<myMuon> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<myMuon,allocator<myMuon> >(*(vector<myMuon,allocator<myMuon> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMuoncOallocatorlEmyMuongRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_477_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<myMuon,allocator<myMuon> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<myMuon,allocator<myMuon> >(*((vector<myMuon,allocator<myMuon> >::const_iterator*) G__int(libp->para[0])), *((vector<myMuon,allocator<myMuon> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<myMuon,allocator<myMuon> >(*((vector<myMuon,allocator<myMuon> >::const_iterator*) G__int(libp->para[0])), *((vector<myMuon,allocator<myMuon> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMuoncOallocatorlEmyMuongRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_477_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myMuon,allocator<myMuon> >& obj = ((vector<myMuon,allocator<myMuon> >*) G__getstructoffset())->operator=(*(vector<myMuon,allocator<myMuon> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_477_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<myMuon,allocator<myMuon> >*) G__getstructoffset())->reserve((vector<myMuon,allocator<myMuon> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_477_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const myMuon& obj = ((vector<myMuon,allocator<myMuon> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_477_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const myMuon& obj = ((vector<myMuon,allocator<myMuon> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_477_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<myMuon,allocator<myMuon> >*) G__getstructoffset())->push_back(*(myMuon*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_477_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<myMuon,allocator<myMuon> >*) G__getstructoffset())->swap(*(vector<myMuon,allocator<myMuon> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_477_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<myMuon,allocator<myMuon> >::iterator* pobj;
         vector<myMuon,allocator<myMuon> >::iterator xobj = ((vector<myMuon,allocator<myMuon> >*) G__getstructoffset())->insert(*((vector<myMuon,allocator<myMuon> >::iterator*) G__int(libp->para[0])), *(myMuon*) libp->para[1].ref);
         pobj = new vector<myMuon,allocator<myMuon> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_477_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<myMuon,allocator<myMuon> >*) G__getstructoffset())->insert(*((vector<myMuon,allocator<myMuon> >::iterator*) G__int(libp->para[0])), *((vector<myMuon,allocator<myMuon> >::const_iterator*) G__int(libp->para[1]))
, *((vector<myMuon,allocator<myMuon> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_477_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<myMuon,allocator<myMuon> >*) G__getstructoffset())->insert(*((vector<myMuon,allocator<myMuon> >::iterator*) G__int(libp->para[0])), (vector<myMuon,allocator<myMuon> >::size_type) G__int(libp->para[1])
, *(myMuon*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_477_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<myMuon,allocator<myMuon> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_477_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<myMuon,allocator<myMuon> >*) G__getstructoffset())->erase(*((vector<myMuon,allocator<myMuon> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_477_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<myMuon,allocator<myMuon> >*) G__getstructoffset())->erase(*((vector<myMuon,allocator<myMuon> >::iterator*) G__int(libp->para[0])), *((vector<myMuon,allocator<myMuon> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_477_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<myMuon,allocator<myMuon> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<myMuon,allocator<myMuon> > G__TvectorlEmyMuoncOallocatorlEmyMuongRsPgR;
static int G__eventdict_477_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<myMuon,allocator<myMuon> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<myMuon,allocator<myMuon> >*) (soff+(sizeof(vector<myMuon,allocator<myMuon> >)*i)))->~G__TvectorlEmyMuoncOallocatorlEmyMuongRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<myMuon,allocator<myMuon> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<myMuon,allocator<myMuon> >*) (soff))->~G__TvectorlEmyMuoncOallocatorlEmyMuongRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<myMuon,allocator<myMuon> >::iterator */
static int G__eventdict_478_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<myMuon,allocator<myMuon> >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<myMuon,allocator<myMuon> >::iterator[n];
     } else {
       p = new((void*) gvp) vector<myMuon,allocator<myMuon> >::iterator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<myMuon,allocator<myMuon> >::iterator;
     } else {
       p = new((void*) gvp) vector<myMuon,allocator<myMuon> >::iterator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMuoncOallocatorlEmyMuongRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_478_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<myMuon,allocator<myMuon> >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<myMuon,allocator<myMuon> >::iterator(libp->para[0].ref ? *(const vector<myMuon,allocator<myMuon> >::iterator::pointer*) libp->para[0].ref : *(const vector<myMuon,allocator<myMuon> >::iterator::pointer*) (void*) (&G__Mlong(libp->para[0])));
   } else {
     p = new((void*) gvp) vector<myMuon,allocator<myMuon> >::iterator(libp->para[0].ref ? *(const vector<myMuon,allocator<myMuon> >::iterator::pointer*) libp->para[0].ref : *(const vector<myMuon,allocator<myMuon> >::iterator::pointer*) (void*) (&G__Mlong(libp->para[0])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMuoncOallocatorlEmyMuongRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_478_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myMuon,allocator<myMuon> >::iterator::reference obj = ((const vector<myMuon,allocator<myMuon> >::iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_478_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const vector<myMuon,allocator<myMuon> >::iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_478_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myMuon,allocator<myMuon> >::iterator& obj = ((vector<myMuon,allocator<myMuon> >::iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_478_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<myMuon,allocator<myMuon> >::iterator* pobj;
         vector<myMuon,allocator<myMuon> >::iterator xobj = ((vector<myMuon,allocator<myMuon> >::iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new vector<myMuon,allocator<myMuon> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_478_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myMuon,allocator<myMuon> >::iterator& obj = ((vector<myMuon,allocator<myMuon> >::iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_478_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<myMuon,allocator<myMuon> >::iterator* pobj;
         vector<myMuon,allocator<myMuon> >::iterator xobj = ((vector<myMuon,allocator<myMuon> >::iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new vector<myMuon,allocator<myMuon> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_478_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myMuon,allocator<myMuon> >::iterator::reference obj = ((const vector<myMuon,allocator<myMuon> >::iterator*) G__getstructoffset())->operator[](*(vector<myMuon,allocator<myMuon> >::iterator::difference_type*) G__Longref(&libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_478_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myMuon,allocator<myMuon> >::iterator& obj = ((vector<myMuon,allocator<myMuon> >::iterator*) G__getstructoffset())->operator+=(*(vector<myMuon,allocator<myMuon> >::iterator::difference_type*) G__Longref(&libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_478_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myMuon,allocator<myMuon> >::iterator* pobj;
         const vector<myMuon,allocator<myMuon> >::iterator xobj = ((const vector<myMuon,allocator<myMuon> >::iterator*) G__getstructoffset())->operator+(*(vector<myMuon,allocator<myMuon> >::iterator::difference_type*) G__Longref(&libp->para[0]));
         pobj = new vector<myMuon,allocator<myMuon> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_478_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myMuon,allocator<myMuon> >::iterator& obj = ((vector<myMuon,allocator<myMuon> >::iterator*) G__getstructoffset())->operator-=(*(vector<myMuon,allocator<myMuon> >::iterator::difference_type*) G__Longref(&libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_478_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myMuon,allocator<myMuon> >::iterator* pobj;
         const vector<myMuon,allocator<myMuon> >::iterator xobj = ((const vector<myMuon,allocator<myMuon> >::iterator*) G__getstructoffset())->operator-(*(vector<myMuon,allocator<myMuon> >::iterator::difference_type*) G__Longref(&libp->para[0]));
         pobj = new vector<myMuon,allocator<myMuon> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_478_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myMuon,allocator<myMuon> >::iterator::pointer& obj = ((const vector<myMuon,allocator<myMuon> >::iterator*) G__getstructoffset())->base();
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_478_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<myMuon,allocator<myMuon> >::iterator* pobj;
         vector<myMuon,allocator<myMuon> >::iterator xobj = ((vector<myMuon,allocator<myMuon> >::iterator*) G__getstructoffset())->operator=(*(vector<myMuon,allocator<myMuon> >::iterator*) libp->para[0].ref);
         pobj = new vector<myMuon,allocator<myMuon> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_478_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   vector<myMuon,allocator<myMuon> >::iterator* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new vector<myMuon,allocator<myMuon> >::iterator(*(vector<myMuon,allocator<myMuon> >::iterator*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMuoncOallocatorlEmyMuongRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<myMuon,allocator<myMuon> >::iterator G__TvectorlEmyMuoncOallocatorlEmyMuongRsPgRcLcLiterator;
static int G__eventdict_478_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<myMuon,allocator<myMuon> >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<myMuon,allocator<myMuon> >::iterator*) (soff+(sizeof(vector<myMuon,allocator<myMuon> >::iterator)*i)))->~G__TvectorlEmyMuoncOallocatorlEmyMuongRsPgRcLcLiterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<myMuon,allocator<myMuon> >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<myMuon,allocator<myMuon> >::iterator*) (soff))->~G__TvectorlEmyMuoncOallocatorlEmyMuongRsPgRcLcLiterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<myTau,allocator<myTau> > */
static int G__eventdict_481_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myTau,allocator<myTau> >::reference obj = ((vector<myTau,allocator<myTau> >*) G__getstructoffset())->at((vector<myTau,allocator<myTau> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_481_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<myTau,allocator<myTau> >::const_reference obj = ((const vector<myTau,allocator<myTau> >*) G__getstructoffset())->at((vector<myTau,allocator<myTau> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_481_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<myTau,allocator<myTau> >::iterator* pobj;
         vector<myTau,allocator<myTau> >::iterator xobj = ((vector<myTau,allocator<myTau> >*) G__getstructoffset())->begin();
         pobj = new vector<myTau,allocator<myTau> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_481_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<myTau,allocator<myTau> >::iterator* pobj;
         vector<myTau,allocator<myTau> >::iterator xobj = ((vector<myTau,allocator<myTau> >*) G__getstructoffset())->end();
         pobj = new vector<myTau,allocator<myTau> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_481_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<myTau,allocator<myTau> >::reverse_iterator* pobj;
         vector<myTau,allocator<myTau> >::reverse_iterator xobj = ((vector<myTau,allocator<myTau> >*) G__getstructoffset())->rbegin();
         pobj = new vector<myTau,allocator<myTau> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_481_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<myTau,allocator<myTau> >::reverse_iterator* pobj;
         vector<myTau,allocator<myTau> >::reverse_iterator xobj = ((vector<myTau,allocator<myTau> >*) G__getstructoffset())->rend();
         pobj = new vector<myTau,allocator<myTau> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_481_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<myTau,allocator<myTau> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_481_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<myTau,allocator<myTau> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_481_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<myTau,allocator<myTau> >*) G__getstructoffset())->resize((vector<myTau,allocator<myTau> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_481_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<myTau,allocator<myTau> >*) G__getstructoffset())->resize((vector<myTau,allocator<myTau> >::size_type) G__int(libp->para[0]), *((myTau*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_481_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<myTau,allocator<myTau> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_481_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<myTau,allocator<myTau> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_481_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myTau,allocator<myTau> >::reference obj = ((vector<myTau,allocator<myTau> >*) G__getstructoffset())->operator[]((vector<myTau,allocator<myTau> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_481_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<myTau,allocator<myTau> >::const_reference obj = ((const vector<myTau,allocator<myTau> >*) G__getstructoffset())->operator[]((vector<myTau,allocator<myTau> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_481_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<myTau,allocator<myTau> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<myTau,allocator<myTau> >[n];
     } else {
       p = new((void*) gvp) vector<myTau,allocator<myTau> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<myTau,allocator<myTau> >;
     } else {
       p = new((void*) gvp) vector<myTau,allocator<myTau> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTaucOallocatorlEmyTaugRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_481_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<myTau,allocator<myTau> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<myTau,allocator<myTau> >((vector<myTau,allocator<myTau> >::size_type) G__int(libp->para[0]), *(myTau*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<myTau,allocator<myTau> >((vector<myTau,allocator<myTau> >::size_type) G__int(libp->para[0]), *(myTau*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<myTau,allocator<myTau> >((vector<myTau,allocator<myTau> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<myTau,allocator<myTau> >((vector<myTau,allocator<myTau> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTaucOallocatorlEmyTaugRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_481_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<myTau,allocator<myTau> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<myTau,allocator<myTau> >(*(vector<myTau,allocator<myTau> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<myTau,allocator<myTau> >(*(vector<myTau,allocator<myTau> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTaucOallocatorlEmyTaugRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_481_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<myTau,allocator<myTau> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<myTau,allocator<myTau> >(*((vector<myTau,allocator<myTau> >::const_iterator*) G__int(libp->para[0])), *((vector<myTau,allocator<myTau> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<myTau,allocator<myTau> >(*((vector<myTau,allocator<myTau> >::const_iterator*) G__int(libp->para[0])), *((vector<myTau,allocator<myTau> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTaucOallocatorlEmyTaugRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_481_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myTau,allocator<myTau> >& obj = ((vector<myTau,allocator<myTau> >*) G__getstructoffset())->operator=(*(vector<myTau,allocator<myTau> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_481_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<myTau,allocator<myTau> >*) G__getstructoffset())->reserve((vector<myTau,allocator<myTau> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_481_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const myTau& obj = ((vector<myTau,allocator<myTau> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_481_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const myTau& obj = ((vector<myTau,allocator<myTau> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_481_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<myTau,allocator<myTau> >*) G__getstructoffset())->push_back(*(myTau*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_481_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<myTau,allocator<myTau> >*) G__getstructoffset())->swap(*(vector<myTau,allocator<myTau> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_481_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<myTau,allocator<myTau> >::iterator* pobj;
         vector<myTau,allocator<myTau> >::iterator xobj = ((vector<myTau,allocator<myTau> >*) G__getstructoffset())->insert(*((vector<myTau,allocator<myTau> >::iterator*) G__int(libp->para[0])), *(myTau*) libp->para[1].ref);
         pobj = new vector<myTau,allocator<myTau> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_481_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<myTau,allocator<myTau> >*) G__getstructoffset())->insert(*((vector<myTau,allocator<myTau> >::iterator*) G__int(libp->para[0])), *((vector<myTau,allocator<myTau> >::const_iterator*) G__int(libp->para[1]))
, *((vector<myTau,allocator<myTau> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_481_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<myTau,allocator<myTau> >*) G__getstructoffset())->insert(*((vector<myTau,allocator<myTau> >::iterator*) G__int(libp->para[0])), (vector<myTau,allocator<myTau> >::size_type) G__int(libp->para[1])
, *(myTau*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_481_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<myTau,allocator<myTau> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_481_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<myTau,allocator<myTau> >*) G__getstructoffset())->erase(*((vector<myTau,allocator<myTau> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_481_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<myTau,allocator<myTau> >*) G__getstructoffset())->erase(*((vector<myTau,allocator<myTau> >::iterator*) G__int(libp->para[0])), *((vector<myTau,allocator<myTau> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_481_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<myTau,allocator<myTau> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<myTau,allocator<myTau> > G__TvectorlEmyTaucOallocatorlEmyTaugRsPgR;
static int G__eventdict_481_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<myTau,allocator<myTau> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<myTau,allocator<myTau> >*) (soff+(sizeof(vector<myTau,allocator<myTau> >)*i)))->~G__TvectorlEmyTaucOallocatorlEmyTaugRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<myTau,allocator<myTau> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<myTau,allocator<myTau> >*) (soff))->~G__TvectorlEmyTaucOallocatorlEmyTaugRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<myTau,allocator<myTau> >::iterator */
static int G__eventdict_482_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<myTau,allocator<myTau> >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<myTau,allocator<myTau> >::iterator[n];
     } else {
       p = new((void*) gvp) vector<myTau,allocator<myTau> >::iterator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<myTau,allocator<myTau> >::iterator;
     } else {
       p = new((void*) gvp) vector<myTau,allocator<myTau> >::iterator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTaucOallocatorlEmyTaugRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_482_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<myTau,allocator<myTau> >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<myTau,allocator<myTau> >::iterator(libp->para[0].ref ? *(const vector<myTau,allocator<myTau> >::iterator::pointer*) libp->para[0].ref : *(const vector<myTau,allocator<myTau> >::iterator::pointer*) (void*) (&G__Mlong(libp->para[0])));
   } else {
     p = new((void*) gvp) vector<myTau,allocator<myTau> >::iterator(libp->para[0].ref ? *(const vector<myTau,allocator<myTau> >::iterator::pointer*) libp->para[0].ref : *(const vector<myTau,allocator<myTau> >::iterator::pointer*) (void*) (&G__Mlong(libp->para[0])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTaucOallocatorlEmyTaugRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_482_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myTau,allocator<myTau> >::iterator::reference obj = ((const vector<myTau,allocator<myTau> >::iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_482_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const vector<myTau,allocator<myTau> >::iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_482_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myTau,allocator<myTau> >::iterator& obj = ((vector<myTau,allocator<myTau> >::iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_482_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<myTau,allocator<myTau> >::iterator* pobj;
         vector<myTau,allocator<myTau> >::iterator xobj = ((vector<myTau,allocator<myTau> >::iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new vector<myTau,allocator<myTau> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_482_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myTau,allocator<myTau> >::iterator& obj = ((vector<myTau,allocator<myTau> >::iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_482_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<myTau,allocator<myTau> >::iterator* pobj;
         vector<myTau,allocator<myTau> >::iterator xobj = ((vector<myTau,allocator<myTau> >::iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new vector<myTau,allocator<myTau> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_482_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myTau,allocator<myTau> >::iterator::reference obj = ((const vector<myTau,allocator<myTau> >::iterator*) G__getstructoffset())->operator[](*(vector<myTau,allocator<myTau> >::iterator::difference_type*) G__Longref(&libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_482_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myTau,allocator<myTau> >::iterator& obj = ((vector<myTau,allocator<myTau> >::iterator*) G__getstructoffset())->operator+=(*(vector<myTau,allocator<myTau> >::iterator::difference_type*) G__Longref(&libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_482_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myTau,allocator<myTau> >::iterator* pobj;
         const vector<myTau,allocator<myTau> >::iterator xobj = ((const vector<myTau,allocator<myTau> >::iterator*) G__getstructoffset())->operator+(*(vector<myTau,allocator<myTau> >::iterator::difference_type*) G__Longref(&libp->para[0]));
         pobj = new vector<myTau,allocator<myTau> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_482_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myTau,allocator<myTau> >::iterator& obj = ((vector<myTau,allocator<myTau> >::iterator*) G__getstructoffset())->operator-=(*(vector<myTau,allocator<myTau> >::iterator::difference_type*) G__Longref(&libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_482_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myTau,allocator<myTau> >::iterator* pobj;
         const vector<myTau,allocator<myTau> >::iterator xobj = ((const vector<myTau,allocator<myTau> >::iterator*) G__getstructoffset())->operator-(*(vector<myTau,allocator<myTau> >::iterator::difference_type*) G__Longref(&libp->para[0]));
         pobj = new vector<myTau,allocator<myTau> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_482_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myTau,allocator<myTau> >::iterator::pointer& obj = ((const vector<myTau,allocator<myTau> >::iterator*) G__getstructoffset())->base();
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_482_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<myTau,allocator<myTau> >::iterator* pobj;
         vector<myTau,allocator<myTau> >::iterator xobj = ((vector<myTau,allocator<myTau> >::iterator*) G__getstructoffset())->operator=(*(vector<myTau,allocator<myTau> >::iterator*) libp->para[0].ref);
         pobj = new vector<myTau,allocator<myTau> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_482_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   vector<myTau,allocator<myTau> >::iterator* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new vector<myTau,allocator<myTau> >::iterator(*(vector<myTau,allocator<myTau> >::iterator*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTaucOallocatorlEmyTaugRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<myTau,allocator<myTau> >::iterator G__TvectorlEmyTaucOallocatorlEmyTaugRsPgRcLcLiterator;
static int G__eventdict_482_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<myTau,allocator<myTau> >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<myTau,allocator<myTau> >::iterator*) (soff+(sizeof(vector<myTau,allocator<myTau> >::iterator)*i)))->~G__TvectorlEmyTaucOallocatorlEmyTaugRsPgRcLcLiterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<myTau,allocator<myTau> >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<myTau,allocator<myTau> >::iterator*) (soff))->~G__TvectorlEmyTaucOallocatorlEmyTaugRsPgRcLcLiterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<myMET,allocator<myMET> > */
static int G__eventdict_485_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myMET,allocator<myMET> >::reference obj = ((vector<myMET,allocator<myMET> >*) G__getstructoffset())->at((vector<myMET,allocator<myMET> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_485_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<myMET,allocator<myMET> >::const_reference obj = ((const vector<myMET,allocator<myMET> >*) G__getstructoffset())->at((vector<myMET,allocator<myMET> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_485_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<myMET,allocator<myMET> >::iterator* pobj;
         vector<myMET,allocator<myMET> >::iterator xobj = ((vector<myMET,allocator<myMET> >*) G__getstructoffset())->begin();
         pobj = new vector<myMET,allocator<myMET> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_485_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<myMET,allocator<myMET> >::iterator* pobj;
         vector<myMET,allocator<myMET> >::iterator xobj = ((vector<myMET,allocator<myMET> >*) G__getstructoffset())->end();
         pobj = new vector<myMET,allocator<myMET> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_485_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<myMET,allocator<myMET> >::reverse_iterator* pobj;
         vector<myMET,allocator<myMET> >::reverse_iterator xobj = ((vector<myMET,allocator<myMET> >*) G__getstructoffset())->rbegin();
         pobj = new vector<myMET,allocator<myMET> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_485_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<myMET,allocator<myMET> >::reverse_iterator* pobj;
         vector<myMET,allocator<myMET> >::reverse_iterator xobj = ((vector<myMET,allocator<myMET> >*) G__getstructoffset())->rend();
         pobj = new vector<myMET,allocator<myMET> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_485_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<myMET,allocator<myMET> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_485_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<myMET,allocator<myMET> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_485_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<myMET,allocator<myMET> >*) G__getstructoffset())->resize((vector<myMET,allocator<myMET> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_485_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<myMET,allocator<myMET> >*) G__getstructoffset())->resize((vector<myMET,allocator<myMET> >::size_type) G__int(libp->para[0]), *((myMET*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_485_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<myMET,allocator<myMET> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_485_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<myMET,allocator<myMET> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_485_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myMET,allocator<myMET> >::reference obj = ((vector<myMET,allocator<myMET> >*) G__getstructoffset())->operator[]((vector<myMET,allocator<myMET> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_485_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<myMET,allocator<myMET> >::const_reference obj = ((const vector<myMET,allocator<myMET> >*) G__getstructoffset())->operator[]((vector<myMET,allocator<myMET> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_485_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<myMET,allocator<myMET> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<myMET,allocator<myMET> >[n];
     } else {
       p = new((void*) gvp) vector<myMET,allocator<myMET> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<myMET,allocator<myMET> >;
     } else {
       p = new((void*) gvp) vector<myMET,allocator<myMET> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMETcOallocatorlEmyMETgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_485_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<myMET,allocator<myMET> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<myMET,allocator<myMET> >((vector<myMET,allocator<myMET> >::size_type) G__int(libp->para[0]), *(myMET*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<myMET,allocator<myMET> >((vector<myMET,allocator<myMET> >::size_type) G__int(libp->para[0]), *(myMET*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<myMET,allocator<myMET> >((vector<myMET,allocator<myMET> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<myMET,allocator<myMET> >((vector<myMET,allocator<myMET> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMETcOallocatorlEmyMETgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_485_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<myMET,allocator<myMET> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<myMET,allocator<myMET> >(*(vector<myMET,allocator<myMET> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<myMET,allocator<myMET> >(*(vector<myMET,allocator<myMET> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMETcOallocatorlEmyMETgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_485_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<myMET,allocator<myMET> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<myMET,allocator<myMET> >(*((vector<myMET,allocator<myMET> >::const_iterator*) G__int(libp->para[0])), *((vector<myMET,allocator<myMET> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<myMET,allocator<myMET> >(*((vector<myMET,allocator<myMET> >::const_iterator*) G__int(libp->para[0])), *((vector<myMET,allocator<myMET> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMETcOallocatorlEmyMETgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_485_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myMET,allocator<myMET> >& obj = ((vector<myMET,allocator<myMET> >*) G__getstructoffset())->operator=(*(vector<myMET,allocator<myMET> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_485_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<myMET,allocator<myMET> >*) G__getstructoffset())->reserve((vector<myMET,allocator<myMET> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_485_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const myMET& obj = ((vector<myMET,allocator<myMET> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_485_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const myMET& obj = ((vector<myMET,allocator<myMET> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_485_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<myMET,allocator<myMET> >*) G__getstructoffset())->push_back(*(myMET*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_485_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<myMET,allocator<myMET> >*) G__getstructoffset())->swap(*(vector<myMET,allocator<myMET> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_485_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<myMET,allocator<myMET> >::iterator* pobj;
         vector<myMET,allocator<myMET> >::iterator xobj = ((vector<myMET,allocator<myMET> >*) G__getstructoffset())->insert(*((vector<myMET,allocator<myMET> >::iterator*) G__int(libp->para[0])), *(myMET*) libp->para[1].ref);
         pobj = new vector<myMET,allocator<myMET> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_485_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<myMET,allocator<myMET> >*) G__getstructoffset())->insert(*((vector<myMET,allocator<myMET> >::iterator*) G__int(libp->para[0])), *((vector<myMET,allocator<myMET> >::const_iterator*) G__int(libp->para[1]))
, *((vector<myMET,allocator<myMET> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_485_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<myMET,allocator<myMET> >*) G__getstructoffset())->insert(*((vector<myMET,allocator<myMET> >::iterator*) G__int(libp->para[0])), (vector<myMET,allocator<myMET> >::size_type) G__int(libp->para[1])
, *(myMET*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_485_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<myMET,allocator<myMET> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_485_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<myMET,allocator<myMET> >*) G__getstructoffset())->erase(*((vector<myMET,allocator<myMET> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_485_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<myMET,allocator<myMET> >*) G__getstructoffset())->erase(*((vector<myMET,allocator<myMET> >::iterator*) G__int(libp->para[0])), *((vector<myMET,allocator<myMET> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_485_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<myMET,allocator<myMET> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<myMET,allocator<myMET> > G__TvectorlEmyMETcOallocatorlEmyMETgRsPgR;
static int G__eventdict_485_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<myMET,allocator<myMET> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<myMET,allocator<myMET> >*) (soff+(sizeof(vector<myMET,allocator<myMET> >)*i)))->~G__TvectorlEmyMETcOallocatorlEmyMETgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<myMET,allocator<myMET> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<myMET,allocator<myMET> >*) (soff))->~G__TvectorlEmyMETcOallocatorlEmyMETgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<myMET,allocator<myMET> >::iterator */
static int G__eventdict_486_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<myMET,allocator<myMET> >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<myMET,allocator<myMET> >::iterator[n];
     } else {
       p = new((void*) gvp) vector<myMET,allocator<myMET> >::iterator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<myMET,allocator<myMET> >::iterator;
     } else {
       p = new((void*) gvp) vector<myMET,allocator<myMET> >::iterator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMETcOallocatorlEmyMETgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_486_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<myMET,allocator<myMET> >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<myMET,allocator<myMET> >::iterator(libp->para[0].ref ? *(const vector<myMET,allocator<myMET> >::iterator::pointer*) libp->para[0].ref : *(const vector<myMET,allocator<myMET> >::iterator::pointer*) (void*) (&G__Mlong(libp->para[0])));
   } else {
     p = new((void*) gvp) vector<myMET,allocator<myMET> >::iterator(libp->para[0].ref ? *(const vector<myMET,allocator<myMET> >::iterator::pointer*) libp->para[0].ref : *(const vector<myMET,allocator<myMET> >::iterator::pointer*) (void*) (&G__Mlong(libp->para[0])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMETcOallocatorlEmyMETgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_486_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myMET,allocator<myMET> >::iterator::reference obj = ((const vector<myMET,allocator<myMET> >::iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_486_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const vector<myMET,allocator<myMET> >::iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_486_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myMET,allocator<myMET> >::iterator& obj = ((vector<myMET,allocator<myMET> >::iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_486_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<myMET,allocator<myMET> >::iterator* pobj;
         vector<myMET,allocator<myMET> >::iterator xobj = ((vector<myMET,allocator<myMET> >::iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new vector<myMET,allocator<myMET> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_486_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myMET,allocator<myMET> >::iterator& obj = ((vector<myMET,allocator<myMET> >::iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_486_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<myMET,allocator<myMET> >::iterator* pobj;
         vector<myMET,allocator<myMET> >::iterator xobj = ((vector<myMET,allocator<myMET> >::iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new vector<myMET,allocator<myMET> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_486_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myMET,allocator<myMET> >::iterator::reference obj = ((const vector<myMET,allocator<myMET> >::iterator*) G__getstructoffset())->operator[](*(vector<myMET,allocator<myMET> >::iterator::difference_type*) G__Longref(&libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_486_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myMET,allocator<myMET> >::iterator& obj = ((vector<myMET,allocator<myMET> >::iterator*) G__getstructoffset())->operator+=(*(vector<myMET,allocator<myMET> >::iterator::difference_type*) G__Longref(&libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_486_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myMET,allocator<myMET> >::iterator* pobj;
         const vector<myMET,allocator<myMET> >::iterator xobj = ((const vector<myMET,allocator<myMET> >::iterator*) G__getstructoffset())->operator+(*(vector<myMET,allocator<myMET> >::iterator::difference_type*) G__Longref(&libp->para[0]));
         pobj = new vector<myMET,allocator<myMET> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_486_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myMET,allocator<myMET> >::iterator& obj = ((vector<myMET,allocator<myMET> >::iterator*) G__getstructoffset())->operator-=(*(vector<myMET,allocator<myMET> >::iterator::difference_type*) G__Longref(&libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_486_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myMET,allocator<myMET> >::iterator* pobj;
         const vector<myMET,allocator<myMET> >::iterator xobj = ((const vector<myMET,allocator<myMET> >::iterator*) G__getstructoffset())->operator-(*(vector<myMET,allocator<myMET> >::iterator::difference_type*) G__Longref(&libp->para[0]));
         pobj = new vector<myMET,allocator<myMET> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_486_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myMET,allocator<myMET> >::iterator::pointer& obj = ((const vector<myMET,allocator<myMET> >::iterator*) G__getstructoffset())->base();
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_486_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<myMET,allocator<myMET> >::iterator* pobj;
         vector<myMET,allocator<myMET> >::iterator xobj = ((vector<myMET,allocator<myMET> >::iterator*) G__getstructoffset())->operator=(*(vector<myMET,allocator<myMET> >::iterator*) libp->para[0].ref);
         pobj = new vector<myMET,allocator<myMET> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_486_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   vector<myMET,allocator<myMET> >::iterator* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new vector<myMET,allocator<myMET> >::iterator(*(vector<myMET,allocator<myMET> >::iterator*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMETcOallocatorlEmyMETgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<myMET,allocator<myMET> >::iterator G__TvectorlEmyMETcOallocatorlEmyMETgRsPgRcLcLiterator;
static int G__eventdict_486_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<myMET,allocator<myMET> >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<myMET,allocator<myMET> >::iterator*) (soff+(sizeof(vector<myMET,allocator<myMET> >::iterator)*i)))->~G__TvectorlEmyMETcOallocatorlEmyMETgRsPgRcLcLiterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<myMET,allocator<myMET> >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<myMET,allocator<myMET> >::iterator*) (soff))->~G__TvectorlEmyMETcOallocatorlEmyMETgRsPgRcLcLiterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<myVertex,allocator<myVertex> > */
static int G__eventdict_489_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myVertex,allocator<myVertex> >::reference obj = ((vector<myVertex,allocator<myVertex> >*) G__getstructoffset())->at((vector<myVertex,allocator<myVertex> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_489_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<myVertex,allocator<myVertex> >::const_reference obj = ((const vector<myVertex,allocator<myVertex> >*) G__getstructoffset())->at((vector<myVertex,allocator<myVertex> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_489_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<myVertex,allocator<myVertex> >::iterator* pobj;
         vector<myVertex,allocator<myVertex> >::iterator xobj = ((vector<myVertex,allocator<myVertex> >*) G__getstructoffset())->begin();
         pobj = new vector<myVertex,allocator<myVertex> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_489_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<myVertex,allocator<myVertex> >::iterator* pobj;
         vector<myVertex,allocator<myVertex> >::iterator xobj = ((vector<myVertex,allocator<myVertex> >*) G__getstructoffset())->end();
         pobj = new vector<myVertex,allocator<myVertex> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_489_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<myVertex,allocator<myVertex> >::reverse_iterator* pobj;
         vector<myVertex,allocator<myVertex> >::reverse_iterator xobj = ((vector<myVertex,allocator<myVertex> >*) G__getstructoffset())->rbegin();
         pobj = new vector<myVertex,allocator<myVertex> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_489_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<myVertex,allocator<myVertex> >::reverse_iterator* pobj;
         vector<myVertex,allocator<myVertex> >::reverse_iterator xobj = ((vector<myVertex,allocator<myVertex> >*) G__getstructoffset())->rend();
         pobj = new vector<myVertex,allocator<myVertex> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_489_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<myVertex,allocator<myVertex> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_489_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<myVertex,allocator<myVertex> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_489_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<myVertex,allocator<myVertex> >*) G__getstructoffset())->resize((vector<myVertex,allocator<myVertex> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_489_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<myVertex,allocator<myVertex> >*) G__getstructoffset())->resize((vector<myVertex,allocator<myVertex> >::size_type) G__int(libp->para[0]), *((myVertex*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_489_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<myVertex,allocator<myVertex> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_489_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<myVertex,allocator<myVertex> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_489_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myVertex,allocator<myVertex> >::reference obj = ((vector<myVertex,allocator<myVertex> >*) G__getstructoffset())->operator[]((vector<myVertex,allocator<myVertex> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_489_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<myVertex,allocator<myVertex> >::const_reference obj = ((const vector<myVertex,allocator<myVertex> >*) G__getstructoffset())->operator[]((vector<myVertex,allocator<myVertex> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_489_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<myVertex,allocator<myVertex> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<myVertex,allocator<myVertex> >[n];
     } else {
       p = new((void*) gvp) vector<myVertex,allocator<myVertex> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<myVertex,allocator<myVertex> >;
     } else {
       p = new((void*) gvp) vector<myVertex,allocator<myVertex> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyVertexcOallocatorlEmyVertexgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_489_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<myVertex,allocator<myVertex> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<myVertex,allocator<myVertex> >((vector<myVertex,allocator<myVertex> >::size_type) G__int(libp->para[0]), *(myVertex*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<myVertex,allocator<myVertex> >((vector<myVertex,allocator<myVertex> >::size_type) G__int(libp->para[0]), *(myVertex*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<myVertex,allocator<myVertex> >((vector<myVertex,allocator<myVertex> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<myVertex,allocator<myVertex> >((vector<myVertex,allocator<myVertex> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyVertexcOallocatorlEmyVertexgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_489_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<myVertex,allocator<myVertex> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<myVertex,allocator<myVertex> >(*(vector<myVertex,allocator<myVertex> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<myVertex,allocator<myVertex> >(*(vector<myVertex,allocator<myVertex> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyVertexcOallocatorlEmyVertexgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_489_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<myVertex,allocator<myVertex> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<myVertex,allocator<myVertex> >(*((vector<myVertex,allocator<myVertex> >::const_iterator*) G__int(libp->para[0])), *((vector<myVertex,allocator<myVertex> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<myVertex,allocator<myVertex> >(*((vector<myVertex,allocator<myVertex> >::const_iterator*) G__int(libp->para[0])), *((vector<myVertex,allocator<myVertex> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyVertexcOallocatorlEmyVertexgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_489_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myVertex,allocator<myVertex> >& obj = ((vector<myVertex,allocator<myVertex> >*) G__getstructoffset())->operator=(*(vector<myVertex,allocator<myVertex> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_489_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<myVertex,allocator<myVertex> >*) G__getstructoffset())->reserve((vector<myVertex,allocator<myVertex> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_489_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const myVertex& obj = ((vector<myVertex,allocator<myVertex> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_489_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const myVertex& obj = ((vector<myVertex,allocator<myVertex> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_489_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<myVertex,allocator<myVertex> >*) G__getstructoffset())->push_back(*(myVertex*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_489_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<myVertex,allocator<myVertex> >*) G__getstructoffset())->swap(*(vector<myVertex,allocator<myVertex> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_489_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<myVertex,allocator<myVertex> >::iterator* pobj;
         vector<myVertex,allocator<myVertex> >::iterator xobj = ((vector<myVertex,allocator<myVertex> >*) G__getstructoffset())->insert(*((vector<myVertex,allocator<myVertex> >::iterator*) G__int(libp->para[0])), *(myVertex*) libp->para[1].ref);
         pobj = new vector<myVertex,allocator<myVertex> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_489_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<myVertex,allocator<myVertex> >*) G__getstructoffset())->insert(*((vector<myVertex,allocator<myVertex> >::iterator*) G__int(libp->para[0])), *((vector<myVertex,allocator<myVertex> >::const_iterator*) G__int(libp->para[1]))
, *((vector<myVertex,allocator<myVertex> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_489_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<myVertex,allocator<myVertex> >*) G__getstructoffset())->insert(*((vector<myVertex,allocator<myVertex> >::iterator*) G__int(libp->para[0])), (vector<myVertex,allocator<myVertex> >::size_type) G__int(libp->para[1])
, *(myVertex*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_489_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<myVertex,allocator<myVertex> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_489_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<myVertex,allocator<myVertex> >*) G__getstructoffset())->erase(*((vector<myVertex,allocator<myVertex> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_489_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<myVertex,allocator<myVertex> >*) G__getstructoffset())->erase(*((vector<myVertex,allocator<myVertex> >::iterator*) G__int(libp->para[0])), *((vector<myVertex,allocator<myVertex> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_489_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<myVertex,allocator<myVertex> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<myVertex,allocator<myVertex> > G__TvectorlEmyVertexcOallocatorlEmyVertexgRsPgR;
static int G__eventdict_489_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<myVertex,allocator<myVertex> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<myVertex,allocator<myVertex> >*) (soff+(sizeof(vector<myVertex,allocator<myVertex> >)*i)))->~G__TvectorlEmyVertexcOallocatorlEmyVertexgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<myVertex,allocator<myVertex> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<myVertex,allocator<myVertex> >*) (soff))->~G__TvectorlEmyVertexcOallocatorlEmyVertexgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<myVertex,allocator<myVertex> >::iterator */
static int G__eventdict_490_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<myVertex,allocator<myVertex> >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<myVertex,allocator<myVertex> >::iterator[n];
     } else {
       p = new((void*) gvp) vector<myVertex,allocator<myVertex> >::iterator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<myVertex,allocator<myVertex> >::iterator;
     } else {
       p = new((void*) gvp) vector<myVertex,allocator<myVertex> >::iterator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyVertexcOallocatorlEmyVertexgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_490_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<myVertex,allocator<myVertex> >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<myVertex,allocator<myVertex> >::iterator(libp->para[0].ref ? *(const vector<myVertex,allocator<myVertex> >::iterator::pointer*) libp->para[0].ref : *(const vector<myVertex,allocator<myVertex> >::iterator::pointer*) (void*) (&G__Mlong(libp->para[0])));
   } else {
     p = new((void*) gvp) vector<myVertex,allocator<myVertex> >::iterator(libp->para[0].ref ? *(const vector<myVertex,allocator<myVertex> >::iterator::pointer*) libp->para[0].ref : *(const vector<myVertex,allocator<myVertex> >::iterator::pointer*) (void*) (&G__Mlong(libp->para[0])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyVertexcOallocatorlEmyVertexgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_490_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myVertex,allocator<myVertex> >::iterator::reference obj = ((const vector<myVertex,allocator<myVertex> >::iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_490_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const vector<myVertex,allocator<myVertex> >::iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_490_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myVertex,allocator<myVertex> >::iterator& obj = ((vector<myVertex,allocator<myVertex> >::iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_490_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<myVertex,allocator<myVertex> >::iterator* pobj;
         vector<myVertex,allocator<myVertex> >::iterator xobj = ((vector<myVertex,allocator<myVertex> >::iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new vector<myVertex,allocator<myVertex> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_490_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myVertex,allocator<myVertex> >::iterator& obj = ((vector<myVertex,allocator<myVertex> >::iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_490_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<myVertex,allocator<myVertex> >::iterator* pobj;
         vector<myVertex,allocator<myVertex> >::iterator xobj = ((vector<myVertex,allocator<myVertex> >::iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new vector<myVertex,allocator<myVertex> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_490_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myVertex,allocator<myVertex> >::iterator::reference obj = ((const vector<myVertex,allocator<myVertex> >::iterator*) G__getstructoffset())->operator[](*(vector<myVertex,allocator<myVertex> >::iterator::difference_type*) G__Longref(&libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_490_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myVertex,allocator<myVertex> >::iterator& obj = ((vector<myVertex,allocator<myVertex> >::iterator*) G__getstructoffset())->operator+=(*(vector<myVertex,allocator<myVertex> >::iterator::difference_type*) G__Longref(&libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_490_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myVertex,allocator<myVertex> >::iterator* pobj;
         const vector<myVertex,allocator<myVertex> >::iterator xobj = ((const vector<myVertex,allocator<myVertex> >::iterator*) G__getstructoffset())->operator+(*(vector<myVertex,allocator<myVertex> >::iterator::difference_type*) G__Longref(&libp->para[0]));
         pobj = new vector<myVertex,allocator<myVertex> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_490_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myVertex,allocator<myVertex> >::iterator& obj = ((vector<myVertex,allocator<myVertex> >::iterator*) G__getstructoffset())->operator-=(*(vector<myVertex,allocator<myVertex> >::iterator::difference_type*) G__Longref(&libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_490_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myVertex,allocator<myVertex> >::iterator* pobj;
         const vector<myVertex,allocator<myVertex> >::iterator xobj = ((const vector<myVertex,allocator<myVertex> >::iterator*) G__getstructoffset())->operator-(*(vector<myVertex,allocator<myVertex> >::iterator::difference_type*) G__Longref(&libp->para[0]));
         pobj = new vector<myVertex,allocator<myVertex> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_490_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myVertex,allocator<myVertex> >::iterator::pointer& obj = ((const vector<myVertex,allocator<myVertex> >::iterator*) G__getstructoffset())->base();
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_490_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<myVertex,allocator<myVertex> >::iterator* pobj;
         vector<myVertex,allocator<myVertex> >::iterator xobj = ((vector<myVertex,allocator<myVertex> >::iterator*) G__getstructoffset())->operator=(*(vector<myVertex,allocator<myVertex> >::iterator*) libp->para[0].ref);
         pobj = new vector<myVertex,allocator<myVertex> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_490_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   vector<myVertex,allocator<myVertex> >::iterator* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new vector<myVertex,allocator<myVertex> >::iterator(*(vector<myVertex,allocator<myVertex> >::iterator*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyVertexcOallocatorlEmyVertexgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<myVertex,allocator<myVertex> >::iterator G__TvectorlEmyVertexcOallocatorlEmyVertexgRsPgRcLcLiterator;
static int G__eventdict_490_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<myVertex,allocator<myVertex> >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<myVertex,allocator<myVertex> >::iterator*) (soff+(sizeof(vector<myVertex,allocator<myVertex> >::iterator)*i)))->~G__TvectorlEmyVertexcOallocatorlEmyVertexgRsPgRcLcLiterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<myVertex,allocator<myVertex> >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<myVertex,allocator<myVertex> >::iterator*) (soff))->~G__TvectorlEmyVertexcOallocatorlEmyVertexgRsPgRcLcLiterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<mySV,allocator<mySV> > */
static int G__eventdict_493_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<mySV,allocator<mySV> >::reference obj = ((vector<mySV,allocator<mySV> >*) G__getstructoffset())->at((vector<mySV,allocator<mySV> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_493_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<mySV,allocator<mySV> >::const_reference obj = ((const vector<mySV,allocator<mySV> >*) G__getstructoffset())->at((vector<mySV,allocator<mySV> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_493_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<mySV,allocator<mySV> >::iterator* pobj;
         vector<mySV,allocator<mySV> >::iterator xobj = ((vector<mySV,allocator<mySV> >*) G__getstructoffset())->begin();
         pobj = new vector<mySV,allocator<mySV> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_493_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<mySV,allocator<mySV> >::iterator* pobj;
         vector<mySV,allocator<mySV> >::iterator xobj = ((vector<mySV,allocator<mySV> >*) G__getstructoffset())->end();
         pobj = new vector<mySV,allocator<mySV> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_493_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<mySV,allocator<mySV> >::reverse_iterator* pobj;
         vector<mySV,allocator<mySV> >::reverse_iterator xobj = ((vector<mySV,allocator<mySV> >*) G__getstructoffset())->rbegin();
         pobj = new vector<mySV,allocator<mySV> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_493_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<mySV,allocator<mySV> >::reverse_iterator* pobj;
         vector<mySV,allocator<mySV> >::reverse_iterator xobj = ((vector<mySV,allocator<mySV> >*) G__getstructoffset())->rend();
         pobj = new vector<mySV,allocator<mySV> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_493_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<mySV,allocator<mySV> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_493_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<mySV,allocator<mySV> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_493_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<mySV,allocator<mySV> >*) G__getstructoffset())->resize((vector<mySV,allocator<mySV> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_493_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<mySV,allocator<mySV> >*) G__getstructoffset())->resize((vector<mySV,allocator<mySV> >::size_type) G__int(libp->para[0]), *((mySV*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_493_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<mySV,allocator<mySV> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_493_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<mySV,allocator<mySV> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_493_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<mySV,allocator<mySV> >::reference obj = ((vector<mySV,allocator<mySV> >*) G__getstructoffset())->operator[]((vector<mySV,allocator<mySV> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_493_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<mySV,allocator<mySV> >::const_reference obj = ((const vector<mySV,allocator<mySV> >*) G__getstructoffset())->operator[]((vector<mySV,allocator<mySV> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_493_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<mySV,allocator<mySV> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<mySV,allocator<mySV> >[n];
     } else {
       p = new((void*) gvp) vector<mySV,allocator<mySV> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<mySV,allocator<mySV> >;
     } else {
       p = new((void*) gvp) vector<mySV,allocator<mySV> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEmySVcOallocatorlEmySVgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_493_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<mySV,allocator<mySV> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<mySV,allocator<mySV> >((vector<mySV,allocator<mySV> >::size_type) G__int(libp->para[0]), *(mySV*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<mySV,allocator<mySV> >((vector<mySV,allocator<mySV> >::size_type) G__int(libp->para[0]), *(mySV*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<mySV,allocator<mySV> >((vector<mySV,allocator<mySV> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<mySV,allocator<mySV> >((vector<mySV,allocator<mySV> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEmySVcOallocatorlEmySVgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_493_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<mySV,allocator<mySV> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<mySV,allocator<mySV> >(*(vector<mySV,allocator<mySV> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<mySV,allocator<mySV> >(*(vector<mySV,allocator<mySV> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEmySVcOallocatorlEmySVgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_493_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<mySV,allocator<mySV> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<mySV,allocator<mySV> >(*((vector<mySV,allocator<mySV> >::const_iterator*) G__int(libp->para[0])), *((vector<mySV,allocator<mySV> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<mySV,allocator<mySV> >(*((vector<mySV,allocator<mySV> >::const_iterator*) G__int(libp->para[0])), *((vector<mySV,allocator<mySV> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEmySVcOallocatorlEmySVgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_493_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<mySV,allocator<mySV> >& obj = ((vector<mySV,allocator<mySV> >*) G__getstructoffset())->operator=(*(vector<mySV,allocator<mySV> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_493_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<mySV,allocator<mySV> >*) G__getstructoffset())->reserve((vector<mySV,allocator<mySV> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_493_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const mySV& obj = ((vector<mySV,allocator<mySV> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_493_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const mySV& obj = ((vector<mySV,allocator<mySV> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_493_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<mySV,allocator<mySV> >*) G__getstructoffset())->push_back(*(mySV*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_493_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<mySV,allocator<mySV> >*) G__getstructoffset())->swap(*(vector<mySV,allocator<mySV> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_493_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<mySV,allocator<mySV> >::iterator* pobj;
         vector<mySV,allocator<mySV> >::iterator xobj = ((vector<mySV,allocator<mySV> >*) G__getstructoffset())->insert(*((vector<mySV,allocator<mySV> >::iterator*) G__int(libp->para[0])), *(mySV*) libp->para[1].ref);
         pobj = new vector<mySV,allocator<mySV> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_493_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<mySV,allocator<mySV> >*) G__getstructoffset())->insert(*((vector<mySV,allocator<mySV> >::iterator*) G__int(libp->para[0])), *((vector<mySV,allocator<mySV> >::const_iterator*) G__int(libp->para[1]))
, *((vector<mySV,allocator<mySV> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_493_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<mySV,allocator<mySV> >*) G__getstructoffset())->insert(*((vector<mySV,allocator<mySV> >::iterator*) G__int(libp->para[0])), (vector<mySV,allocator<mySV> >::size_type) G__int(libp->para[1])
, *(mySV*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_493_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<mySV,allocator<mySV> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_493_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<mySV,allocator<mySV> >*) G__getstructoffset())->erase(*((vector<mySV,allocator<mySV> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_493_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<mySV,allocator<mySV> >*) G__getstructoffset())->erase(*((vector<mySV,allocator<mySV> >::iterator*) G__int(libp->para[0])), *((vector<mySV,allocator<mySV> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_493_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<mySV,allocator<mySV> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<mySV,allocator<mySV> > G__TvectorlEmySVcOallocatorlEmySVgRsPgR;
static int G__eventdict_493_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<mySV,allocator<mySV> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<mySV,allocator<mySV> >*) (soff+(sizeof(vector<mySV,allocator<mySV> >)*i)))->~G__TvectorlEmySVcOallocatorlEmySVgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<mySV,allocator<mySV> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<mySV,allocator<mySV> >*) (soff))->~G__TvectorlEmySVcOallocatorlEmySVgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<mySV,allocator<mySV> >::iterator */
static int G__eventdict_494_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<mySV,allocator<mySV> >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<mySV,allocator<mySV> >::iterator[n];
     } else {
       p = new((void*) gvp) vector<mySV,allocator<mySV> >::iterator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<mySV,allocator<mySV> >::iterator;
     } else {
       p = new((void*) gvp) vector<mySV,allocator<mySV> >::iterator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEmySVcOallocatorlEmySVgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_494_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<mySV,allocator<mySV> >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<mySV,allocator<mySV> >::iterator(libp->para[0].ref ? *(const vector<mySV,allocator<mySV> >::iterator::pointer*) libp->para[0].ref : *(const vector<mySV,allocator<mySV> >::iterator::pointer*) (void*) (&G__Mlong(libp->para[0])));
   } else {
     p = new((void*) gvp) vector<mySV,allocator<mySV> >::iterator(libp->para[0].ref ? *(const vector<mySV,allocator<mySV> >::iterator::pointer*) libp->para[0].ref : *(const vector<mySV,allocator<mySV> >::iterator::pointer*) (void*) (&G__Mlong(libp->para[0])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEmySVcOallocatorlEmySVgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_494_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<mySV,allocator<mySV> >::iterator::reference obj = ((const vector<mySV,allocator<mySV> >::iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_494_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const vector<mySV,allocator<mySV> >::iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_494_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<mySV,allocator<mySV> >::iterator& obj = ((vector<mySV,allocator<mySV> >::iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_494_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<mySV,allocator<mySV> >::iterator* pobj;
         vector<mySV,allocator<mySV> >::iterator xobj = ((vector<mySV,allocator<mySV> >::iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new vector<mySV,allocator<mySV> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_494_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<mySV,allocator<mySV> >::iterator& obj = ((vector<mySV,allocator<mySV> >::iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_494_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<mySV,allocator<mySV> >::iterator* pobj;
         vector<mySV,allocator<mySV> >::iterator xobj = ((vector<mySV,allocator<mySV> >::iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new vector<mySV,allocator<mySV> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_494_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<mySV,allocator<mySV> >::iterator::reference obj = ((const vector<mySV,allocator<mySV> >::iterator*) G__getstructoffset())->operator[](*(vector<mySV,allocator<mySV> >::iterator::difference_type*) G__Longref(&libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_494_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<mySV,allocator<mySV> >::iterator& obj = ((vector<mySV,allocator<mySV> >::iterator*) G__getstructoffset())->operator+=(*(vector<mySV,allocator<mySV> >::iterator::difference_type*) G__Longref(&libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_494_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<mySV,allocator<mySV> >::iterator* pobj;
         const vector<mySV,allocator<mySV> >::iterator xobj = ((const vector<mySV,allocator<mySV> >::iterator*) G__getstructoffset())->operator+(*(vector<mySV,allocator<mySV> >::iterator::difference_type*) G__Longref(&libp->para[0]));
         pobj = new vector<mySV,allocator<mySV> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_494_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<mySV,allocator<mySV> >::iterator& obj = ((vector<mySV,allocator<mySV> >::iterator*) G__getstructoffset())->operator-=(*(vector<mySV,allocator<mySV> >::iterator::difference_type*) G__Longref(&libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_494_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<mySV,allocator<mySV> >::iterator* pobj;
         const vector<mySV,allocator<mySV> >::iterator xobj = ((const vector<mySV,allocator<mySV> >::iterator*) G__getstructoffset())->operator-(*(vector<mySV,allocator<mySV> >::iterator::difference_type*) G__Longref(&libp->para[0]));
         pobj = new vector<mySV,allocator<mySV> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_494_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<mySV,allocator<mySV> >::iterator::pointer& obj = ((const vector<mySV,allocator<mySV> >::iterator*) G__getstructoffset())->base();
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_494_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<mySV,allocator<mySV> >::iterator* pobj;
         vector<mySV,allocator<mySV> >::iterator xobj = ((vector<mySV,allocator<mySV> >::iterator*) G__getstructoffset())->operator=(*(vector<mySV,allocator<mySV> >::iterator*) libp->para[0].ref);
         pobj = new vector<mySV,allocator<mySV> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_494_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   vector<mySV,allocator<mySV> >::iterator* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new vector<mySV,allocator<mySV> >::iterator(*(vector<mySV,allocator<mySV> >::iterator*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEmySVcOallocatorlEmySVgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<mySV,allocator<mySV> >::iterator G__TvectorlEmySVcOallocatorlEmySVgRsPgRcLcLiterator;
static int G__eventdict_494_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<mySV,allocator<mySV> >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<mySV,allocator<mySV> >::iterator*) (soff+(sizeof(vector<mySV,allocator<mySV> >::iterator)*i)))->~G__TvectorlEmySVcOallocatorlEmySVgRsPgRcLcLiterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<mySV,allocator<mySV> >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<mySV,allocator<mySV> >::iterator*) (soff))->~G__TvectorlEmySVcOallocatorlEmySVgRsPgRcLcLiterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */
static int G__eventdict__0_1751(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(vector<myGenObject,allocator<myGenObject> >::iterator*) libp->para[0].ref, *(vector<myGenObject,allocator<myGenObject> >::iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict__0_1752(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(vector<myGenObject,allocator<myGenObject> >::iterator*) libp->para[0].ref, *(vector<myGenObject,allocator<myGenObject> >::iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict__0_1753(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<(*(vector<myGenObject,allocator<myGenObject> >::iterator*) libp->para[0].ref, *(vector<myGenObject,allocator<myGenObject> >::iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict__0_1754(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>(*(vector<myGenObject,allocator<myGenObject> >::iterator*) libp->para[0].ref, *(vector<myGenObject,allocator<myGenObject> >::iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict__0_1755(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<=(*(vector<myGenObject,allocator<myGenObject> >::iterator*) libp->para[0].ref, *(vector<myGenObject,allocator<myGenObject> >::iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict__0_1756(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>=(*(vector<myGenObject,allocator<myGenObject> >::iterator*) libp->para[0].ref, *(vector<myGenObject,allocator<myGenObject> >::iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict__0_1757(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 108, (long) operator-(*(vector<myGenObject,allocator<myGenObject> >::iterator*) libp->para[0].ref, *(vector<myGenObject,allocator<myGenObject> >::iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict__0_1758(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myGenObject,allocator<myGenObject> >::iterator* pobj;
         const vector<myGenObject,allocator<myGenObject> >::iterator xobj = operator+((const vector<myGenObject,allocator<myGenObject> >::iterator::difference_type) G__int(libp->para[0]), *(vector<myGenObject,allocator<myGenObject> >::iterator*) libp->para[1].ref);
         pobj = new vector<myGenObject,allocator<myGenObject> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict__0_1819(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(vector<myTriggerObject,allocator<myTriggerObject> >::iterator*) libp->para[0].ref, *(vector<myTriggerObject,allocator<myTriggerObject> >::iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict__0_1820(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(vector<myTriggerObject,allocator<myTriggerObject> >::iterator*) libp->para[0].ref, *(vector<myTriggerObject,allocator<myTriggerObject> >::iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict__0_1821(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<(*(vector<myTriggerObject,allocator<myTriggerObject> >::iterator*) libp->para[0].ref, *(vector<myTriggerObject,allocator<myTriggerObject> >::iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict__0_1822(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>(*(vector<myTriggerObject,allocator<myTriggerObject> >::iterator*) libp->para[0].ref, *(vector<myTriggerObject,allocator<myTriggerObject> >::iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict__0_1823(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<=(*(vector<myTriggerObject,allocator<myTriggerObject> >::iterator*) libp->para[0].ref, *(vector<myTriggerObject,allocator<myTriggerObject> >::iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict__0_1824(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>=(*(vector<myTriggerObject,allocator<myTriggerObject> >::iterator*) libp->para[0].ref, *(vector<myTriggerObject,allocator<myTriggerObject> >::iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict__0_1825(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 108, (long) operator-(*(vector<myTriggerObject,allocator<myTriggerObject> >::iterator*) libp->para[0].ref, *(vector<myTriggerObject,allocator<myTriggerObject> >::iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict__0_1826(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myTriggerObject,allocator<myTriggerObject> >::iterator* pobj;
         const vector<myTriggerObject,allocator<myTriggerObject> >::iterator xobj = operator+((const vector<myTriggerObject,allocator<myTriggerObject> >::iterator::difference_type) G__int(libp->para[0]), *(vector<myTriggerObject,allocator<myTriggerObject> >::iterator*) libp->para[1].ref);
         pobj = new vector<myTriggerObject,allocator<myTriggerObject> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict__0_1887(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(vector<myJet,allocator<myJet> >::iterator*) libp->para[0].ref, *(vector<myJet,allocator<myJet> >::iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict__0_1888(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(vector<myJet,allocator<myJet> >::iterator*) libp->para[0].ref, *(vector<myJet,allocator<myJet> >::iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict__0_1889(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<(*(vector<myJet,allocator<myJet> >::iterator*) libp->para[0].ref, *(vector<myJet,allocator<myJet> >::iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict__0_1890(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>(*(vector<myJet,allocator<myJet> >::iterator*) libp->para[0].ref, *(vector<myJet,allocator<myJet> >::iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict__0_1891(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<=(*(vector<myJet,allocator<myJet> >::iterator*) libp->para[0].ref, *(vector<myJet,allocator<myJet> >::iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict__0_1892(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>=(*(vector<myJet,allocator<myJet> >::iterator*) libp->para[0].ref, *(vector<myJet,allocator<myJet> >::iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict__0_1893(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 108, (long) operator-(*(vector<myJet,allocator<myJet> >::iterator*) libp->para[0].ref, *(vector<myJet,allocator<myJet> >::iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict__0_1894(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myJet,allocator<myJet> >::iterator* pobj;
         const vector<myJet,allocator<myJet> >::iterator xobj = operator+((const vector<myJet,allocator<myJet> >::iterator::difference_type) G__int(libp->para[0]), *(vector<myJet,allocator<myJet> >::iterator*) libp->para[1].ref);
         pobj = new vector<myJet,allocator<myJet> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict__0_1955(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(vector<myElectron,allocator<myElectron> >::iterator*) libp->para[0].ref, *(vector<myElectron,allocator<myElectron> >::iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict__0_1956(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(vector<myElectron,allocator<myElectron> >::iterator*) libp->para[0].ref, *(vector<myElectron,allocator<myElectron> >::iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict__0_1957(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<(*(vector<myElectron,allocator<myElectron> >::iterator*) libp->para[0].ref, *(vector<myElectron,allocator<myElectron> >::iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict__0_1958(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>(*(vector<myElectron,allocator<myElectron> >::iterator*) libp->para[0].ref, *(vector<myElectron,allocator<myElectron> >::iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict__0_1959(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<=(*(vector<myElectron,allocator<myElectron> >::iterator*) libp->para[0].ref, *(vector<myElectron,allocator<myElectron> >::iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict__0_1960(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>=(*(vector<myElectron,allocator<myElectron> >::iterator*) libp->para[0].ref, *(vector<myElectron,allocator<myElectron> >::iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict__0_1961(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 108, (long) operator-(*(vector<myElectron,allocator<myElectron> >::iterator*) libp->para[0].ref, *(vector<myElectron,allocator<myElectron> >::iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict__0_1962(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myElectron,allocator<myElectron> >::iterator* pobj;
         const vector<myElectron,allocator<myElectron> >::iterator xobj = operator+((const vector<myElectron,allocator<myElectron> >::iterator::difference_type) G__int(libp->para[0]), *(vector<myElectron,allocator<myElectron> >::iterator*) libp->para[1].ref);
         pobj = new vector<myElectron,allocator<myElectron> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict__0_2023(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(vector<myMuon,allocator<myMuon> >::iterator*) libp->para[0].ref, *(vector<myMuon,allocator<myMuon> >::iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict__0_2024(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(vector<myMuon,allocator<myMuon> >::iterator*) libp->para[0].ref, *(vector<myMuon,allocator<myMuon> >::iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict__0_2025(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<(*(vector<myMuon,allocator<myMuon> >::iterator*) libp->para[0].ref, *(vector<myMuon,allocator<myMuon> >::iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict__0_2026(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>(*(vector<myMuon,allocator<myMuon> >::iterator*) libp->para[0].ref, *(vector<myMuon,allocator<myMuon> >::iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict__0_2027(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<=(*(vector<myMuon,allocator<myMuon> >::iterator*) libp->para[0].ref, *(vector<myMuon,allocator<myMuon> >::iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict__0_2028(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>=(*(vector<myMuon,allocator<myMuon> >::iterator*) libp->para[0].ref, *(vector<myMuon,allocator<myMuon> >::iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict__0_2029(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 108, (long) operator-(*(vector<myMuon,allocator<myMuon> >::iterator*) libp->para[0].ref, *(vector<myMuon,allocator<myMuon> >::iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict__0_2030(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myMuon,allocator<myMuon> >::iterator* pobj;
         const vector<myMuon,allocator<myMuon> >::iterator xobj = operator+((const vector<myMuon,allocator<myMuon> >::iterator::difference_type) G__int(libp->para[0]), *(vector<myMuon,allocator<myMuon> >::iterator*) libp->para[1].ref);
         pobj = new vector<myMuon,allocator<myMuon> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict__0_2091(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(vector<myTau,allocator<myTau> >::iterator*) libp->para[0].ref, *(vector<myTau,allocator<myTau> >::iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict__0_2092(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(vector<myTau,allocator<myTau> >::iterator*) libp->para[0].ref, *(vector<myTau,allocator<myTau> >::iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict__0_2093(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<(*(vector<myTau,allocator<myTau> >::iterator*) libp->para[0].ref, *(vector<myTau,allocator<myTau> >::iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict__0_2094(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>(*(vector<myTau,allocator<myTau> >::iterator*) libp->para[0].ref, *(vector<myTau,allocator<myTau> >::iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict__0_2095(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<=(*(vector<myTau,allocator<myTau> >::iterator*) libp->para[0].ref, *(vector<myTau,allocator<myTau> >::iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict__0_2096(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>=(*(vector<myTau,allocator<myTau> >::iterator*) libp->para[0].ref, *(vector<myTau,allocator<myTau> >::iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict__0_2097(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 108, (long) operator-(*(vector<myTau,allocator<myTau> >::iterator*) libp->para[0].ref, *(vector<myTau,allocator<myTau> >::iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict__0_2098(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myTau,allocator<myTau> >::iterator* pobj;
         const vector<myTau,allocator<myTau> >::iterator xobj = operator+((const vector<myTau,allocator<myTau> >::iterator::difference_type) G__int(libp->para[0]), *(vector<myTau,allocator<myTau> >::iterator*) libp->para[1].ref);
         pobj = new vector<myTau,allocator<myTau> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict__0_2159(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(vector<myMET,allocator<myMET> >::iterator*) libp->para[0].ref, *(vector<myMET,allocator<myMET> >::iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict__0_2160(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(vector<myMET,allocator<myMET> >::iterator*) libp->para[0].ref, *(vector<myMET,allocator<myMET> >::iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict__0_2161(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<(*(vector<myMET,allocator<myMET> >::iterator*) libp->para[0].ref, *(vector<myMET,allocator<myMET> >::iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict__0_2162(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>(*(vector<myMET,allocator<myMET> >::iterator*) libp->para[0].ref, *(vector<myMET,allocator<myMET> >::iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict__0_2163(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<=(*(vector<myMET,allocator<myMET> >::iterator*) libp->para[0].ref, *(vector<myMET,allocator<myMET> >::iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict__0_2164(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>=(*(vector<myMET,allocator<myMET> >::iterator*) libp->para[0].ref, *(vector<myMET,allocator<myMET> >::iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict__0_2165(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 108, (long) operator-(*(vector<myMET,allocator<myMET> >::iterator*) libp->para[0].ref, *(vector<myMET,allocator<myMET> >::iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict__0_2166(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myMET,allocator<myMET> >::iterator* pobj;
         const vector<myMET,allocator<myMET> >::iterator xobj = operator+((const vector<myMET,allocator<myMET> >::iterator::difference_type) G__int(libp->para[0]), *(vector<myMET,allocator<myMET> >::iterator*) libp->para[1].ref);
         pobj = new vector<myMET,allocator<myMET> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict__0_2227(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(vector<myVertex,allocator<myVertex> >::iterator*) libp->para[0].ref, *(vector<myVertex,allocator<myVertex> >::iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict__0_2228(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(vector<myVertex,allocator<myVertex> >::iterator*) libp->para[0].ref, *(vector<myVertex,allocator<myVertex> >::iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict__0_2229(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<(*(vector<myVertex,allocator<myVertex> >::iterator*) libp->para[0].ref, *(vector<myVertex,allocator<myVertex> >::iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict__0_2230(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>(*(vector<myVertex,allocator<myVertex> >::iterator*) libp->para[0].ref, *(vector<myVertex,allocator<myVertex> >::iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict__0_2231(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<=(*(vector<myVertex,allocator<myVertex> >::iterator*) libp->para[0].ref, *(vector<myVertex,allocator<myVertex> >::iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict__0_2232(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>=(*(vector<myVertex,allocator<myVertex> >::iterator*) libp->para[0].ref, *(vector<myVertex,allocator<myVertex> >::iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict__0_2233(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 108, (long) operator-(*(vector<myVertex,allocator<myVertex> >::iterator*) libp->para[0].ref, *(vector<myVertex,allocator<myVertex> >::iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict__0_2234(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<myVertex,allocator<myVertex> >::iterator* pobj;
         const vector<myVertex,allocator<myVertex> >::iterator xobj = operator+((const vector<myVertex,allocator<myVertex> >::iterator::difference_type) G__int(libp->para[0]), *(vector<myVertex,allocator<myVertex> >::iterator*) libp->para[1].ref);
         pobj = new vector<myVertex,allocator<myVertex> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict__0_2295(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(vector<mySV,allocator<mySV> >::iterator*) libp->para[0].ref, *(vector<mySV,allocator<mySV> >::iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict__0_2296(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(vector<mySV,allocator<mySV> >::iterator*) libp->para[0].ref, *(vector<mySV,allocator<mySV> >::iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict__0_2297(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<(*(vector<mySV,allocator<mySV> >::iterator*) libp->para[0].ref, *(vector<mySV,allocator<mySV> >::iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict__0_2298(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>(*(vector<mySV,allocator<mySV> >::iterator*) libp->para[0].ref, *(vector<mySV,allocator<mySV> >::iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict__0_2299(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<=(*(vector<mySV,allocator<mySV> >::iterator*) libp->para[0].ref, *(vector<mySV,allocator<mySV> >::iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict__0_2300(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>=(*(vector<mySV,allocator<mySV> >::iterator*) libp->para[0].ref, *(vector<mySV,allocator<mySV> >::iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict__0_2301(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 108, (long) operator-(*(vector<mySV,allocator<mySV> >::iterator*) libp->para[0].ref, *(vector<mySV,allocator<mySV> >::iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict__0_2302(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<mySV,allocator<mySV> >::iterator* pobj;
         const vector<mySV,allocator<mySV> >::iterator xobj = operator+((const vector<mySV,allocator<mySV> >::iterator::difference_type) G__int(libp->para[0]), *(vector<mySV,allocator<mySV> >::iterator*) libp->para[1].ref);
         pobj = new vector<mySV,allocator<mySV> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}


/*********************************************************
* Member function Stub
*********************************************************/

/* myVertex */

/* myTriggerObject */

/* myGenObject */

/* myMuon */

/* myElectron */

/* myTau */

/* myJet */

/* myMET */

/* mySV */

/* myevent */

/* vector<myGenObject,allocator<myGenObject> > */

/* vector<myGenObject,allocator<myGenObject> >::iterator */

/* vector<myTriggerObject,allocator<myTriggerObject> > */

/* vector<myTriggerObject,allocator<myTriggerObject> >::iterator */

/* vector<myJet,allocator<myJet> > */

/* vector<myJet,allocator<myJet> >::iterator */

/* vector<myElectron,allocator<myElectron> > */

/* vector<myElectron,allocator<myElectron> >::iterator */

/* vector<myMuon,allocator<myMuon> > */

/* vector<myMuon,allocator<myMuon> >::iterator */

/* vector<myTau,allocator<myTau> > */

/* vector<myTau,allocator<myTau> >::iterator */

/* vector<myMET,allocator<myMET> > */

/* vector<myMET,allocator<myMET> >::iterator */

/* vector<myVertex,allocator<myVertex> > */

/* vector<myVertex,allocator<myVertex> >::iterator */

/* vector<mySV,allocator<mySV> > */

/* vector<mySV,allocator<mySV> >::iterator */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfunceventdict {
 public:
  G__Sizep2memfunceventdict(): p(&G__Sizep2memfunceventdict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfunceventdict::*p)();
};

size_t G__get_sizep2memfunceventdict()
{
  G__Sizep2memfunceventdict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceeventdict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__eventdictLN_myVertex))) {
     myVertex *G__Lderived;
     G__Lderived=(myVertex*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_myVertex),G__get_linked_tagnum(&G__eventdictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__eventdictLN_myTriggerObject))) {
     myTriggerObject *G__Lderived;
     G__Lderived=(myTriggerObject*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_myTriggerObject),G__get_linked_tagnum(&G__eventdictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__eventdictLN_myGenObject))) {
     myGenObject *G__Lderived;
     G__Lderived=(myGenObject*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_myGenObject),G__get_linked_tagnum(&G__eventdictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__eventdictLN_myMuon))) {
     myMuon *G__Lderived;
     G__Lderived=(myMuon*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_myMuon),G__get_linked_tagnum(&G__eventdictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__eventdictLN_myElectron))) {
     myElectron *G__Lderived;
     G__Lderived=(myElectron*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_myElectron),G__get_linked_tagnum(&G__eventdictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__eventdictLN_myTau))) {
     myTau *G__Lderived;
     G__Lderived=(myTau*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_myTau),G__get_linked_tagnum(&G__eventdictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__eventdictLN_myJet))) {
     myJet *G__Lderived;
     G__Lderived=(myJet*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_myJet),G__get_linked_tagnum(&G__eventdictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__eventdictLN_myMET))) {
     myMET *G__Lderived;
     G__Lderived=(myMET*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_myMET),G__get_linked_tagnum(&G__eventdictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__eventdictLN_mySV))) {
     mySV *G__Lderived;
     G__Lderived=(mySV*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_mySV),G__get_linked_tagnum(&G__eventdictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__eventdictLN_myevent))) {
     myevent *G__Lderived;
     G__Lderived=(myevent*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_myevent),G__get_linked_tagnum(&G__eventdictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableeventdict() {

   /* Setting up typedef entry */
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__eventdictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__eventdictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__eventdictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__eventdictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__eventdictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<myGenObject>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__eventdictLN_myGenObject),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__eventdictLN_myGenObject),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__eventdictLN_myGenObject),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__eventdictLN_myGenObject),1,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__eventdictLN_myGenObject),257,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__eventdictLN_myGenObject),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__eventdictLN_myGenObject),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__eventdictLN_myGenObject),1,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__eventdictLN_myGenObject),1,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<myTriggerObject>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__eventdictLN_myTriggerObject),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__eventdictLN_myTriggerObject),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__eventdictLN_myTriggerObject),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__eventdictLN_myTriggerObject),1,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__eventdictLN_myTriggerObject),257,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__eventdictLN_myTriggerObject),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__eventdictLN_myTriggerObject),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__eventdictLN_myTriggerObject),1,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__eventdictLN_myTriggerObject),1,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<myJet>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyJetcOallocatorlEmyJetgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__eventdictLN_myJet),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyJetcOallocatorlEmyJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__eventdictLN_myJet),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyJetcOallocatorlEmyJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__eventdictLN_myJet),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyJetcOallocatorlEmyJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__eventdictLN_myJet),1,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyJetcOallocatorlEmyJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__eventdictLN_myJet),257,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyJetcOallocatorlEmyJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyJetcOallocatorlEmyJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyJetcOallocatorlEmyJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__eventdictLN_myJet),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyJetcOallocatorlEmyJetgRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__eventdictLN_myJet),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyJetcOallocatorlEmyJetgRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__eventdictLN_myJet),1,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyJetcOallocatorlEmyJetgRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__eventdictLN_myJet),1,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyJetcOallocatorlEmyJetgRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyJetcOallocatorlEmyJetgRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyJetcOallocatorlEmyJetgRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyJetcOallocatorlEmyJetgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyJetcOallocatorlEmyJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEmyJetcOallocatorlEmyJetgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyJetcOallocatorlEmyJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEmyJetcOallocatorlEmyJetgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyJetcOallocatorlEmyJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEmyJetcOallocatorlEmyJetgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyJetcOallocatorlEmyJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEmyJetcOallocatorlEmyJetgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyJetcOallocatorlEmyJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<myElectron>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyElectroncOallocatorlEmyElectrongRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__eventdictLN_myElectron),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyElectroncOallocatorlEmyElectrongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__eventdictLN_myElectron),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyElectroncOallocatorlEmyElectrongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__eventdictLN_myElectron),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyElectroncOallocatorlEmyElectrongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__eventdictLN_myElectron),1,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyElectroncOallocatorlEmyElectrongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__eventdictLN_myElectron),257,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyElectroncOallocatorlEmyElectrongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyElectroncOallocatorlEmyElectrongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyElectroncOallocatorlEmyElectrongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__eventdictLN_myElectron),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyElectroncOallocatorlEmyElectrongRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__eventdictLN_myElectron),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyElectroncOallocatorlEmyElectrongRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__eventdictLN_myElectron),1,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyElectroncOallocatorlEmyElectrongRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__eventdictLN_myElectron),1,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyElectroncOallocatorlEmyElectrongRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyElectroncOallocatorlEmyElectrongRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyElectroncOallocatorlEmyElectrongRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyElectroncOallocatorlEmyElectrongRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyElectroncOallocatorlEmyElectrongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEmyElectroncOallocatorlEmyElectrongRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyElectroncOallocatorlEmyElectrongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEmyElectroncOallocatorlEmyElectrongRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyElectroncOallocatorlEmyElectrongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEmyElectroncOallocatorlEmyElectrongRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyElectroncOallocatorlEmyElectrongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEmyElectroncOallocatorlEmyElectrongRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyElectroncOallocatorlEmyElectrongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<myMuon>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMuoncOallocatorlEmyMuongRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__eventdictLN_myMuon),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMuoncOallocatorlEmyMuongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__eventdictLN_myMuon),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMuoncOallocatorlEmyMuongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__eventdictLN_myMuon),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMuoncOallocatorlEmyMuongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__eventdictLN_myMuon),1,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMuoncOallocatorlEmyMuongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__eventdictLN_myMuon),257,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMuoncOallocatorlEmyMuongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMuoncOallocatorlEmyMuongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMuoncOallocatorlEmyMuongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__eventdictLN_myMuon),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMuoncOallocatorlEmyMuongRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__eventdictLN_myMuon),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMuoncOallocatorlEmyMuongRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__eventdictLN_myMuon),1,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMuoncOallocatorlEmyMuongRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__eventdictLN_myMuon),1,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMuoncOallocatorlEmyMuongRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMuoncOallocatorlEmyMuongRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMuoncOallocatorlEmyMuongRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMuoncOallocatorlEmyMuongRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMuoncOallocatorlEmyMuongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEmyMuoncOallocatorlEmyMuongRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMuoncOallocatorlEmyMuongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEmyMuoncOallocatorlEmyMuongRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMuoncOallocatorlEmyMuongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEmyMuoncOallocatorlEmyMuongRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMuoncOallocatorlEmyMuongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEmyMuoncOallocatorlEmyMuongRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMuoncOallocatorlEmyMuongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<myTau>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTaucOallocatorlEmyTaugRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__eventdictLN_myTau),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTaucOallocatorlEmyTaugRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__eventdictLN_myTau),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTaucOallocatorlEmyTaugRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__eventdictLN_myTau),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTaucOallocatorlEmyTaugRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__eventdictLN_myTau),1,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTaucOallocatorlEmyTaugRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__eventdictLN_myTau),257,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTaucOallocatorlEmyTaugRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTaucOallocatorlEmyTaugRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTaucOallocatorlEmyTaugRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__eventdictLN_myTau),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTaucOallocatorlEmyTaugRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__eventdictLN_myTau),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTaucOallocatorlEmyTaugRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__eventdictLN_myTau),1,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTaucOallocatorlEmyTaugRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__eventdictLN_myTau),1,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTaucOallocatorlEmyTaugRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTaucOallocatorlEmyTaugRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTaucOallocatorlEmyTaugRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTaucOallocatorlEmyTaugRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTaucOallocatorlEmyTaugRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEmyTaucOallocatorlEmyTaugRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTaucOallocatorlEmyTaugRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEmyTaucOallocatorlEmyTaugRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTaucOallocatorlEmyTaugRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEmyTaucOallocatorlEmyTaugRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTaucOallocatorlEmyTaugRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEmyTaucOallocatorlEmyTaugRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTaucOallocatorlEmyTaugRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<myMET>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMETcOallocatorlEmyMETgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__eventdictLN_myMET),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMETcOallocatorlEmyMETgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__eventdictLN_myMET),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMETcOallocatorlEmyMETgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__eventdictLN_myMET),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMETcOallocatorlEmyMETgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__eventdictLN_myMET),1,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMETcOallocatorlEmyMETgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__eventdictLN_myMET),257,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMETcOallocatorlEmyMETgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMETcOallocatorlEmyMETgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMETcOallocatorlEmyMETgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__eventdictLN_myMET),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMETcOallocatorlEmyMETgRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__eventdictLN_myMET),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMETcOallocatorlEmyMETgRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__eventdictLN_myMET),1,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMETcOallocatorlEmyMETgRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__eventdictLN_myMET),1,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMETcOallocatorlEmyMETgRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMETcOallocatorlEmyMETgRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMETcOallocatorlEmyMETgRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMETcOallocatorlEmyMETgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMETcOallocatorlEmyMETgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEmyMETcOallocatorlEmyMETgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMETcOallocatorlEmyMETgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEmyMETcOallocatorlEmyMETgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMETcOallocatorlEmyMETgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEmyMETcOallocatorlEmyMETgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMETcOallocatorlEmyMETgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEmyMETcOallocatorlEmyMETgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMETcOallocatorlEmyMETgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<myVertex>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyVertexcOallocatorlEmyVertexgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__eventdictLN_myVertex),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyVertexcOallocatorlEmyVertexgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__eventdictLN_myVertex),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyVertexcOallocatorlEmyVertexgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__eventdictLN_myVertex),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyVertexcOallocatorlEmyVertexgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__eventdictLN_myVertex),1,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyVertexcOallocatorlEmyVertexgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__eventdictLN_myVertex),257,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyVertexcOallocatorlEmyVertexgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyVertexcOallocatorlEmyVertexgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyVertexcOallocatorlEmyVertexgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__eventdictLN_myVertex),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyVertexcOallocatorlEmyVertexgRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__eventdictLN_myVertex),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyVertexcOallocatorlEmyVertexgRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__eventdictLN_myVertex),1,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyVertexcOallocatorlEmyVertexgRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__eventdictLN_myVertex),1,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyVertexcOallocatorlEmyVertexgRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyVertexcOallocatorlEmyVertexgRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyVertexcOallocatorlEmyVertexgRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyVertexcOallocatorlEmyVertexgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyVertexcOallocatorlEmyVertexgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEmyVertexcOallocatorlEmyVertexgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyVertexcOallocatorlEmyVertexgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEmyVertexcOallocatorlEmyVertexgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyVertexcOallocatorlEmyVertexgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEmyVertexcOallocatorlEmyVertexgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyVertexcOallocatorlEmyVertexgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEmyVertexcOallocatorlEmyVertexgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyVertexcOallocatorlEmyVertexgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<mySV>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEmySVcOallocatorlEmySVgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__eventdictLN_mySV),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmySVcOallocatorlEmySVgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__eventdictLN_mySV),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmySVcOallocatorlEmySVgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__eventdictLN_mySV),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEmySVcOallocatorlEmySVgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__eventdictLN_mySV),1,G__get_linked_tagnum(&G__eventdictLN_vectorlEmySVcOallocatorlEmySVgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__eventdictLN_mySV),257,G__get_linked_tagnum(&G__eventdictLN_vectorlEmySVcOallocatorlEmySVgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmySVcOallocatorlEmySVgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmySVcOallocatorlEmySVgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__eventdictLN_mySV),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmySVcOallocatorlEmySVgRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__eventdictLN_mySV),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmySVcOallocatorlEmySVgRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__eventdictLN_mySV),1,G__get_linked_tagnum(&G__eventdictLN_vectorlEmySVcOallocatorlEmySVgRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__eventdictLN_mySV),1,G__get_linked_tagnum(&G__eventdictLN_vectorlEmySVcOallocatorlEmySVgRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmySVcOallocatorlEmySVgRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmySVcOallocatorlEmySVgRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEmySVcOallocatorlEmySVgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEmySVcOallocatorlEmySVgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEmySVcOallocatorlEmySVgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmySVcOallocatorlEmySVgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEmySVcOallocatorlEmySVgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmySVcOallocatorlEmySVgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEmySVcOallocatorlEmySVgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmySVcOallocatorlEmySVgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEmySVcOallocatorlEmySVgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmySVcOallocatorlEmySVgRsPgR));
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* myVertex */
static void G__setup_memvarmyVertex(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_myVertex));
   { myVertex *p; p=(myVertex*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->px)-(long)(p)),102,0,0,-1,-1,-1,1,"px=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->py)-(long)(p)),102,0,0,-1,-1,-1,1,"py=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pz)-(long)(p)),102,0,0,-1,-1,-1,1,"pz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->position_Rho)-(long)(p)),102,0,0,-1,-1,-1,1,"position_Rho=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tracksSize)-(long)(p)),105,0,0,-1,-1,-1,1,"tracksSize=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->normalizedChi2)-(long)(p)),102,0,0,-1,-1,-1,1,"normalizedChi2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ndof)-(long)(p)),102,0,0,-1,-1,-1,1,"ndof=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Num_Vertex)-(long)(p)),104,0,0,-1,-1,-1,1,"Num_Vertex=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* myTriggerObject */
static void G__setup_memvarmyTriggerObject(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_myTriggerObject));
   { myTriggerObject *p; p=(myTriggerObject*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->path)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_string),-1,-1,1,"path=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isLastFilter)-(long)(p)),103,0,0,-1,-1,-1,1,"isLastFilter=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isL3)-(long)(p)),103,0,0,-1,-1,-1,1,"isL3=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->phi)-(long)(p)),102,0,0,-1,-1,-1,1,"phi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pt)-(long)(p)),102,0,0,-1,-1,-1,1,"pt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eta)-(long)(p)),102,0,0,-1,-1,-1,1,"eta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->px)-(long)(p)),102,0,0,-1,-1,-1,1,"px=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->py)-(long)(p)),102,0,0,-1,-1,-1,1,"py=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pz)-(long)(p)),102,0,0,-1,-1,-1,1,"pz=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* myGenObject */
static void G__setup_memvarmyGenObject(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_myGenObject));
   { myGenObject *p; p=(myGenObject*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->E)-(long)(p)),102,0,0,-1,-1,-1,1,"E=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Energy)-(long)(p)),102,0,0,-1,-1,-1,1,"Energy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->px)-(long)(p)),102,0,0,-1,-1,-1,1,"px=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->py)-(long)(p)),102,0,0,-1,-1,-1,1,"py=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pz)-(long)(p)),102,0,0,-1,-1,-1,1,"pz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pt)-(long)(p)),102,0,0,-1,-1,-1,1,"pt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eta)-(long)(p)),102,0,0,-1,-1,-1,1,"eta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->phi)-(long)(p)),102,0,0,-1,-1,-1,1,"phi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->charge)-(long)(p)),102,0,0,-1,-1,-1,1,"charge=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->z)-(long)(p)),102,0,0,-1,-1,-1,1,"z=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mass)-(long)(p)),102,0,0,-1,-1,-1,1,"mass=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->et)-(long)(p)),102,0,0,-1,-1,-1,1,"et=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mod_pt)-(long)(p)),102,0,0,-1,-1,-1,1,"mod_pt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mod_eta)-(long)(p)),102,0,0,-1,-1,-1,1,"mod_eta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mod_phi)-(long)(p)),102,0,0,-1,-1,-1,1,"mod_phi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mod_charge)-(long)(p)),102,0,0,-1,-1,-1,1,"mod_charge=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mod_z)-(long)(p)),102,0,0,-1,-1,-1,1,"mod_z=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mod_mass)-(long)(p)),102,0,0,-1,-1,-1,1,"mod_mass=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Gmod_pt)-(long)(p)),102,0,0,-1,-1,-1,1,"Gmod_pt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Gmod_eta)-(long)(p)),102,0,0,-1,-1,-1,1,"Gmod_eta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Gmod_phi)-(long)(p)),102,0,0,-1,-1,-1,1,"Gmod_phi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Gmod_charge)-(long)(p)),102,0,0,-1,-1,-1,1,"Gmod_charge=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Gmod_z)-(long)(p)),102,0,0,-1,-1,-1,1,"Gmod_z=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Gmod_mass)-(long)(p)),102,0,0,-1,-1,-1,1,"Gmod_mass=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pdgId)-(long)(p)),105,0,0,-1,-1,-1,1,"pdgId=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->status)-(long)(p)),105,0,0,-1,-1,-1,1,"status=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mod_pdgId)-(long)(p)),105,0,0,-1,-1,-1,1,"mod_pdgId=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mod_status)-(long)(p)),105,0,0,-1,-1,-1,1,"mod_status=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Gmod_pdgId)-(long)(p)),105,0,0,-1,-1,-1,1,"Gmod_pdgId=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Gmod_status)-(long)(p)),105,0,0,-1,-1,-1,1,"Gmod_status=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->gen_index)-(long)(p)),105,0,0,-1,-1,-1,1,"gen_index=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->decay_mode)-(long)(p)),105,0,0,-1,-1,-1,1,"decay_mode=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* myMuon */
static void G__setup_memvarmyMuon(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_myMuon));
   { myMuon *p; p=(myMuon*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->pt)-(long)(p)),102,0,0,-1,-1,-1,1,"pt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eta)-(long)(p)),102,0,0,-1,-1,-1,1,"eta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->px)-(long)(p)),102,0,0,-1,-1,-1,1,"px=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->py)-(long)(p)),102,0,0,-1,-1,-1,1,"py=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->phi)-(long)(p)),102,0,0,-1,-1,-1,1,"phi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->charge)-(long)(p)),102,0,0,-1,-1,-1,1,"charge=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->E)-(long)(p)),102,0,0,-1,-1,-1,1,"E=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->et)-(long)(p)),102,0,0,-1,-1,-1,1,"et=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pz)-(long)(p)),102,0,0,-1,-1,-1,1,"pz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->z)-(long)(p)),102,0,0,-1,-1,-1,1,"z=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mass)-(long)(p)),102,0,0,-1,-1,-1,1,"mass=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Energy)-(long)(p)),102,0,0,-1,-1,-1,1,"Energy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mt)-(long)(p)),102,0,0,-1,-1,-1,1,"mt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->absiso)-(long)(p)),102,0,0,-1,-1,-1,1,"absiso=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->reliso)-(long)(p)),102,0,0,-1,-1,-1,1,"reliso=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pfIsoAll)-(long)(p)),102,0,0,-1,-1,-1,1,"pfIsoAll=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pfIsoCharged)-(long)(p)),102,0,0,-1,-1,-1,1,"pfIsoCharged=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pfIsoNeutral)-(long)(p)),102,0,0,-1,-1,-1,1,"pfIsoNeutral=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pfIsoGamma)-(long)(p)),102,0,0,-1,-1,-1,1,"pfIsoGamma=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pfIsoPU)-(long)(p)),102,0,0,-1,-1,-1,1,"pfIsoPU=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->gen_index)-(long)(p)),105,0,0,-1,-1,-1,1,"gen_index=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dB)-(long)(p)),102,0,0,-1,-1,-1,1,"dB=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->emfraction)-(long)(p)),102,0,0,-1,-1,-1,1,"emfraction=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->DepositR03Ecal)-(long)(p)),102,0,0,-1,-1,-1,1,"DepositR03Ecal=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->DepositR03Hcal)-(long)(p)),102,0,0,-1,-1,-1,1,"DepositR03Hcal=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->DepositR03TrackerOfficial)-(long)(p)),102,0,0,-1,-1,-1,1,"DepositR03TrackerOfficial=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->GlobalMuonPromptTight)-(long)(p)),103,0,0,-1,-1,-1,1,"GlobalMuonPromptTight=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isLooseMuon)-(long)(p)),103,0,0,-1,-1,-1,1,"isLooseMuon=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isTightMuon)-(long)(p)),103,0,0,-1,-1,-1,1,"isTightMuon=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isSoftMuon)-(long)(p)),103,0,0,-1,-1,-1,1,"isSoftMuon=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isHighPtMuon)-(long)(p)),103,0,0,-1,-1,-1,1,"isHighPtMuon=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isMediumMuon)-(long)(p)),103,0,0,-1,-1,-1,1,"isMediumMuon=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->TMOneStationLoose)-(long)(p)),103,0,0,-1,-1,-1,1,"TMOneStationLoose=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->TM2DCompatibilityLoose)-(long)(p)),103,0,0,-1,-1,-1,1,"TM2DCompatibilityLoose=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isGlobalMuon)-(long)(p)),103,0,0,-1,-1,-1,1,"isGlobalMuon=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isTrackerMuon)-(long)(p)),103,0,0,-1,-1,-1,1,"isTrackerMuon=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isStandAloneMuon)-(long)(p)),103,0,0,-1,-1,-1,1,"isStandAloneMuon=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isPFMuon)-(long)(p)),103,0,0,-1,-1,-1,1,"isPFMuon=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->numberOfValidMuonHits)-(long)(p)),105,0,0,-1,-1,-1,1,"numberOfValidMuonHits=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->numberOfHits)-(long)(p)),105,0,0,-1,-1,-1,1,"numberOfHits=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->numMatchStation)-(long)(p)),105,0,0,-1,-1,-1,1,"numMatchStation=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->numberOfValidPixelHits)-(long)(p)),105,0,0,-1,-1,-1,1,"numberOfValidPixelHits=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->normalizedChi2_innTrk)-(long)(p)),105,0,0,-1,-1,-1,1,"normalizedChi2_innTrk=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->numberOfValidMuonHits_innTrk)-(long)(p)),105,0,0,-1,-1,-1,1,"numberOfValidMuonHits_innTrk=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->numberOfHits_innTrk)-(long)(p)),105,0,0,-1,-1,-1,1,"numberOfHits_innTrk=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->normalizedChi2)-(long)(p)),102,0,0,-1,-1,-1,1,"normalizedChi2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->trkLayerMeasure)-(long)(p)),105,0,0,-1,-1,-1,1,"trkLayerMeasure=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->intrkLayerMeasure)-(long)(p)),105,0,0,-1,-1,-1,1,"intrkLayerMeasure=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->intrkLayerpixel)-(long)(p)),105,0,0,-1,-1,-1,1,"intrkLayerpixel=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dxy)-(long)(p)),102,0,0,-1,-1,-1,1,"dxy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dz)-(long)(p)),102,0,0,-1,-1,-1,1,"dz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->segmentCompatibility)-(long)(p)),102,0,0,-1,-1,-1,1,"segmentCompatibility=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->validFraction)-(long)(p)),102,0,0,-1,-1,-1,1,"validFraction=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->trkKink)-(long)(p)),102,0,0,-1,-1,-1,1,"trkKink=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->chi2LocalPosition)-(long)(p)),102,0,0,-1,-1,-1,1,"chi2LocalPosition=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* myElectron */
static void G__setup_memvarmyElectron(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_myElectron));
   { myElectron *p; p=(myElectron*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->pt)-(long)(p)),102,0,0,-1,-1,-1,1,"pt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eta)-(long)(p)),102,0,0,-1,-1,-1,1,"eta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->px)-(long)(p)),102,0,0,-1,-1,-1,1,"px=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->py)-(long)(p)),102,0,0,-1,-1,-1,1,"py=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->phi)-(long)(p)),102,0,0,-1,-1,-1,1,"phi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->charge)-(long)(p)),102,0,0,-1,-1,-1,1,"charge=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->E)-(long)(p)),102,0,0,-1,-1,-1,1,"E=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->et)-(long)(p)),102,0,0,-1,-1,-1,1,"et=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pz)-(long)(p)),102,0,0,-1,-1,-1,1,"pz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->z)-(long)(p)),102,0,0,-1,-1,-1,1,"z=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mass)-(long)(p)),102,0,0,-1,-1,-1,1,"mass=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Energy)-(long)(p)),102,0,0,-1,-1,-1,1,"Energy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mt)-(long)(p)),102,0,0,-1,-1,-1,1,"mt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eta_SC)-(long)(p)),102,0,0,-1,-1,-1,1,"eta_SC=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->phi_SC)-(long)(p)),102,0,0,-1,-1,-1,1,"phi_SC=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dxy)-(long)(p)),102,0,0,-1,-1,-1,1,"dxy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dz)-(long)(p)),102,0,0,-1,-1,-1,1,"dz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ecalEnergy)-(long)(p)),102,0,0,-1,-1,-1,1,"ecalEnergy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->full5x5)-(long)(p)),102,0,0,-1,-1,-1,1,"full5x5=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->absiso)-(long)(p)),102,0,0,-1,-1,-1,1,"absiso=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->reliso)-(long)(p)),102,0,0,-1,-1,-1,1,"reliso=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pfIsoCharged)-(long)(p)),102,0,0,-1,-1,-1,1,"pfIsoCharged=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pfIsoNeutral)-(long)(p)),102,0,0,-1,-1,-1,1,"pfIsoNeutral=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pfIsoGamma)-(long)(p)),102,0,0,-1,-1,-1,1,"pfIsoGamma=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pfIsoPU)-(long)(p)),102,0,0,-1,-1,-1,1,"pfIsoPU=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->gen_index)-(long)(p)),105,0,0,-1,-1,-1,1,"gen_index=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->numLostHitEleInner)-(long)(p)),105,0,0,-1,-1,-1,1,"numLostHitEleInner=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->deltaPhiSuperClusterTrackAtVtx)-(long)(p)),102,0,0,-1,-1,-1,1,"deltaPhiSuperClusterTrackAtVtx=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->deltaEtaSuperClusterTrackAtVtx)-(long)(p)),102,0,0,-1,-1,-1,1,"deltaEtaSuperClusterTrackAtVtx=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sigmaIetaIeta)-(long)(p)),102,0,0,-1,-1,-1,1,"sigmaIetaIeta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sigmaEtaEta)-(long)(p)),102,0,0,-1,-1,-1,1,"sigmaEtaEta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ecalIso)-(long)(p)),102,0,0,-1,-1,-1,1,"ecalIso=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hcalIso)-(long)(p)),102,0,0,-1,-1,-1,1,"hcalIso=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->caloIso)-(long)(p)),102,0,0,-1,-1,-1,1,"caloIso=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hcalOverEcal)-(long)(p)),102,0,0,-1,-1,-1,1,"hcalOverEcal=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->SIP)-(long)(p)),102,0,0,-1,-1,-1,1,"SIP=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ooEmooP)-(long)(p)),102,0,0,-1,-1,-1,1,"ooEmooP=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->passConversionVeto)-(long)(p)),103,0,0,-1,-1,-1,1,"passConversionVeto=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->rawE_SC)-(long)(p)),102,0,0,-1,-1,-1,1,"rawE_SC=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->preshowerE_SC)-(long)(p)),102,0,0,-1,-1,-1,1,"preshowerE_SC=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->MVAtrigID)-(long)(p)),102,0,0,-1,-1,-1,1,"MVAtrigID=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->MVAnontrigID)-(long)(p)),102,0,0,-1,-1,-1,1,"MVAnontrigID=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->cutID_loose)-(long)(p)),103,0,0,-1,-1,-1,1,"cutID_loose=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->cutID_medium)-(long)(p)),103,0,0,-1,-1,-1,1,"cutID_medium=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->cutID_tight)-(long)(p)),103,0,0,-1,-1,-1,1,"cutID_tight=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->cutID_veto)-(long)(p)),103,0,0,-1,-1,-1,1,"cutID_veto=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->MVAID_nontrig_Loose)-(long)(p)),103,0,0,-1,-1,-1,1,"MVAID_nontrig_Loose=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->MVAID_nontrig_Tight)-(long)(p)),103,0,0,-1,-1,-1,1,"MVAID_nontrig_Tight=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* myTau */
static void G__setup_memvarmyTau(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_myTau));
   { myTau *p; p=(myTau*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->pt)-(long)(p)),102,0,0,-1,-1,-1,1,"pt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eta)-(long)(p)),102,0,0,-1,-1,-1,1,"eta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->px)-(long)(p)),102,0,0,-1,-1,-1,1,"px=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->py)-(long)(p)),102,0,0,-1,-1,-1,1,"py=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->phi)-(long)(p)),102,0,0,-1,-1,-1,1,"phi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->charge)-(long)(p)),102,0,0,-1,-1,-1,1,"charge=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->E)-(long)(p)),102,0,0,-1,-1,-1,1,"E=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->et)-(long)(p)),102,0,0,-1,-1,-1,1,"et=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pz)-(long)(p)),102,0,0,-1,-1,-1,1,"pz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->z)-(long)(p)),102,0,0,-1,-1,-1,1,"z=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mass)-(long)(p)),102,0,0,-1,-1,-1,1,"mass=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dz_Ver_match)-(long)(p)),102,0,0,-1,-1,-1,1,"dz_Ver_match=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Energy)-(long)(p)),102,0,0,-1,-1,-1,1,"Energy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mt)-(long)(p)),102,0,0,-1,-1,-1,1,"mt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->jetMass)-(long)(p)),102,0,0,-1,-1,-1,1,"jetMass=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eta_SC)-(long)(p)),102,0,0,-1,-1,-1,1,"eta_SC=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->phi_SC)-(long)(p)),102,0,0,-1,-1,-1,1,"phi_SC=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->gen_index)-(long)(p)),105,0,0,-1,-1,-1,1,"gen_index=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dxy)-(long)(p)),102,0,0,-1,-1,-1,1,"dxy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dz)-(long)(p)),102,0,0,-1,-1,-1,1,"dz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->zImpact)-(long)(p)),102,0,0,-1,-1,-1,1,"zImpact=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isFirstVtx)-(long)(p)),103,0,0,-1,-1,-1,1,"isFirstVtx=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->decayMode)-(long)(p)),105,0,0,-1,-1,-1,1,"decayMode=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->leadChargedParticlePt)-(long)(p)),102,0,0,-1,-1,-1,1,"leadChargedParticlePt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->trackRefPt)-(long)(p)),102,0,0,-1,-1,-1,1,"trackRefPt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->numChargedParticlesSignalCone)-(long)(p)),105,0,0,-1,-1,-1,1,"numChargedParticlesSignalCone=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->numNeutralHadronsSignalCone)-(long)(p)),105,0,0,-1,-1,-1,1,"numNeutralHadronsSignalCone=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->numPhotonsSignalCone)-(long)(p)),105,0,0,-1,-1,-1,1,"numPhotonsSignalCone=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->numParticlesSignalCone)-(long)(p)),105,0,0,-1,-1,-1,1,"numParticlesSignalCone=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->signalPiZeroCandidates)-(long)(p)),105,0,0,-1,-1,-1,1,"signalPiZeroCandidates=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->numChargedParticlesIsoCone)-(long)(p)),105,0,0,-1,-1,-1,1,"numChargedParticlesIsoCone=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->numNeutralHadronsIsoCone)-(long)(p)),105,0,0,-1,-1,-1,1,"numNeutralHadronsIsoCone=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->numPhotonsIsoCone)-(long)(p)),105,0,0,-1,-1,-1,1,"numPhotonsIsoCone=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->numParticlesIsoCone)-(long)(p)),105,0,0,-1,-1,-1,1,"numParticlesIsoCone=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ptSumChargedParticlesIsoCone)-(long)(p)),102,0,0,-1,-1,-1,1,"ptSumChargedParticlesIsoCone=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ptSumPhotonsIsoCone)-(long)(p)),102,0,0,-1,-1,-1,1,"ptSumPhotonsIsoCone=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->discriminationByDecayModeFinding)-(long)(p)),103,0,0,-1,-1,-1,1,"discriminationByDecayModeFinding=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->discriminationByElectronMVA5VLoose)-(long)(p)),103,0,0,-1,-1,-1,1,"discriminationByElectronMVA5VLoose=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->discriminationByElectronMVA5Loose)-(long)(p)),103,0,0,-1,-1,-1,1,"discriminationByElectronMVA5Loose=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->discriminationByElectronMVA5Medium)-(long)(p)),103,0,0,-1,-1,-1,1,"discriminationByElectronMVA5Medium=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->discriminationByElectronLoose)-(long)(p)),103,0,0,-1,-1,-1,1,"discriminationByElectronLoose=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->discriminationByMuonLoose3)-(long)(p)),103,0,0,-1,-1,-1,1,"discriminationByMuonLoose3=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->discriminationByMuonTight3)-(long)(p)),103,0,0,-1,-1,-1,1,"discriminationByMuonTight3=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->byLooseCombinedIsolationDeltaBetaCorr3Hits)-(long)(p)),103,0,0,-1,-1,-1,1,"byLooseCombinedIsolationDeltaBetaCorr3Hits=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->byMediumCombinedIsolationDeltaBetaCorr3Hits)-(long)(p)),103,0,0,-1,-1,-1,1,"byMediumCombinedIsolationDeltaBetaCorr3Hits=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->byTightCombinedIsolationDeltaBetaCorr3Hits)-(long)(p)),103,0,0,-1,-1,-1,1,"byTightCombinedIsolationDeltaBetaCorr3Hits=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->byVLooseIsolationMVA3oldDMwLT)-(long)(p)),103,0,0,-1,-1,-1,1,"byVLooseIsolationMVA3oldDMwLT=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->byLooseIsolationMVA3oldDMwLT)-(long)(p)),103,0,0,-1,-1,-1,1,"byLooseIsolationMVA3oldDMwLT=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->byMediumIsolationMVA3oldDMwLT)-(long)(p)),103,0,0,-1,-1,-1,1,"byMediumIsolationMVA3oldDMwLT=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->byTightIsolationMVA3oldDMwLT)-(long)(p)),103,0,0,-1,-1,-1,1,"byTightIsolationMVA3oldDMwLT=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->byVTightIsolationMVA3oldDMwLT)-(long)(p)),103,0,0,-1,-1,-1,1,"byVTightIsolationMVA3oldDMwLT=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->byRawCombinedIsolationDeltaBetaCorr3Hits)-(long)(p)),102,0,0,-1,-1,-1,1,"byRawCombinedIsolationDeltaBetaCorr3Hits=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->discriminationByDecayModeFindingNewDMs)-(long)(p)),103,0,0,-1,-1,-1,1,"discriminationByDecayModeFindingNewDMs=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->discriminationByDecayModeFindingOldDMs)-(long)(p)),103,0,0,-1,-1,-1,1,"discriminationByDecayModeFindingOldDMs=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->IsolationChargedIsoPtSum)-(long)(p)),102,0,0,-1,-1,-1,1,"IsolationChargedIsoPtSum=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->IsolationNeutralIsoPtSum)-(long)(p)),102,0,0,-1,-1,-1,1,"IsolationNeutralIsoPtSum=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->IsolationPUcorrPtSum)-(long)(p)),102,0,0,-1,-1,-1,1,"IsolationPUcorrPtSum=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* myJet */
static void G__setup_memvarmyJet(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_myJet));
   { myJet *p; p=(myJet*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->pt)-(long)(p)),102,0,0,-1,-1,-1,1,"pt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eta)-(long)(p)),102,0,0,-1,-1,-1,1,"eta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->px)-(long)(p)),102,0,0,-1,-1,-1,1,"px=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->py)-(long)(p)),102,0,0,-1,-1,-1,1,"py=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->phi)-(long)(p)),102,0,0,-1,-1,-1,1,"phi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->E)-(long)(p)),102,0,0,-1,-1,-1,1,"E=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pz)-(long)(p)),102,0,0,-1,-1,-1,1,"pz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->z)-(long)(p)),102,0,0,-1,-1,-1,1,"z=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mass)-(long)(p)),102,0,0,-1,-1,-1,1,"mass=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Energy)-(long)(p)),102,0,0,-1,-1,-1,1,"Energy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vtxMass)-(long)(p)),102,0,0,-1,-1,-1,1,"vtxMass=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vtxNtracks)-(long)(p)),102,0,0,-1,-1,-1,1,"vtxNtracks=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vtx3DVal)-(long)(p)),102,0,0,-1,-1,-1,1,"vtx3DVal=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vtx3DSig)-(long)(p)),102,0,0,-1,-1,-1,1,"vtx3DSig=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->partonFlavour)-(long)(p)),105,0,0,-1,-1,-1,1,"partonFlavour=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->gen_index)-(long)(p)),105,0,0,-1,-1,-1,1,"gen_index=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->jetId_Loose)-(long)(p)),103,0,0,-1,-1,-1,1,"jetId_Loose=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->jetId_Medium)-(long)(p)),103,0,0,-1,-1,-1,1,"jetId_Medium=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->jetId_Tight)-(long)(p)),103,0,0,-1,-1,-1,1,"jetId_Tight=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->CSV)-(long)(p)),102,0,0,-1,-1,-1,1,"CSV=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->puJetId)-(long)(p)),103,0,0,-1,-1,-1,1,"puJetId=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->puJetIdraw)-(long)(p)),102,0,0,-1,-1,-1,1,"puJetIdraw=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* myMET */
static void G__setup_memvarmyMET(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_myMET));
   { myMET *p; p=(myMET*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->pt)-(long)(p)),102,0,0,-1,-1,-1,1,"pt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eta)-(long)(p)),102,0,0,-1,-1,-1,1,"eta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->px)-(long)(p)),102,0,0,-1,-1,-1,1,"px=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->py)-(long)(p)),102,0,0,-1,-1,-1,1,"py=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->phi)-(long)(p)),102,0,0,-1,-1,-1,1,"phi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->et)-(long)(p)),102,0,0,-1,-1,-1,1,"et=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->genMET)-(long)(p)),102,0,0,-1,-1,-1,1,"genMET=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pt_JetEnUp)-(long)(p)),102,0,0,-1,-1,-1,1,"pt_JetEnUp=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pt_JetEnDown)-(long)(p)),102,0,0,-1,-1,-1,1,"pt_JetEnDown=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pt_MuonEnUp)-(long)(p)),102,0,0,-1,-1,-1,1,"pt_MuonEnUp=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pt_MuonEnDown)-(long)(p)),102,0,0,-1,-1,-1,1,"pt_MuonEnDown=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pt_ElectronEnUp)-(long)(p)),102,0,0,-1,-1,-1,1,"pt_ElectronEnUp=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pt_ElectronEnDown)-(long)(p)),102,0,0,-1,-1,-1,1,"pt_ElectronEnDown=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pt_UnclusteredEnUp)-(long)(p)),102,0,0,-1,-1,-1,1,"pt_UnclusteredEnUp=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pt_UnclusteredEnDown)-(long)(p)),102,0,0,-1,-1,-1,1,"pt_UnclusteredEnDown=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pt_JetResUp)-(long)(p)),102,0,0,-1,-1,-1,1,"pt_JetResUp=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pt_JetResDown)-(long)(p)),102,0,0,-1,-1,-1,1,"pt_JetResDown=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->phi_JetEnUp)-(long)(p)),102,0,0,-1,-1,-1,1,"phi_JetEnUp=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->phi_JetEnDown)-(long)(p)),102,0,0,-1,-1,-1,1,"phi_JetEnDown=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->phi_MuonEnUp)-(long)(p)),102,0,0,-1,-1,-1,1,"phi_MuonEnUp=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->phi_MuonEnDown)-(long)(p)),102,0,0,-1,-1,-1,1,"phi_MuonEnDown=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->phi_ElectronEnUp)-(long)(p)),102,0,0,-1,-1,-1,1,"phi_ElectronEnUp=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->phi_ElectronEnDown)-(long)(p)),102,0,0,-1,-1,-1,1,"phi_ElectronEnDown=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->phi_UnclusteredEnUp)-(long)(p)),102,0,0,-1,-1,-1,1,"phi_UnclusteredEnUp=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->phi_UnclusteredEnDown)-(long)(p)),102,0,0,-1,-1,-1,1,"phi_UnclusteredEnDown=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->phi_JetResUp)-(long)(p)),102,0,0,-1,-1,-1,1,"phi_JetResUp=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->phi_JetResDown)-(long)(p)),102,0,0,-1,-1,-1,1,"phi_JetResDown=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* mySV */
static void G__setup_memvarmySV(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_mySV));
   { mySV *p; p=(mySV*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->pt)-(long)(p)),102,0,0,-1,-1,-1,1,"pt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eta)-(long)(p)),102,0,0,-1,-1,-1,1,"eta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->phi)-(long)(p)),102,0,0,-1,-1,-1,1,"phi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mass)-(long)(p)),102,0,0,-1,-1,-1,1,"mass=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->met)-(long)(p)),102,0,0,-1,-1,-1,1,"met=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* myevent */
static void G__setup_memvarmyevent(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_myevent));
   { myevent *p; p=(myevent*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->RecGenParticles)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgR),G__defined_typename("vector<myGenObject>"),-1,1,"RecGenParticles=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->TriggerObj)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgR),G__defined_typename("vector<myTriggerObject>"),-1,1,"TriggerObj=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->PreselectedJets)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyJetcOallocatorlEmyJetgRsPgR),G__defined_typename("vector<myJet>"),-1,1,"PreselectedJets=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->PreSelectedElectrons)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyElectroncOallocatorlEmyElectrongRsPgR),G__defined_typename("vector<myElectron>"),-1,1,"PreSelectedElectrons=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->PreSelectedMuons)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMuoncOallocatorlEmyMuongRsPgR),G__defined_typename("vector<myMuon>"),-1,1,"PreSelectedMuons=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->PreSelectedTaus)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTaucOallocatorlEmyTaugRsPgR),G__defined_typename("vector<myTau>"),-1,1,"PreSelectedTaus=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->LooseTaus)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTaucOallocatorlEmyTaugRsPgR),G__defined_typename("vector<myTau>"),-1,1,"LooseTaus=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->RecPFMet)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMETcOallocatorlEmyMETgRsPgR),G__defined_typename("vector<myMET>"),-1,1,"RecPFMet=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Vertex)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyVertexcOallocatorlEmyVertexgRsPgR),G__defined_typename("vector<myVertex>"),-1,1,"Vertex=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->PairMet_etau)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMETcOallocatorlEmyMETgRsPgR),G__defined_typename("vector<myMET>"),-1,1,"PairMet_etau=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->PairMet_mutau)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMETcOallocatorlEmyMETgRsPgR),G__defined_typename("vector<myMET>"),-1,1,"PairMet_mutau=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->PairMet_tautau)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMETcOallocatorlEmyMETgRsPgR),G__defined_typename("vector<myMET>"),-1,1,"PairMet_tautau=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->PairMet_emu)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMETcOallocatorlEmyMETgRsPgR),G__defined_typename("vector<myMET>"),-1,1,"PairMet_emu=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->SV_etau)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmySVcOallocatorlEmySVgRsPgR),G__defined_typename("vector<mySV>"),-1,1,"SV_etau=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->SV_mutau)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmySVcOallocatorlEmySVgRsPgR),G__defined_typename("vector<mySV>"),-1,1,"SV_mutau=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->SV_tautau)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmySVcOallocatorlEmySVgRsPgR),G__defined_typename("vector<mySV>"),-1,1,"SV_tautau=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->SV_emu)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmySVcOallocatorlEmySVgRsPgR),G__defined_typename("vector<mySV>"),-1,1,"SV_emu=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->PairRecoilMet_etau)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMETcOallocatorlEmyMETgRsPgR),G__defined_typename("vector<myMET>"),-1,1,"PairRecoilMet_etau=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->PairRecoilMet_mutau)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMETcOallocatorlEmyMETgRsPgR),G__defined_typename("vector<myMET>"),-1,1,"PairRecoilMet_mutau=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->PairRecoilMet_tautau)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMETcOallocatorlEmyMETgRsPgR),G__defined_typename("vector<myMET>"),-1,1,"PairRecoilMet_tautau=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->PairRecoilMet_emu)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMETcOallocatorlEmyMETgRsPgR),G__defined_typename("vector<myMET>"),-1,1,"PairRecoilMet_emu=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->PairMet_etau_sigMatrix_00)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<float>"),-1,1,"PairMet_etau_sigMatrix_00=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->PairMet_etau_sigMatrix_10)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<float>"),-1,1,"PairMet_etau_sigMatrix_10=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->PairMet_etau_sigMatrix_01)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<float>"),-1,1,"PairMet_etau_sigMatrix_01=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->PairMet_etau_sigMatrix_11)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<float>"),-1,1,"PairMet_etau_sigMatrix_11=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->PairMet_mutau_sigMatrix_00)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<float>"),-1,1,"PairMet_mutau_sigMatrix_00=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->PairMet_mutau_sigMatrix_10)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<float>"),-1,1,"PairMet_mutau_sigMatrix_10=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->PairMet_mutau_sigMatrix_01)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<float>"),-1,1,"PairMet_mutau_sigMatrix_01=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->PairMet_mutau_sigMatrix_11)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<float>"),-1,1,"PairMet_mutau_sigMatrix_11=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->PairMet_tautau_sigMatrix_00)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<float>"),-1,1,"PairMet_tautau_sigMatrix_00=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->PairMet_tautau_sigMatrix_10)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<float>"),-1,1,"PairMet_tautau_sigMatrix_10=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->PairMet_tautau_sigMatrix_01)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<float>"),-1,1,"PairMet_tautau_sigMatrix_01=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->PairMet_tautau_sigMatrix_11)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<float>"),-1,1,"PairMet_tautau_sigMatrix_11=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->PairMet_emu_sigMatrix_00)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<float>"),-1,1,"PairMet_emu_sigMatrix_00=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->PairMet_emu_sigMatrix_10)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<float>"),-1,1,"PairMet_emu_sigMatrix_10=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->PairMet_emu_sigMatrix_01)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<float>"),-1,1,"PairMet_emu_sigMatrix_01=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->PairMet_emu_sigMatrix_11)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<float>"),-1,1,"PairMet_emu_sigMatrix_11=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->HLT)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR),G__defined_typename("map<string,int>"),-1,1,"HLT=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->METfilters)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR),G__defined_typename("map<string,int>"),-1,1,"METfilters=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->runNumber)-(long)(p)),104,0,0,-1,-1,-1,1,"runNumber=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eventNumber)-(long)(p)),104,0,0,-1,-1,-1,1,"eventNumber=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->lumiNumber)-(long)(p)),104,0,0,-1,-1,-1,1,"lumiNumber=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->PUInfo)-(long)(p)),102,0,0,-1,-1,-1,1,"PUInfo=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->PUInfo_true)-(long)(p)),102,0,0,-1,-1,-1,1,"PUInfo_true=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->PUInfo_Bunch0)-(long)(p)),105,0,0,-1,-1,-1,1,"PUInfo_Bunch0=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Rho)-(long)(p)),102,0,0,-1,-1,-1,1,"Rho=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->NUP)-(long)(p)),105,0,0,-1,-1,-1,1,"NUP=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* vector<myGenObject,allocator<myGenObject> > */
static void G__setup_memvarvectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgR));
   { vector<myGenObject,allocator<myGenObject> > *p; p=(vector<myGenObject,allocator<myGenObject> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<myGenObject,allocator<myGenObject> >::iterator */
static void G__setup_memvarvectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgRcLcLiterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgRcLcLiterator));
   { vector<myGenObject,allocator<myGenObject> >::iterator *p; p=(vector<myGenObject,allocator<myGenObject> >::iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<myTriggerObject,allocator<myTriggerObject> > */
static void G__setup_memvarvectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgR));
   { vector<myTriggerObject,allocator<myTriggerObject> > *p; p=(vector<myTriggerObject,allocator<myTriggerObject> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<myTriggerObject,allocator<myTriggerObject> >::iterator */
static void G__setup_memvarvectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgRcLcLiterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgRcLcLiterator));
   { vector<myTriggerObject,allocator<myTriggerObject> >::iterator *p; p=(vector<myTriggerObject,allocator<myTriggerObject> >::iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<myJet,allocator<myJet> > */
static void G__setup_memvarvectorlEmyJetcOallocatorlEmyJetgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEmyJetcOallocatorlEmyJetgRsPgR));
   { vector<myJet,allocator<myJet> > *p; p=(vector<myJet,allocator<myJet> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<myJet,allocator<myJet> >::iterator */
static void G__setup_memvarvectorlEmyJetcOallocatorlEmyJetgRsPgRcLcLiterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEmyJetcOallocatorlEmyJetgRsPgRcLcLiterator));
   { vector<myJet,allocator<myJet> >::iterator *p; p=(vector<myJet,allocator<myJet> >::iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<myElectron,allocator<myElectron> > */
static void G__setup_memvarvectorlEmyElectroncOallocatorlEmyElectrongRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEmyElectroncOallocatorlEmyElectrongRsPgR));
   { vector<myElectron,allocator<myElectron> > *p; p=(vector<myElectron,allocator<myElectron> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<myElectron,allocator<myElectron> >::iterator */
static void G__setup_memvarvectorlEmyElectroncOallocatorlEmyElectrongRsPgRcLcLiterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEmyElectroncOallocatorlEmyElectrongRsPgRcLcLiterator));
   { vector<myElectron,allocator<myElectron> >::iterator *p; p=(vector<myElectron,allocator<myElectron> >::iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<myMuon,allocator<myMuon> > */
static void G__setup_memvarvectorlEmyMuoncOallocatorlEmyMuongRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMuoncOallocatorlEmyMuongRsPgR));
   { vector<myMuon,allocator<myMuon> > *p; p=(vector<myMuon,allocator<myMuon> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<myMuon,allocator<myMuon> >::iterator */
static void G__setup_memvarvectorlEmyMuoncOallocatorlEmyMuongRsPgRcLcLiterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMuoncOallocatorlEmyMuongRsPgRcLcLiterator));
   { vector<myMuon,allocator<myMuon> >::iterator *p; p=(vector<myMuon,allocator<myMuon> >::iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<myTau,allocator<myTau> > */
static void G__setup_memvarvectorlEmyTaucOallocatorlEmyTaugRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTaucOallocatorlEmyTaugRsPgR));
   { vector<myTau,allocator<myTau> > *p; p=(vector<myTau,allocator<myTau> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<myTau,allocator<myTau> >::iterator */
static void G__setup_memvarvectorlEmyTaucOallocatorlEmyTaugRsPgRcLcLiterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTaucOallocatorlEmyTaugRsPgRcLcLiterator));
   { vector<myTau,allocator<myTau> >::iterator *p; p=(vector<myTau,allocator<myTau> >::iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<myMET,allocator<myMET> > */
static void G__setup_memvarvectorlEmyMETcOallocatorlEmyMETgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMETcOallocatorlEmyMETgRsPgR));
   { vector<myMET,allocator<myMET> > *p; p=(vector<myMET,allocator<myMET> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<myMET,allocator<myMET> >::iterator */
static void G__setup_memvarvectorlEmyMETcOallocatorlEmyMETgRsPgRcLcLiterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMETcOallocatorlEmyMETgRsPgRcLcLiterator));
   { vector<myMET,allocator<myMET> >::iterator *p; p=(vector<myMET,allocator<myMET> >::iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<myVertex,allocator<myVertex> > */
static void G__setup_memvarvectorlEmyVertexcOallocatorlEmyVertexgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEmyVertexcOallocatorlEmyVertexgRsPgR));
   { vector<myVertex,allocator<myVertex> > *p; p=(vector<myVertex,allocator<myVertex> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<myVertex,allocator<myVertex> >::iterator */
static void G__setup_memvarvectorlEmyVertexcOallocatorlEmyVertexgRsPgRcLcLiterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEmyVertexcOallocatorlEmyVertexgRsPgRcLcLiterator));
   { vector<myVertex,allocator<myVertex> >::iterator *p; p=(vector<myVertex,allocator<myVertex> >::iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<mySV,allocator<mySV> > */
static void G__setup_memvarvectorlEmySVcOallocatorlEmySVgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEmySVcOallocatorlEmySVgRsPgR));
   { vector<mySV,allocator<mySV> > *p; p=(vector<mySV,allocator<mySV> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<mySV,allocator<mySV> >::iterator */
static void G__setup_memvarvectorlEmySVcOallocatorlEmySVgRsPgRcLcLiterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEmySVcOallocatorlEmySVgRsPgRcLcLiterator));
   { vector<mySV,allocator<mySV> >::iterator *p; p=(vector<mySV,allocator<mySV> >::iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvareventdict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncmyVertex(void) {
   /* myVertex */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_myVertex));
   G__memfunc_setup("myVertex",868,G__eventdict_450_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_myVertex), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__eventdict_450_0_2, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&myVertex::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_450_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&myVertex::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_450_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&myVertex::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_450_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&myVertex::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_450_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_450_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&myVertex::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_450_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&myVertex::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_450_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&myVertex::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_450_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&myVertex::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("myVertex", 868, G__eventdict_450_0_14, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_myVertex), -1, 0, 1, 1, 1, 0, "u 'myVertex' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~myVertex", 994, G__eventdict_450_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_450_0_16, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_myVertex), -1, 1, 1, 1, 1, 0, "u 'myVertex' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmyTriggerObject(void) {
   /* myTriggerObject */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_myTriggerObject));
   G__memfunc_setup("myTriggerObject",1553,G__eventdict_451_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_myTriggerObject), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__eventdict_451_0_2, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&myTriggerObject::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_451_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&myTriggerObject::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_451_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&myTriggerObject::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_451_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&myTriggerObject::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_451_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_451_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&myTriggerObject::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_451_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&myTriggerObject::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_451_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&myTriggerObject::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_451_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&myTriggerObject::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("myTriggerObject", 1553, G__eventdict_451_0_14, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_myTriggerObject), -1, 0, 1, 1, 1, 0, "u 'myTriggerObject' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~myTriggerObject", 1679, G__eventdict_451_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_451_0_16, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_myTriggerObject), -1, 1, 1, 1, 1, 0, "u 'myTriggerObject' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmyGenObject(void) {
   /* myGenObject */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_myGenObject));
   G__memfunc_setup("myGenObject",1111,G__eventdict_452_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_myGenObject), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__eventdict_452_0_2, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&myGenObject::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_452_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&myGenObject::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_452_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&myGenObject::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_452_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&myGenObject::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_452_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_452_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&myGenObject::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_452_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&myGenObject::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_452_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&myGenObject::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_452_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&myGenObject::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("myGenObject", 1111, G__eventdict_452_0_14, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_myGenObject), -1, 0, 1, 1, 1, 0, "u 'myGenObject' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~myGenObject", 1237, G__eventdict_452_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_452_0_16, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_myGenObject), -1, 1, 1, 1, 1, 0, "u 'myGenObject' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmyMuon(void) {
   /* myMuon */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_myMuon));
   G__memfunc_setup("myMuon",645,G__eventdict_453_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_myMuon), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__eventdict_453_0_2, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&myMuon::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_453_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&myMuon::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_453_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&myMuon::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_453_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&myMuon::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_453_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_453_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&myMuon::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_453_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&myMuon::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_453_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&myMuon::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_453_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&myMuon::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("myMuon", 645, G__eventdict_453_0_14, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_myMuon), -1, 0, 1, 1, 1, 0, "u 'myMuon' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~myMuon", 771, G__eventdict_453_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_453_0_16, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_myMuon), -1, 1, 1, 1, 1, 0, "u 'myMuon' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmyElectron(void) {
   /* myElectron */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_myElectron));
   G__memfunc_setup("myElectron",1058,G__eventdict_454_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_myElectron), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__eventdict_454_0_2, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&myElectron::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_454_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&myElectron::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_454_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&myElectron::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_454_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&myElectron::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_454_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_454_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&myElectron::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_454_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&myElectron::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_454_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&myElectron::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_454_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&myElectron::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("myElectron", 1058, G__eventdict_454_0_14, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_myElectron), -1, 0, 1, 1, 1, 0, "u 'myElectron' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~myElectron", 1184, G__eventdict_454_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_454_0_16, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_myElectron), -1, 1, 1, 1, 1, 0, "u 'myElectron' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmyTau(void) {
   /* myTau */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_myTau));
   G__memfunc_setup("myTau",528,G__eventdict_455_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_myTau), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__eventdict_455_0_2, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&myTau::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_455_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&myTau::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_455_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&myTau::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_455_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&myTau::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_455_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_455_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&myTau::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_455_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&myTau::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_455_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&myTau::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_455_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&myTau::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("myTau", 528, G__eventdict_455_0_14, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_myTau), -1, 0, 1, 1, 1, 0, "u 'myTau' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~myTau", 654, G__eventdict_455_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_455_0_16, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_myTau), -1, 1, 1, 1, 1, 0, "u 'myTau' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmyJet(void) {
   /* myJet */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_myJet));
   G__memfunc_setup("myJet",521,G__eventdict_456_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_myJet), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__eventdict_456_0_2, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&myJet::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_456_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&myJet::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_456_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&myJet::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_456_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&myJet::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_456_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_456_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&myJet::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_456_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&myJet::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_456_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&myJet::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_456_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&myJet::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("myJet", 521, G__eventdict_456_0_14, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_myJet), -1, 0, 1, 1, 1, 0, "u 'myJet' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~myJet", 647, G__eventdict_456_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_456_0_16, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_myJet), -1, 1, 1, 1, 1, 0, "u 'myJet' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmyMET(void) {
   /* myMET */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_myMET));
   G__memfunc_setup("myMET",460,G__eventdict_457_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_myMET), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__eventdict_457_0_2, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&myMET::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_457_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&myMET::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_457_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&myMET::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_457_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&myMET::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_457_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_457_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&myMET::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_457_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&myMET::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_457_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&myMET::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_457_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&myMET::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("myMET", 460, G__eventdict_457_0_14, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_myMET), -1, 0, 1, 1, 1, 0, "u 'myMET' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~myMET", 586, G__eventdict_457_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_457_0_16, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_myMET), -1, 1, 1, 1, 1, 0, "u 'myMET' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmySV(void) {
   /* mySV */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_mySV));
   G__memfunc_setup("mySV",399,G__eventdict_458_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_mySV), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__eventdict_458_0_2, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&mySV::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_458_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&mySV::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_458_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&mySV::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_458_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&mySV::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_458_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_458_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&mySV::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_458_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&mySV::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_458_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&mySV::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_458_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&mySV::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("mySV", 399, G__eventdict_458_0_14, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_mySV), -1, 0, 1, 1, 1, 0, "u 'mySV' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~mySV", 525, G__eventdict_458_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_458_0_16, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_mySV), -1, 1, 1, 1, 1, 0, "u 'mySV' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmyevent(void) {
   /* myevent */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_myevent));
   G__memfunc_setup("myevent",776,G__eventdict_459_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_myevent), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__eventdict_459_0_2, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&myevent::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_459_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&myevent::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_459_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&myevent::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_459_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&myevent::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_459_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_459_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&myevent::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_459_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&myevent::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_459_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&myevent::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_459_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&myevent::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("myevent", 776, G__eventdict_459_0_14, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_myevent), -1, 0, 1, 1, 1, 0, "u 'myevent' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~myevent", 902, G__eventdict_459_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_459_0_16, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_myevent), -1, 1, 1, 1, 1, 0, "u 'myevent' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgR(void) {
   /* vector<myGenObject,allocator<myGenObject> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgR));
   G__memfunc_setup("at",213,G__eventdict_461_0_1, 117, G__get_linked_tagnum(&G__eventdictLN_myGenObject), G__defined_typename("vector<myGenObject,allocator<myGenObject> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<myGenObject,allocator<myGenObject> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__eventdict_461_0_2, 117, G__get_linked_tagnum(&G__eventdictLN_myGenObject), G__defined_typename("vector<myGenObject,allocator<myGenObject> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<myGenObject,allocator<myGenObject> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__eventdict_461_0_3, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__eventdict_461_0_4, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__eventdict_461_0_5, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgRcLcLiteratorgR), G__defined_typename("vector<myGenObject,allocator<myGenObject> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__eventdict_461_0_6, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgRcLcLiteratorgR), G__defined_typename("vector<myGenObject,allocator<myGenObject> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__eventdict_461_0_7, 107, -1, G__defined_typename("vector<myGenObject,allocator<myGenObject> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__eventdict_461_0_8, 107, -1, G__defined_typename("vector<myGenObject,allocator<myGenObject> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_461_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<myGenObject,allocator<myGenObject> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_461_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<myGenObject,allocator<myGenObject> >::size_type' 0 - sz u 'myGenObject' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__eventdict_461_0_11, 107, -1, G__defined_typename("vector<myGenObject,allocator<myGenObject> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__eventdict_461_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_461_0_13, 117, G__get_linked_tagnum(&G__eventdictLN_myGenObject), G__defined_typename("vector<myGenObject,allocator<myGenObject> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<myGenObject,allocator<myGenObject> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_461_0_14, 117, G__get_linked_tagnum(&G__eventdictLN_myGenObject), G__defined_typename("vector<myGenObject,allocator<myGenObject> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<myGenObject,allocator<myGenObject> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<myGenObject,allocator<myGenObject> >",4162,G__eventdict_461_0_15, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<myGenObject,allocator<myGenObject> >",4162,G__eventdict_461_0_16, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<myGenObject,allocator<myGenObject> >::size_type' 0 - n u 'myGenObject' - 11 'myGenObject()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<myGenObject,allocator<myGenObject> >",4162,G__eventdict_461_0_17, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<myGenObject,allocator<myGenObject> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<myGenObject,allocator<myGenObject> >",4162,G__eventdict_461_0_18, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<myGenObject,allocator<myGenObject> >::iterator' 'vector<myGenObject,allocator<myGenObject> >::const_iterator' 10 - first u 'vector<myGenObject,allocator<myGenObject> >::iterator' 'vector<myGenObject,allocator<myGenObject> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__eventdict_461_0_19, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<myGenObject,allocator<myGenObject> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__eventdict_461_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<myGenObject,allocator<myGenObject> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__eventdict_461_0_21, 117, G__get_linked_tagnum(&G__eventdictLN_myGenObject), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__eventdict_461_0_22, 117, G__get_linked_tagnum(&G__eventdictLN_myGenObject), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__eventdict_461_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'myGenObject' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__eventdict_461_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<myGenObject,allocator<myGenObject> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_461_0_25, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<myGenObject,allocator<myGenObject> >::iterator' - 0 - position u 'myGenObject' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_461_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<myGenObject,allocator<myGenObject> >::iterator' - 0 - position u 'vector<myGenObject,allocator<myGenObject> >::iterator' 'vector<myGenObject,allocator<myGenObject> >::const_iterator' 10 - first "
"u 'vector<myGenObject,allocator<myGenObject> >::iterator' 'vector<myGenObject,allocator<myGenObject> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_461_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<myGenObject,allocator<myGenObject> >::iterator' - 0 - position k - 'vector<myGenObject,allocator<myGenObject> >::size_type' 0 - n "
"u 'myGenObject' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__eventdict_461_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_461_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<myGenObject,allocator<myGenObject> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_461_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<myGenObject,allocator<myGenObject> >::iterator' - 0 - first u 'vector<myGenObject,allocator<myGenObject> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__eventdict_461_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<myGenObject,allocator<myGenObject> >", 4288, G__eventdict_461_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgRcLcLiterator(void) {
   /* vector<myGenObject,allocator<myGenObject> >::iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgRcLcLiterator));
   G__memfunc_setup("iterator",874,G__eventdict_462_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("iterator",874,G__eventdict_462_0_2, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgRcLcLiterator), -1, 0, 1, 5, 1, 0, "U 'myGenObject' 'vector<myGenObject,allocator<myGenObject> >::iterator::pointer' 11 - __i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__eventdict_462_0_3, 117, G__get_linked_tagnum(&G__eventdictLN_myGenObject), G__defined_typename("vector<myGenObject,allocator<myGenObject> >::iterator::reference"), 1, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__eventdict_462_0_4, 85, G__get_linked_tagnum(&G__eventdictLN_myGenObject), G__defined_typename("vector<myGenObject,allocator<myGenObject> >::iterator::pointer"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__eventdict_462_0_5, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__eventdict_462_0_6, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__eventdict_462_0_7, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__eventdict_462_0_8, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_462_0_9, 117, G__get_linked_tagnum(&G__eventdictLN_myGenObject), G__defined_typename("vector<myGenObject,allocator<myGenObject> >::iterator::reference"), 1, 1, 1, 1, 8, "l - 'vector<myGenObject,allocator<myGenObject> >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+=",980,G__eventdict_462_0_10, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "l - 'vector<myGenObject,allocator<myGenObject> >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+",919,G__eventdict_462_0_11, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 8, "l - 'vector<myGenObject,allocator<myGenObject> >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-=",982,G__eventdict_462_0_12, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "l - 'vector<myGenObject,allocator<myGenObject> >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-",921,G__eventdict_462_0_13, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 8, "l - 'vector<myGenObject,allocator<myGenObject> >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("base",411,G__eventdict_462_0_14, 85, G__get_linked_tagnum(&G__eventdictLN_myGenObject), G__defined_typename("vector<myGenObject,allocator<myGenObject> >::iterator::pointer"), 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__eventdict_462_0_15, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'vector<myGenObject,allocator<myGenObject> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("iterator", 874, G__eventdict_462_0_16, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_vectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'vector<myGenObject,allocator<myGenObject> >::iterator' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~iterator", 1000, G__eventdict_462_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgR(void) {
   /* vector<myTriggerObject,allocator<myTriggerObject> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgR));
   G__memfunc_setup("at",213,G__eventdict_465_0_1, 117, G__get_linked_tagnum(&G__eventdictLN_myTriggerObject), G__defined_typename("vector<myTriggerObject,allocator<myTriggerObject> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<myTriggerObject,allocator<myTriggerObject> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__eventdict_465_0_2, 117, G__get_linked_tagnum(&G__eventdictLN_myTriggerObject), G__defined_typename("vector<myTriggerObject,allocator<myTriggerObject> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<myTriggerObject,allocator<myTriggerObject> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__eventdict_465_0_3, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__eventdict_465_0_4, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__eventdict_465_0_5, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgRcLcLiteratorgR), G__defined_typename("vector<myTriggerObject,allocator<myTriggerObject> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__eventdict_465_0_6, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgRcLcLiteratorgR), G__defined_typename("vector<myTriggerObject,allocator<myTriggerObject> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__eventdict_465_0_7, 107, -1, G__defined_typename("vector<myTriggerObject,allocator<myTriggerObject> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__eventdict_465_0_8, 107, -1, G__defined_typename("vector<myTriggerObject,allocator<myTriggerObject> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_465_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<myTriggerObject,allocator<myTriggerObject> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_465_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<myTriggerObject,allocator<myTriggerObject> >::size_type' 0 - sz u 'myTriggerObject' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__eventdict_465_0_11, 107, -1, G__defined_typename("vector<myTriggerObject,allocator<myTriggerObject> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__eventdict_465_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_465_0_13, 117, G__get_linked_tagnum(&G__eventdictLN_myTriggerObject), G__defined_typename("vector<myTriggerObject,allocator<myTriggerObject> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<myTriggerObject,allocator<myTriggerObject> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_465_0_14, 117, G__get_linked_tagnum(&G__eventdictLN_myTriggerObject), G__defined_typename("vector<myTriggerObject,allocator<myTriggerObject> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<myTriggerObject,allocator<myTriggerObject> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<myTriggerObject,allocator<myTriggerObject> >",5046,G__eventdict_465_0_15, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<myTriggerObject,allocator<myTriggerObject> >",5046,G__eventdict_465_0_16, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<myTriggerObject,allocator<myTriggerObject> >::size_type' 0 - n u 'myTriggerObject' - 11 'myTriggerObject()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<myTriggerObject,allocator<myTriggerObject> >",5046,G__eventdict_465_0_17, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<myTriggerObject,allocator<myTriggerObject> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<myTriggerObject,allocator<myTriggerObject> >",5046,G__eventdict_465_0_18, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<myTriggerObject,allocator<myTriggerObject> >::iterator' 'vector<myTriggerObject,allocator<myTriggerObject> >::const_iterator' 10 - first u 'vector<myTriggerObject,allocator<myTriggerObject> >::iterator' 'vector<myTriggerObject,allocator<myTriggerObject> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__eventdict_465_0_19, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<myTriggerObject,allocator<myTriggerObject> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__eventdict_465_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<myTriggerObject,allocator<myTriggerObject> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__eventdict_465_0_21, 117, G__get_linked_tagnum(&G__eventdictLN_myTriggerObject), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__eventdict_465_0_22, 117, G__get_linked_tagnum(&G__eventdictLN_myTriggerObject), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__eventdict_465_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'myTriggerObject' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__eventdict_465_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<myTriggerObject,allocator<myTriggerObject> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_465_0_25, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<myTriggerObject,allocator<myTriggerObject> >::iterator' - 0 - position u 'myTriggerObject' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_465_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<myTriggerObject,allocator<myTriggerObject> >::iterator' - 0 - position u 'vector<myTriggerObject,allocator<myTriggerObject> >::iterator' 'vector<myTriggerObject,allocator<myTriggerObject> >::const_iterator' 10 - first "
"u 'vector<myTriggerObject,allocator<myTriggerObject> >::iterator' 'vector<myTriggerObject,allocator<myTriggerObject> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_465_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<myTriggerObject,allocator<myTriggerObject> >::iterator' - 0 - position k - 'vector<myTriggerObject,allocator<myTriggerObject> >::size_type' 0 - n "
"u 'myTriggerObject' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__eventdict_465_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_465_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<myTriggerObject,allocator<myTriggerObject> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_465_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<myTriggerObject,allocator<myTriggerObject> >::iterator' - 0 - first u 'vector<myTriggerObject,allocator<myTriggerObject> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__eventdict_465_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<myTriggerObject,allocator<myTriggerObject> >", 5172, G__eventdict_465_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgRcLcLiterator(void) {
   /* vector<myTriggerObject,allocator<myTriggerObject> >::iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgRcLcLiterator));
   G__memfunc_setup("iterator",874,G__eventdict_466_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("iterator",874,G__eventdict_466_0_2, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgRcLcLiterator), -1, 0, 1, 5, 1, 0, "U 'myTriggerObject' 'vector<myTriggerObject,allocator<myTriggerObject> >::iterator::pointer' 11 - __i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__eventdict_466_0_3, 117, G__get_linked_tagnum(&G__eventdictLN_myTriggerObject), G__defined_typename("vector<myTriggerObject,allocator<myTriggerObject> >::iterator::reference"), 1, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__eventdict_466_0_4, 85, G__get_linked_tagnum(&G__eventdictLN_myTriggerObject), G__defined_typename("vector<myTriggerObject,allocator<myTriggerObject> >::iterator::pointer"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__eventdict_466_0_5, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__eventdict_466_0_6, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__eventdict_466_0_7, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__eventdict_466_0_8, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_466_0_9, 117, G__get_linked_tagnum(&G__eventdictLN_myTriggerObject), G__defined_typename("vector<myTriggerObject,allocator<myTriggerObject> >::iterator::reference"), 1, 1, 1, 1, 8, "l - 'vector<myTriggerObject,allocator<myTriggerObject> >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+=",980,G__eventdict_466_0_10, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "l - 'vector<myTriggerObject,allocator<myTriggerObject> >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+",919,G__eventdict_466_0_11, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 8, "l - 'vector<myTriggerObject,allocator<myTriggerObject> >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-=",982,G__eventdict_466_0_12, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "l - 'vector<myTriggerObject,allocator<myTriggerObject> >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-",921,G__eventdict_466_0_13, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 8, "l - 'vector<myTriggerObject,allocator<myTriggerObject> >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("base",411,G__eventdict_466_0_14, 85, G__get_linked_tagnum(&G__eventdictLN_myTriggerObject), G__defined_typename("vector<myTriggerObject,allocator<myTriggerObject> >::iterator::pointer"), 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__eventdict_466_0_15, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'vector<myTriggerObject,allocator<myTriggerObject> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("iterator", 874, G__eventdict_466_0_16, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'vector<myTriggerObject,allocator<myTriggerObject> >::iterator' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~iterator", 1000, G__eventdict_466_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEmyJetcOallocatorlEmyJetgRsPgR(void) {
   /* vector<myJet,allocator<myJet> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEmyJetcOallocatorlEmyJetgRsPgR));
   G__memfunc_setup("at",213,G__eventdict_469_0_1, 117, G__get_linked_tagnum(&G__eventdictLN_myJet), G__defined_typename("vector<myJet,allocator<myJet> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<myJet,allocator<myJet> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__eventdict_469_0_2, 117, G__get_linked_tagnum(&G__eventdictLN_myJet), G__defined_typename("vector<myJet,allocator<myJet> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<myJet,allocator<myJet> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__eventdict_469_0_3, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyJetcOallocatorlEmyJetgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__eventdict_469_0_4, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyJetcOallocatorlEmyJetgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__eventdict_469_0_5, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEmyJetcOallocatorlEmyJetgRsPgRcLcLiteratorgR), G__defined_typename("vector<myJet,allocator<myJet> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__eventdict_469_0_6, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEmyJetcOallocatorlEmyJetgRsPgRcLcLiteratorgR), G__defined_typename("vector<myJet,allocator<myJet> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__eventdict_469_0_7, 107, -1, G__defined_typename("vector<myJet,allocator<myJet> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__eventdict_469_0_8, 107, -1, G__defined_typename("vector<myJet,allocator<myJet> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_469_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<myJet,allocator<myJet> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_469_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<myJet,allocator<myJet> >::size_type' 0 - sz u 'myJet' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__eventdict_469_0_11, 107, -1, G__defined_typename("vector<myJet,allocator<myJet> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__eventdict_469_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_469_0_13, 117, G__get_linked_tagnum(&G__eventdictLN_myJet), G__defined_typename("vector<myJet,allocator<myJet> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<myJet,allocator<myJet> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_469_0_14, 117, G__get_linked_tagnum(&G__eventdictLN_myJet), G__defined_typename("vector<myJet,allocator<myJet> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<myJet,allocator<myJet> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<myJet,allocator<myJet> >",2982,G__eventdict_469_0_15, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyJetcOallocatorlEmyJetgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<myJet,allocator<myJet> >",2982,G__eventdict_469_0_16, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyJetcOallocatorlEmyJetgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<myJet,allocator<myJet> >::size_type' 0 - n u 'myJet' - 11 'myJet()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<myJet,allocator<myJet> >",2982,G__eventdict_469_0_17, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyJetcOallocatorlEmyJetgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<myJet,allocator<myJet> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<myJet,allocator<myJet> >",2982,G__eventdict_469_0_18, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyJetcOallocatorlEmyJetgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<myJet,allocator<myJet> >::iterator' 'vector<myJet,allocator<myJet> >::const_iterator' 10 - first u 'vector<myJet,allocator<myJet> >::iterator' 'vector<myJet,allocator<myJet> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__eventdict_469_0_19, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyJetcOallocatorlEmyJetgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<myJet,allocator<myJet> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__eventdict_469_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<myJet,allocator<myJet> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__eventdict_469_0_21, 117, G__get_linked_tagnum(&G__eventdictLN_myJet), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__eventdict_469_0_22, 117, G__get_linked_tagnum(&G__eventdictLN_myJet), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__eventdict_469_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'myJet' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__eventdict_469_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<myJet,allocator<myJet> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_469_0_25, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyJetcOallocatorlEmyJetgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<myJet,allocator<myJet> >::iterator' - 0 - position u 'myJet' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_469_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<myJet,allocator<myJet> >::iterator' - 0 - position u 'vector<myJet,allocator<myJet> >::iterator' 'vector<myJet,allocator<myJet> >::const_iterator' 10 - first "
"u 'vector<myJet,allocator<myJet> >::iterator' 'vector<myJet,allocator<myJet> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_469_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<myJet,allocator<myJet> >::iterator' - 0 - position k - 'vector<myJet,allocator<myJet> >::size_type' 0 - n "
"u 'myJet' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__eventdict_469_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_469_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<myJet,allocator<myJet> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_469_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<myJet,allocator<myJet> >::iterator' - 0 - first u 'vector<myJet,allocator<myJet> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__eventdict_469_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<myJet,allocator<myJet> >", 3108, G__eventdict_469_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEmyJetcOallocatorlEmyJetgRsPgRcLcLiterator(void) {
   /* vector<myJet,allocator<myJet> >::iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEmyJetcOallocatorlEmyJetgRsPgRcLcLiterator));
   G__memfunc_setup("iterator",874,G__eventdict_470_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyJetcOallocatorlEmyJetgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("iterator",874,G__eventdict_470_0_2, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyJetcOallocatorlEmyJetgRsPgRcLcLiterator), -1, 0, 1, 5, 1, 0, "U 'myJet' 'vector<myJet,allocator<myJet> >::iterator::pointer' 11 - __i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__eventdict_470_0_3, 117, G__get_linked_tagnum(&G__eventdictLN_myJet), G__defined_typename("vector<myJet,allocator<myJet> >::iterator::reference"), 1, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__eventdict_470_0_4, 85, G__get_linked_tagnum(&G__eventdictLN_myJet), G__defined_typename("vector<myJet,allocator<myJet> >::iterator::pointer"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__eventdict_470_0_5, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyJetcOallocatorlEmyJetgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__eventdict_470_0_6, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyJetcOallocatorlEmyJetgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__eventdict_470_0_7, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyJetcOallocatorlEmyJetgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__eventdict_470_0_8, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyJetcOallocatorlEmyJetgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_470_0_9, 117, G__get_linked_tagnum(&G__eventdictLN_myJet), G__defined_typename("vector<myJet,allocator<myJet> >::iterator::reference"), 1, 1, 1, 1, 8, "l - 'vector<myJet,allocator<myJet> >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+=",980,G__eventdict_470_0_10, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyJetcOallocatorlEmyJetgRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "l - 'vector<myJet,allocator<myJet> >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+",919,G__eventdict_470_0_11, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyJetcOallocatorlEmyJetgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 8, "l - 'vector<myJet,allocator<myJet> >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-=",982,G__eventdict_470_0_12, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyJetcOallocatorlEmyJetgRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "l - 'vector<myJet,allocator<myJet> >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-",921,G__eventdict_470_0_13, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyJetcOallocatorlEmyJetgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 8, "l - 'vector<myJet,allocator<myJet> >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("base",411,G__eventdict_470_0_14, 85, G__get_linked_tagnum(&G__eventdictLN_myJet), G__defined_typename("vector<myJet,allocator<myJet> >::iterator::pointer"), 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__eventdict_470_0_15, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyJetcOallocatorlEmyJetgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'vector<myJet,allocator<myJet> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("iterator", 874, G__eventdict_470_0_16, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_vectorlEmyJetcOallocatorlEmyJetgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'vector<myJet,allocator<myJet> >::iterator' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~iterator", 1000, G__eventdict_470_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEmyElectroncOallocatorlEmyElectrongRsPgR(void) {
   /* vector<myElectron,allocator<myElectron> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEmyElectroncOallocatorlEmyElectrongRsPgR));
   G__memfunc_setup("at",213,G__eventdict_473_0_1, 117, G__get_linked_tagnum(&G__eventdictLN_myElectron), G__defined_typename("vector<myElectron,allocator<myElectron> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<myElectron,allocator<myElectron> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__eventdict_473_0_2, 117, G__get_linked_tagnum(&G__eventdictLN_myElectron), G__defined_typename("vector<myElectron,allocator<myElectron> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<myElectron,allocator<myElectron> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__eventdict_473_0_3, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyElectroncOallocatorlEmyElectrongRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__eventdict_473_0_4, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyElectroncOallocatorlEmyElectrongRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__eventdict_473_0_5, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEmyElectroncOallocatorlEmyElectrongRsPgRcLcLiteratorgR), G__defined_typename("vector<myElectron,allocator<myElectron> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__eventdict_473_0_6, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEmyElectroncOallocatorlEmyElectrongRsPgRcLcLiteratorgR), G__defined_typename("vector<myElectron,allocator<myElectron> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__eventdict_473_0_7, 107, -1, G__defined_typename("vector<myElectron,allocator<myElectron> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__eventdict_473_0_8, 107, -1, G__defined_typename("vector<myElectron,allocator<myElectron> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_473_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<myElectron,allocator<myElectron> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_473_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<myElectron,allocator<myElectron> >::size_type' 0 - sz u 'myElectron' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__eventdict_473_0_11, 107, -1, G__defined_typename("vector<myElectron,allocator<myElectron> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__eventdict_473_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_473_0_13, 117, G__get_linked_tagnum(&G__eventdictLN_myElectron), G__defined_typename("vector<myElectron,allocator<myElectron> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<myElectron,allocator<myElectron> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_473_0_14, 117, G__get_linked_tagnum(&G__eventdictLN_myElectron), G__defined_typename("vector<myElectron,allocator<myElectron> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<myElectron,allocator<myElectron> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<myElectron,allocator<myElectron> >",4056,G__eventdict_473_0_15, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyElectroncOallocatorlEmyElectrongRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<myElectron,allocator<myElectron> >",4056,G__eventdict_473_0_16, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyElectroncOallocatorlEmyElectrongRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<myElectron,allocator<myElectron> >::size_type' 0 - n u 'myElectron' - 11 'myElectron()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<myElectron,allocator<myElectron> >",4056,G__eventdict_473_0_17, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyElectroncOallocatorlEmyElectrongRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<myElectron,allocator<myElectron> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<myElectron,allocator<myElectron> >",4056,G__eventdict_473_0_18, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyElectroncOallocatorlEmyElectrongRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<myElectron,allocator<myElectron> >::iterator' 'vector<myElectron,allocator<myElectron> >::const_iterator' 10 - first u 'vector<myElectron,allocator<myElectron> >::iterator' 'vector<myElectron,allocator<myElectron> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__eventdict_473_0_19, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyElectroncOallocatorlEmyElectrongRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<myElectron,allocator<myElectron> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__eventdict_473_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<myElectron,allocator<myElectron> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__eventdict_473_0_21, 117, G__get_linked_tagnum(&G__eventdictLN_myElectron), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__eventdict_473_0_22, 117, G__get_linked_tagnum(&G__eventdictLN_myElectron), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__eventdict_473_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'myElectron' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__eventdict_473_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<myElectron,allocator<myElectron> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_473_0_25, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyElectroncOallocatorlEmyElectrongRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<myElectron,allocator<myElectron> >::iterator' - 0 - position u 'myElectron' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_473_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<myElectron,allocator<myElectron> >::iterator' - 0 - position u 'vector<myElectron,allocator<myElectron> >::iterator' 'vector<myElectron,allocator<myElectron> >::const_iterator' 10 - first "
"u 'vector<myElectron,allocator<myElectron> >::iterator' 'vector<myElectron,allocator<myElectron> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_473_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<myElectron,allocator<myElectron> >::iterator' - 0 - position k - 'vector<myElectron,allocator<myElectron> >::size_type' 0 - n "
"u 'myElectron' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__eventdict_473_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_473_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<myElectron,allocator<myElectron> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_473_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<myElectron,allocator<myElectron> >::iterator' - 0 - first u 'vector<myElectron,allocator<myElectron> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__eventdict_473_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<myElectron,allocator<myElectron> >", 4182, G__eventdict_473_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEmyElectroncOallocatorlEmyElectrongRsPgRcLcLiterator(void) {
   /* vector<myElectron,allocator<myElectron> >::iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEmyElectroncOallocatorlEmyElectrongRsPgRcLcLiterator));
   G__memfunc_setup("iterator",874,G__eventdict_474_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyElectroncOallocatorlEmyElectrongRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("iterator",874,G__eventdict_474_0_2, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyElectroncOallocatorlEmyElectrongRsPgRcLcLiterator), -1, 0, 1, 5, 1, 0, "U 'myElectron' 'vector<myElectron,allocator<myElectron> >::iterator::pointer' 11 - __i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__eventdict_474_0_3, 117, G__get_linked_tagnum(&G__eventdictLN_myElectron), G__defined_typename("vector<myElectron,allocator<myElectron> >::iterator::reference"), 1, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__eventdict_474_0_4, 85, G__get_linked_tagnum(&G__eventdictLN_myElectron), G__defined_typename("vector<myElectron,allocator<myElectron> >::iterator::pointer"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__eventdict_474_0_5, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyElectroncOallocatorlEmyElectrongRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__eventdict_474_0_6, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyElectroncOallocatorlEmyElectrongRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__eventdict_474_0_7, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyElectroncOallocatorlEmyElectrongRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__eventdict_474_0_8, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyElectroncOallocatorlEmyElectrongRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_474_0_9, 117, G__get_linked_tagnum(&G__eventdictLN_myElectron), G__defined_typename("vector<myElectron,allocator<myElectron> >::iterator::reference"), 1, 1, 1, 1, 8, "l - 'vector<myElectron,allocator<myElectron> >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+=",980,G__eventdict_474_0_10, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyElectroncOallocatorlEmyElectrongRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "l - 'vector<myElectron,allocator<myElectron> >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+",919,G__eventdict_474_0_11, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyElectroncOallocatorlEmyElectrongRsPgRcLcLiterator), -1, 0, 1, 1, 1, 8, "l - 'vector<myElectron,allocator<myElectron> >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-=",982,G__eventdict_474_0_12, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyElectroncOallocatorlEmyElectrongRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "l - 'vector<myElectron,allocator<myElectron> >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-",921,G__eventdict_474_0_13, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyElectroncOallocatorlEmyElectrongRsPgRcLcLiterator), -1, 0, 1, 1, 1, 8, "l - 'vector<myElectron,allocator<myElectron> >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("base",411,G__eventdict_474_0_14, 85, G__get_linked_tagnum(&G__eventdictLN_myElectron), G__defined_typename("vector<myElectron,allocator<myElectron> >::iterator::pointer"), 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__eventdict_474_0_15, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyElectroncOallocatorlEmyElectrongRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'vector<myElectron,allocator<myElectron> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("iterator", 874, G__eventdict_474_0_16, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_vectorlEmyElectroncOallocatorlEmyElectrongRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'vector<myElectron,allocator<myElectron> >::iterator' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~iterator", 1000, G__eventdict_474_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEmyMuoncOallocatorlEmyMuongRsPgR(void) {
   /* vector<myMuon,allocator<myMuon> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMuoncOallocatorlEmyMuongRsPgR));
   G__memfunc_setup("at",213,G__eventdict_477_0_1, 117, G__get_linked_tagnum(&G__eventdictLN_myMuon), G__defined_typename("vector<myMuon,allocator<myMuon> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<myMuon,allocator<myMuon> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__eventdict_477_0_2, 117, G__get_linked_tagnum(&G__eventdictLN_myMuon), G__defined_typename("vector<myMuon,allocator<myMuon> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<myMuon,allocator<myMuon> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__eventdict_477_0_3, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMuoncOallocatorlEmyMuongRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__eventdict_477_0_4, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMuoncOallocatorlEmyMuongRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__eventdict_477_0_5, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEmyMuoncOallocatorlEmyMuongRsPgRcLcLiteratorgR), G__defined_typename("vector<myMuon,allocator<myMuon> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__eventdict_477_0_6, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEmyMuoncOallocatorlEmyMuongRsPgRcLcLiteratorgR), G__defined_typename("vector<myMuon,allocator<myMuon> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__eventdict_477_0_7, 107, -1, G__defined_typename("vector<myMuon,allocator<myMuon> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__eventdict_477_0_8, 107, -1, G__defined_typename("vector<myMuon,allocator<myMuon> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_477_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<myMuon,allocator<myMuon> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_477_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<myMuon,allocator<myMuon> >::size_type' 0 - sz u 'myMuon' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__eventdict_477_0_11, 107, -1, G__defined_typename("vector<myMuon,allocator<myMuon> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__eventdict_477_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_477_0_13, 117, G__get_linked_tagnum(&G__eventdictLN_myMuon), G__defined_typename("vector<myMuon,allocator<myMuon> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<myMuon,allocator<myMuon> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_477_0_14, 117, G__get_linked_tagnum(&G__eventdictLN_myMuon), G__defined_typename("vector<myMuon,allocator<myMuon> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<myMuon,allocator<myMuon> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<myMuon,allocator<myMuon> >",3230,G__eventdict_477_0_15, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMuoncOallocatorlEmyMuongRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<myMuon,allocator<myMuon> >",3230,G__eventdict_477_0_16, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMuoncOallocatorlEmyMuongRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<myMuon,allocator<myMuon> >::size_type' 0 - n u 'myMuon' - 11 'myMuon()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<myMuon,allocator<myMuon> >",3230,G__eventdict_477_0_17, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMuoncOallocatorlEmyMuongRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<myMuon,allocator<myMuon> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<myMuon,allocator<myMuon> >",3230,G__eventdict_477_0_18, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMuoncOallocatorlEmyMuongRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<myMuon,allocator<myMuon> >::iterator' 'vector<myMuon,allocator<myMuon> >::const_iterator' 10 - first u 'vector<myMuon,allocator<myMuon> >::iterator' 'vector<myMuon,allocator<myMuon> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__eventdict_477_0_19, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMuoncOallocatorlEmyMuongRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<myMuon,allocator<myMuon> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__eventdict_477_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<myMuon,allocator<myMuon> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__eventdict_477_0_21, 117, G__get_linked_tagnum(&G__eventdictLN_myMuon), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__eventdict_477_0_22, 117, G__get_linked_tagnum(&G__eventdictLN_myMuon), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__eventdict_477_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'myMuon' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__eventdict_477_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<myMuon,allocator<myMuon> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_477_0_25, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMuoncOallocatorlEmyMuongRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<myMuon,allocator<myMuon> >::iterator' - 0 - position u 'myMuon' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_477_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<myMuon,allocator<myMuon> >::iterator' - 0 - position u 'vector<myMuon,allocator<myMuon> >::iterator' 'vector<myMuon,allocator<myMuon> >::const_iterator' 10 - first "
"u 'vector<myMuon,allocator<myMuon> >::iterator' 'vector<myMuon,allocator<myMuon> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_477_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<myMuon,allocator<myMuon> >::iterator' - 0 - position k - 'vector<myMuon,allocator<myMuon> >::size_type' 0 - n "
"u 'myMuon' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__eventdict_477_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_477_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<myMuon,allocator<myMuon> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_477_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<myMuon,allocator<myMuon> >::iterator' - 0 - first u 'vector<myMuon,allocator<myMuon> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__eventdict_477_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<myMuon,allocator<myMuon> >", 3356, G__eventdict_477_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEmyMuoncOallocatorlEmyMuongRsPgRcLcLiterator(void) {
   /* vector<myMuon,allocator<myMuon> >::iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMuoncOallocatorlEmyMuongRsPgRcLcLiterator));
   G__memfunc_setup("iterator",874,G__eventdict_478_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMuoncOallocatorlEmyMuongRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("iterator",874,G__eventdict_478_0_2, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMuoncOallocatorlEmyMuongRsPgRcLcLiterator), -1, 0, 1, 5, 1, 0, "U 'myMuon' 'vector<myMuon,allocator<myMuon> >::iterator::pointer' 11 - __i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__eventdict_478_0_3, 117, G__get_linked_tagnum(&G__eventdictLN_myMuon), G__defined_typename("vector<myMuon,allocator<myMuon> >::iterator::reference"), 1, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__eventdict_478_0_4, 85, G__get_linked_tagnum(&G__eventdictLN_myMuon), G__defined_typename("vector<myMuon,allocator<myMuon> >::iterator::pointer"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__eventdict_478_0_5, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMuoncOallocatorlEmyMuongRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__eventdict_478_0_6, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMuoncOallocatorlEmyMuongRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__eventdict_478_0_7, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMuoncOallocatorlEmyMuongRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__eventdict_478_0_8, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMuoncOallocatorlEmyMuongRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_478_0_9, 117, G__get_linked_tagnum(&G__eventdictLN_myMuon), G__defined_typename("vector<myMuon,allocator<myMuon> >::iterator::reference"), 1, 1, 1, 1, 8, "l - 'vector<myMuon,allocator<myMuon> >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+=",980,G__eventdict_478_0_10, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMuoncOallocatorlEmyMuongRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "l - 'vector<myMuon,allocator<myMuon> >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+",919,G__eventdict_478_0_11, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMuoncOallocatorlEmyMuongRsPgRcLcLiterator), -1, 0, 1, 1, 1, 8, "l - 'vector<myMuon,allocator<myMuon> >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-=",982,G__eventdict_478_0_12, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMuoncOallocatorlEmyMuongRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "l - 'vector<myMuon,allocator<myMuon> >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-",921,G__eventdict_478_0_13, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMuoncOallocatorlEmyMuongRsPgRcLcLiterator), -1, 0, 1, 1, 1, 8, "l - 'vector<myMuon,allocator<myMuon> >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("base",411,G__eventdict_478_0_14, 85, G__get_linked_tagnum(&G__eventdictLN_myMuon), G__defined_typename("vector<myMuon,allocator<myMuon> >::iterator::pointer"), 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__eventdict_478_0_15, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMuoncOallocatorlEmyMuongRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'vector<myMuon,allocator<myMuon> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("iterator", 874, G__eventdict_478_0_16, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMuoncOallocatorlEmyMuongRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'vector<myMuon,allocator<myMuon> >::iterator' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~iterator", 1000, G__eventdict_478_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEmyTaucOallocatorlEmyTaugRsPgR(void) {
   /* vector<myTau,allocator<myTau> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTaucOallocatorlEmyTaugRsPgR));
   G__memfunc_setup("at",213,G__eventdict_481_0_1, 117, G__get_linked_tagnum(&G__eventdictLN_myTau), G__defined_typename("vector<myTau,allocator<myTau> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<myTau,allocator<myTau> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__eventdict_481_0_2, 117, G__get_linked_tagnum(&G__eventdictLN_myTau), G__defined_typename("vector<myTau,allocator<myTau> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<myTau,allocator<myTau> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__eventdict_481_0_3, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTaucOallocatorlEmyTaugRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__eventdict_481_0_4, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTaucOallocatorlEmyTaugRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__eventdict_481_0_5, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEmyTaucOallocatorlEmyTaugRsPgRcLcLiteratorgR), G__defined_typename("vector<myTau,allocator<myTau> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__eventdict_481_0_6, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEmyTaucOallocatorlEmyTaugRsPgRcLcLiteratorgR), G__defined_typename("vector<myTau,allocator<myTau> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__eventdict_481_0_7, 107, -1, G__defined_typename("vector<myTau,allocator<myTau> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__eventdict_481_0_8, 107, -1, G__defined_typename("vector<myTau,allocator<myTau> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_481_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<myTau,allocator<myTau> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_481_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<myTau,allocator<myTau> >::size_type' 0 - sz u 'myTau' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__eventdict_481_0_11, 107, -1, G__defined_typename("vector<myTau,allocator<myTau> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__eventdict_481_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_481_0_13, 117, G__get_linked_tagnum(&G__eventdictLN_myTau), G__defined_typename("vector<myTau,allocator<myTau> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<myTau,allocator<myTau> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_481_0_14, 117, G__get_linked_tagnum(&G__eventdictLN_myTau), G__defined_typename("vector<myTau,allocator<myTau> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<myTau,allocator<myTau> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<myTau,allocator<myTau> >",2996,G__eventdict_481_0_15, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTaucOallocatorlEmyTaugRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<myTau,allocator<myTau> >",2996,G__eventdict_481_0_16, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTaucOallocatorlEmyTaugRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<myTau,allocator<myTau> >::size_type' 0 - n u 'myTau' - 11 'myTau()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<myTau,allocator<myTau> >",2996,G__eventdict_481_0_17, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTaucOallocatorlEmyTaugRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<myTau,allocator<myTau> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<myTau,allocator<myTau> >",2996,G__eventdict_481_0_18, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTaucOallocatorlEmyTaugRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<myTau,allocator<myTau> >::iterator' 'vector<myTau,allocator<myTau> >::const_iterator' 10 - first u 'vector<myTau,allocator<myTau> >::iterator' 'vector<myTau,allocator<myTau> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__eventdict_481_0_19, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTaucOallocatorlEmyTaugRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<myTau,allocator<myTau> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__eventdict_481_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<myTau,allocator<myTau> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__eventdict_481_0_21, 117, G__get_linked_tagnum(&G__eventdictLN_myTau), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__eventdict_481_0_22, 117, G__get_linked_tagnum(&G__eventdictLN_myTau), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__eventdict_481_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'myTau' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__eventdict_481_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<myTau,allocator<myTau> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_481_0_25, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTaucOallocatorlEmyTaugRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<myTau,allocator<myTau> >::iterator' - 0 - position u 'myTau' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_481_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<myTau,allocator<myTau> >::iterator' - 0 - position u 'vector<myTau,allocator<myTau> >::iterator' 'vector<myTau,allocator<myTau> >::const_iterator' 10 - first "
"u 'vector<myTau,allocator<myTau> >::iterator' 'vector<myTau,allocator<myTau> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_481_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<myTau,allocator<myTau> >::iterator' - 0 - position k - 'vector<myTau,allocator<myTau> >::size_type' 0 - n "
"u 'myTau' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__eventdict_481_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_481_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<myTau,allocator<myTau> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_481_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<myTau,allocator<myTau> >::iterator' - 0 - first u 'vector<myTau,allocator<myTau> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__eventdict_481_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<myTau,allocator<myTau> >", 3122, G__eventdict_481_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEmyTaucOallocatorlEmyTaugRsPgRcLcLiterator(void) {
   /* vector<myTau,allocator<myTau> >::iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTaucOallocatorlEmyTaugRsPgRcLcLiterator));
   G__memfunc_setup("iterator",874,G__eventdict_482_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTaucOallocatorlEmyTaugRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("iterator",874,G__eventdict_482_0_2, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTaucOallocatorlEmyTaugRsPgRcLcLiterator), -1, 0, 1, 5, 1, 0, "U 'myTau' 'vector<myTau,allocator<myTau> >::iterator::pointer' 11 - __i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__eventdict_482_0_3, 117, G__get_linked_tagnum(&G__eventdictLN_myTau), G__defined_typename("vector<myTau,allocator<myTau> >::iterator::reference"), 1, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__eventdict_482_0_4, 85, G__get_linked_tagnum(&G__eventdictLN_myTau), G__defined_typename("vector<myTau,allocator<myTau> >::iterator::pointer"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__eventdict_482_0_5, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTaucOallocatorlEmyTaugRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__eventdict_482_0_6, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTaucOallocatorlEmyTaugRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__eventdict_482_0_7, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTaucOallocatorlEmyTaugRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__eventdict_482_0_8, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTaucOallocatorlEmyTaugRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_482_0_9, 117, G__get_linked_tagnum(&G__eventdictLN_myTau), G__defined_typename("vector<myTau,allocator<myTau> >::iterator::reference"), 1, 1, 1, 1, 8, "l - 'vector<myTau,allocator<myTau> >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+=",980,G__eventdict_482_0_10, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTaucOallocatorlEmyTaugRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "l - 'vector<myTau,allocator<myTau> >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+",919,G__eventdict_482_0_11, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTaucOallocatorlEmyTaugRsPgRcLcLiterator), -1, 0, 1, 1, 1, 8, "l - 'vector<myTau,allocator<myTau> >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-=",982,G__eventdict_482_0_12, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTaucOallocatorlEmyTaugRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "l - 'vector<myTau,allocator<myTau> >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-",921,G__eventdict_482_0_13, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTaucOallocatorlEmyTaugRsPgRcLcLiterator), -1, 0, 1, 1, 1, 8, "l - 'vector<myTau,allocator<myTau> >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("base",411,G__eventdict_482_0_14, 85, G__get_linked_tagnum(&G__eventdictLN_myTau), G__defined_typename("vector<myTau,allocator<myTau> >::iterator::pointer"), 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__eventdict_482_0_15, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTaucOallocatorlEmyTaugRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'vector<myTau,allocator<myTau> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("iterator", 874, G__eventdict_482_0_16, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTaucOallocatorlEmyTaugRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'vector<myTau,allocator<myTau> >::iterator' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~iterator", 1000, G__eventdict_482_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEmyMETcOallocatorlEmyMETgRsPgR(void) {
   /* vector<myMET,allocator<myMET> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMETcOallocatorlEmyMETgRsPgR));
   G__memfunc_setup("at",213,G__eventdict_485_0_1, 117, G__get_linked_tagnum(&G__eventdictLN_myMET), G__defined_typename("vector<myMET,allocator<myMET> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<myMET,allocator<myMET> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__eventdict_485_0_2, 117, G__get_linked_tagnum(&G__eventdictLN_myMET), G__defined_typename("vector<myMET,allocator<myMET> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<myMET,allocator<myMET> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__eventdict_485_0_3, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMETcOallocatorlEmyMETgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__eventdict_485_0_4, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMETcOallocatorlEmyMETgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__eventdict_485_0_5, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEmyMETcOallocatorlEmyMETgRsPgRcLcLiteratorgR), G__defined_typename("vector<myMET,allocator<myMET> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__eventdict_485_0_6, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEmyMETcOallocatorlEmyMETgRsPgRcLcLiteratorgR), G__defined_typename("vector<myMET,allocator<myMET> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__eventdict_485_0_7, 107, -1, G__defined_typename("vector<myMET,allocator<myMET> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__eventdict_485_0_8, 107, -1, G__defined_typename("vector<myMET,allocator<myMET> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_485_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<myMET,allocator<myMET> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_485_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<myMET,allocator<myMET> >::size_type' 0 - sz u 'myMET' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__eventdict_485_0_11, 107, -1, G__defined_typename("vector<myMET,allocator<myMET> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__eventdict_485_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_485_0_13, 117, G__get_linked_tagnum(&G__eventdictLN_myMET), G__defined_typename("vector<myMET,allocator<myMET> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<myMET,allocator<myMET> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_485_0_14, 117, G__get_linked_tagnum(&G__eventdictLN_myMET), G__defined_typename("vector<myMET,allocator<myMET> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<myMET,allocator<myMET> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<myMET,allocator<myMET> >",2860,G__eventdict_485_0_15, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMETcOallocatorlEmyMETgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<myMET,allocator<myMET> >",2860,G__eventdict_485_0_16, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMETcOallocatorlEmyMETgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<myMET,allocator<myMET> >::size_type' 0 - n u 'myMET' - 11 'myMET()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<myMET,allocator<myMET> >",2860,G__eventdict_485_0_17, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMETcOallocatorlEmyMETgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<myMET,allocator<myMET> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<myMET,allocator<myMET> >",2860,G__eventdict_485_0_18, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMETcOallocatorlEmyMETgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<myMET,allocator<myMET> >::iterator' 'vector<myMET,allocator<myMET> >::const_iterator' 10 - first u 'vector<myMET,allocator<myMET> >::iterator' 'vector<myMET,allocator<myMET> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__eventdict_485_0_19, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMETcOallocatorlEmyMETgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<myMET,allocator<myMET> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__eventdict_485_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<myMET,allocator<myMET> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__eventdict_485_0_21, 117, G__get_linked_tagnum(&G__eventdictLN_myMET), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__eventdict_485_0_22, 117, G__get_linked_tagnum(&G__eventdictLN_myMET), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__eventdict_485_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'myMET' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__eventdict_485_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<myMET,allocator<myMET> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_485_0_25, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMETcOallocatorlEmyMETgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<myMET,allocator<myMET> >::iterator' - 0 - position u 'myMET' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_485_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<myMET,allocator<myMET> >::iterator' - 0 - position u 'vector<myMET,allocator<myMET> >::iterator' 'vector<myMET,allocator<myMET> >::const_iterator' 10 - first "
"u 'vector<myMET,allocator<myMET> >::iterator' 'vector<myMET,allocator<myMET> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_485_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<myMET,allocator<myMET> >::iterator' - 0 - position k - 'vector<myMET,allocator<myMET> >::size_type' 0 - n "
"u 'myMET' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__eventdict_485_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_485_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<myMET,allocator<myMET> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_485_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<myMET,allocator<myMET> >::iterator' - 0 - first u 'vector<myMET,allocator<myMET> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__eventdict_485_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<myMET,allocator<myMET> >", 2986, G__eventdict_485_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEmyMETcOallocatorlEmyMETgRsPgRcLcLiterator(void) {
   /* vector<myMET,allocator<myMET> >::iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMETcOallocatorlEmyMETgRsPgRcLcLiterator));
   G__memfunc_setup("iterator",874,G__eventdict_486_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMETcOallocatorlEmyMETgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("iterator",874,G__eventdict_486_0_2, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMETcOallocatorlEmyMETgRsPgRcLcLiterator), -1, 0, 1, 5, 1, 0, "U 'myMET' 'vector<myMET,allocator<myMET> >::iterator::pointer' 11 - __i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__eventdict_486_0_3, 117, G__get_linked_tagnum(&G__eventdictLN_myMET), G__defined_typename("vector<myMET,allocator<myMET> >::iterator::reference"), 1, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__eventdict_486_0_4, 85, G__get_linked_tagnum(&G__eventdictLN_myMET), G__defined_typename("vector<myMET,allocator<myMET> >::iterator::pointer"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__eventdict_486_0_5, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMETcOallocatorlEmyMETgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__eventdict_486_0_6, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMETcOallocatorlEmyMETgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__eventdict_486_0_7, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMETcOallocatorlEmyMETgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__eventdict_486_0_8, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMETcOallocatorlEmyMETgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_486_0_9, 117, G__get_linked_tagnum(&G__eventdictLN_myMET), G__defined_typename("vector<myMET,allocator<myMET> >::iterator::reference"), 1, 1, 1, 1, 8, "l - 'vector<myMET,allocator<myMET> >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+=",980,G__eventdict_486_0_10, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMETcOallocatorlEmyMETgRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "l - 'vector<myMET,allocator<myMET> >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+",919,G__eventdict_486_0_11, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMETcOallocatorlEmyMETgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 8, "l - 'vector<myMET,allocator<myMET> >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-=",982,G__eventdict_486_0_12, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMETcOallocatorlEmyMETgRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "l - 'vector<myMET,allocator<myMET> >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-",921,G__eventdict_486_0_13, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMETcOallocatorlEmyMETgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 8, "l - 'vector<myMET,allocator<myMET> >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("base",411,G__eventdict_486_0_14, 85, G__get_linked_tagnum(&G__eventdictLN_myMET), G__defined_typename("vector<myMET,allocator<myMET> >::iterator::pointer"), 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__eventdict_486_0_15, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMETcOallocatorlEmyMETgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'vector<myMET,allocator<myMET> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("iterator", 874, G__eventdict_486_0_16, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMETcOallocatorlEmyMETgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'vector<myMET,allocator<myMET> >::iterator' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~iterator", 1000, G__eventdict_486_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEmyVertexcOallocatorlEmyVertexgRsPgR(void) {
   /* vector<myVertex,allocator<myVertex> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEmyVertexcOallocatorlEmyVertexgRsPgR));
   G__memfunc_setup("at",213,G__eventdict_489_0_1, 117, G__get_linked_tagnum(&G__eventdictLN_myVertex), G__defined_typename("vector<myVertex,allocator<myVertex> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<myVertex,allocator<myVertex> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__eventdict_489_0_2, 117, G__get_linked_tagnum(&G__eventdictLN_myVertex), G__defined_typename("vector<myVertex,allocator<myVertex> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<myVertex,allocator<myVertex> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__eventdict_489_0_3, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyVertexcOallocatorlEmyVertexgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__eventdict_489_0_4, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyVertexcOallocatorlEmyVertexgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__eventdict_489_0_5, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEmyVertexcOallocatorlEmyVertexgRsPgRcLcLiteratorgR), G__defined_typename("vector<myVertex,allocator<myVertex> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__eventdict_489_0_6, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEmyVertexcOallocatorlEmyVertexgRsPgRcLcLiteratorgR), G__defined_typename("vector<myVertex,allocator<myVertex> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__eventdict_489_0_7, 107, -1, G__defined_typename("vector<myVertex,allocator<myVertex> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__eventdict_489_0_8, 107, -1, G__defined_typename("vector<myVertex,allocator<myVertex> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_489_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<myVertex,allocator<myVertex> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_489_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<myVertex,allocator<myVertex> >::size_type' 0 - sz u 'myVertex' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__eventdict_489_0_11, 107, -1, G__defined_typename("vector<myVertex,allocator<myVertex> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__eventdict_489_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_489_0_13, 117, G__get_linked_tagnum(&G__eventdictLN_myVertex), G__defined_typename("vector<myVertex,allocator<myVertex> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<myVertex,allocator<myVertex> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_489_0_14, 117, G__get_linked_tagnum(&G__eventdictLN_myVertex), G__defined_typename("vector<myVertex,allocator<myVertex> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<myVertex,allocator<myVertex> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<myVertex,allocator<myVertex> >",3676,G__eventdict_489_0_15, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyVertexcOallocatorlEmyVertexgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<myVertex,allocator<myVertex> >",3676,G__eventdict_489_0_16, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyVertexcOallocatorlEmyVertexgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<myVertex,allocator<myVertex> >::size_type' 0 - n u 'myVertex' - 11 'myVertex()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<myVertex,allocator<myVertex> >",3676,G__eventdict_489_0_17, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyVertexcOallocatorlEmyVertexgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<myVertex,allocator<myVertex> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<myVertex,allocator<myVertex> >",3676,G__eventdict_489_0_18, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyVertexcOallocatorlEmyVertexgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<myVertex,allocator<myVertex> >::iterator' 'vector<myVertex,allocator<myVertex> >::const_iterator' 10 - first u 'vector<myVertex,allocator<myVertex> >::iterator' 'vector<myVertex,allocator<myVertex> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__eventdict_489_0_19, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyVertexcOallocatorlEmyVertexgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<myVertex,allocator<myVertex> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__eventdict_489_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<myVertex,allocator<myVertex> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__eventdict_489_0_21, 117, G__get_linked_tagnum(&G__eventdictLN_myVertex), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__eventdict_489_0_22, 117, G__get_linked_tagnum(&G__eventdictLN_myVertex), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__eventdict_489_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'myVertex' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__eventdict_489_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<myVertex,allocator<myVertex> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_489_0_25, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyVertexcOallocatorlEmyVertexgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<myVertex,allocator<myVertex> >::iterator' - 0 - position u 'myVertex' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_489_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<myVertex,allocator<myVertex> >::iterator' - 0 - position u 'vector<myVertex,allocator<myVertex> >::iterator' 'vector<myVertex,allocator<myVertex> >::const_iterator' 10 - first "
"u 'vector<myVertex,allocator<myVertex> >::iterator' 'vector<myVertex,allocator<myVertex> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_489_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<myVertex,allocator<myVertex> >::iterator' - 0 - position k - 'vector<myVertex,allocator<myVertex> >::size_type' 0 - n "
"u 'myVertex' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__eventdict_489_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_489_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<myVertex,allocator<myVertex> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_489_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<myVertex,allocator<myVertex> >::iterator' - 0 - first u 'vector<myVertex,allocator<myVertex> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__eventdict_489_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<myVertex,allocator<myVertex> >", 3802, G__eventdict_489_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEmyVertexcOallocatorlEmyVertexgRsPgRcLcLiterator(void) {
   /* vector<myVertex,allocator<myVertex> >::iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEmyVertexcOallocatorlEmyVertexgRsPgRcLcLiterator));
   G__memfunc_setup("iterator",874,G__eventdict_490_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyVertexcOallocatorlEmyVertexgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("iterator",874,G__eventdict_490_0_2, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyVertexcOallocatorlEmyVertexgRsPgRcLcLiterator), -1, 0, 1, 5, 1, 0, "U 'myVertex' 'vector<myVertex,allocator<myVertex> >::iterator::pointer' 11 - __i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__eventdict_490_0_3, 117, G__get_linked_tagnum(&G__eventdictLN_myVertex), G__defined_typename("vector<myVertex,allocator<myVertex> >::iterator::reference"), 1, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__eventdict_490_0_4, 85, G__get_linked_tagnum(&G__eventdictLN_myVertex), G__defined_typename("vector<myVertex,allocator<myVertex> >::iterator::pointer"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__eventdict_490_0_5, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyVertexcOallocatorlEmyVertexgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__eventdict_490_0_6, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyVertexcOallocatorlEmyVertexgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__eventdict_490_0_7, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyVertexcOallocatorlEmyVertexgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__eventdict_490_0_8, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyVertexcOallocatorlEmyVertexgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_490_0_9, 117, G__get_linked_tagnum(&G__eventdictLN_myVertex), G__defined_typename("vector<myVertex,allocator<myVertex> >::iterator::reference"), 1, 1, 1, 1, 8, "l - 'vector<myVertex,allocator<myVertex> >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+=",980,G__eventdict_490_0_10, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyVertexcOallocatorlEmyVertexgRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "l - 'vector<myVertex,allocator<myVertex> >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+",919,G__eventdict_490_0_11, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyVertexcOallocatorlEmyVertexgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 8, "l - 'vector<myVertex,allocator<myVertex> >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-=",982,G__eventdict_490_0_12, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyVertexcOallocatorlEmyVertexgRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "l - 'vector<myVertex,allocator<myVertex> >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-",921,G__eventdict_490_0_13, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyVertexcOallocatorlEmyVertexgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 8, "l - 'vector<myVertex,allocator<myVertex> >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("base",411,G__eventdict_490_0_14, 85, G__get_linked_tagnum(&G__eventdictLN_myVertex), G__defined_typename("vector<myVertex,allocator<myVertex> >::iterator::pointer"), 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__eventdict_490_0_15, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyVertexcOallocatorlEmyVertexgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'vector<myVertex,allocator<myVertex> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("iterator", 874, G__eventdict_490_0_16, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_vectorlEmyVertexcOallocatorlEmyVertexgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'vector<myVertex,allocator<myVertex> >::iterator' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~iterator", 1000, G__eventdict_490_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEmySVcOallocatorlEmySVgRsPgR(void) {
   /* vector<mySV,allocator<mySV> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEmySVcOallocatorlEmySVgRsPgR));
   G__memfunc_setup("at",213,G__eventdict_493_0_1, 117, G__get_linked_tagnum(&G__eventdictLN_mySV), G__defined_typename("vector<mySV,allocator<mySV> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<mySV,allocator<mySV> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__eventdict_493_0_2, 117, G__get_linked_tagnum(&G__eventdictLN_mySV), G__defined_typename("vector<mySV,allocator<mySV> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<mySV,allocator<mySV> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__eventdict_493_0_3, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmySVcOallocatorlEmySVgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__eventdict_493_0_4, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmySVcOallocatorlEmySVgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__eventdict_493_0_5, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEmySVcOallocatorlEmySVgRsPgRcLcLiteratorgR), G__defined_typename("vector<mySV,allocator<mySV> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__eventdict_493_0_6, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEmySVcOallocatorlEmySVgRsPgRcLcLiteratorgR), G__defined_typename("vector<mySV,allocator<mySV> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__eventdict_493_0_7, 107, -1, G__defined_typename("vector<mySV,allocator<mySV> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__eventdict_493_0_8, 107, -1, G__defined_typename("vector<mySV,allocator<mySV> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_493_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<mySV,allocator<mySV> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_493_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<mySV,allocator<mySV> >::size_type' 0 - sz u 'mySV' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__eventdict_493_0_11, 107, -1, G__defined_typename("vector<mySV,allocator<mySV> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__eventdict_493_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_493_0_13, 117, G__get_linked_tagnum(&G__eventdictLN_mySV), G__defined_typename("vector<mySV,allocator<mySV> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<mySV,allocator<mySV> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_493_0_14, 117, G__get_linked_tagnum(&G__eventdictLN_mySV), G__defined_typename("vector<mySV,allocator<mySV> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<mySV,allocator<mySV> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<mySV,allocator<mySV> >",2738,G__eventdict_493_0_15, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEmySVcOallocatorlEmySVgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<mySV,allocator<mySV> >",2738,G__eventdict_493_0_16, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEmySVcOallocatorlEmySVgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<mySV,allocator<mySV> >::size_type' 0 - n u 'mySV' - 11 'mySV()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<mySV,allocator<mySV> >",2738,G__eventdict_493_0_17, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEmySVcOallocatorlEmySVgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<mySV,allocator<mySV> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<mySV,allocator<mySV> >",2738,G__eventdict_493_0_18, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEmySVcOallocatorlEmySVgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<mySV,allocator<mySV> >::iterator' 'vector<mySV,allocator<mySV> >::const_iterator' 10 - first u 'vector<mySV,allocator<mySV> >::iterator' 'vector<mySV,allocator<mySV> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__eventdict_493_0_19, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmySVcOallocatorlEmySVgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<mySV,allocator<mySV> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__eventdict_493_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<mySV,allocator<mySV> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__eventdict_493_0_21, 117, G__get_linked_tagnum(&G__eventdictLN_mySV), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__eventdict_493_0_22, 117, G__get_linked_tagnum(&G__eventdictLN_mySV), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__eventdict_493_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'mySV' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__eventdict_493_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<mySV,allocator<mySV> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_493_0_25, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmySVcOallocatorlEmySVgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<mySV,allocator<mySV> >::iterator' - 0 - position u 'mySV' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_493_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<mySV,allocator<mySV> >::iterator' - 0 - position u 'vector<mySV,allocator<mySV> >::iterator' 'vector<mySV,allocator<mySV> >::const_iterator' 10 - first "
"u 'vector<mySV,allocator<mySV> >::iterator' 'vector<mySV,allocator<mySV> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_493_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<mySV,allocator<mySV> >::iterator' - 0 - position k - 'vector<mySV,allocator<mySV> >::size_type' 0 - n "
"u 'mySV' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__eventdict_493_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_493_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<mySV,allocator<mySV> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_493_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<mySV,allocator<mySV> >::iterator' - 0 - first u 'vector<mySV,allocator<mySV> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__eventdict_493_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<mySV,allocator<mySV> >", 2864, G__eventdict_493_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEmySVcOallocatorlEmySVgRsPgRcLcLiterator(void) {
   /* vector<mySV,allocator<mySV> >::iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEmySVcOallocatorlEmySVgRsPgRcLcLiterator));
   G__memfunc_setup("iterator",874,G__eventdict_494_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEmySVcOallocatorlEmySVgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("iterator",874,G__eventdict_494_0_2, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEmySVcOallocatorlEmySVgRsPgRcLcLiterator), -1, 0, 1, 5, 1, 0, "U 'mySV' 'vector<mySV,allocator<mySV> >::iterator::pointer' 11 - __i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__eventdict_494_0_3, 117, G__get_linked_tagnum(&G__eventdictLN_mySV), G__defined_typename("vector<mySV,allocator<mySV> >::iterator::reference"), 1, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__eventdict_494_0_4, 85, G__get_linked_tagnum(&G__eventdictLN_mySV), G__defined_typename("vector<mySV,allocator<mySV> >::iterator::pointer"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__eventdict_494_0_5, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmySVcOallocatorlEmySVgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__eventdict_494_0_6, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmySVcOallocatorlEmySVgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__eventdict_494_0_7, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmySVcOallocatorlEmySVgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__eventdict_494_0_8, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmySVcOallocatorlEmySVgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_494_0_9, 117, G__get_linked_tagnum(&G__eventdictLN_mySV), G__defined_typename("vector<mySV,allocator<mySV> >::iterator::reference"), 1, 1, 1, 1, 8, "l - 'vector<mySV,allocator<mySV> >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+=",980,G__eventdict_494_0_10, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmySVcOallocatorlEmySVgRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "l - 'vector<mySV,allocator<mySV> >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+",919,G__eventdict_494_0_11, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmySVcOallocatorlEmySVgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 8, "l - 'vector<mySV,allocator<mySV> >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-=",982,G__eventdict_494_0_12, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmySVcOallocatorlEmySVgRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "l - 'vector<mySV,allocator<mySV> >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-",921,G__eventdict_494_0_13, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmySVcOallocatorlEmySVgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 8, "l - 'vector<mySV,allocator<mySV> >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("base",411,G__eventdict_494_0_14, 85, G__get_linked_tagnum(&G__eventdictLN_mySV), G__defined_typename("vector<mySV,allocator<mySV> >::iterator::pointer"), 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__eventdict_494_0_15, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmySVcOallocatorlEmySVgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'vector<mySV,allocator<mySV> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("iterator", 874, G__eventdict_494_0_16, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_vectorlEmySVcOallocatorlEmySVgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'vector<mySV,allocator<mySV> >::iterator' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~iterator", 1000, G__eventdict_494_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfunceventdict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globaleventdict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
   G__memfunc_setup("operator==", 998, G__eventdict__0_1751, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'vector<myGenObject,allocator<myGenObject> >::iterator' - 11 - x u 'vector<myGenObject,allocator<myGenObject> >::iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__eventdict__0_1752, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'vector<myGenObject,allocator<myGenObject> >::iterator' - 11 - x u 'vector<myGenObject,allocator<myGenObject> >::iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<", 936, G__eventdict__0_1753, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'vector<myGenObject,allocator<myGenObject> >::iterator' - 11 - x u 'vector<myGenObject,allocator<myGenObject> >::iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>", 938, G__eventdict__0_1754, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'vector<myGenObject,allocator<myGenObject> >::iterator' - 11 - x u 'vector<myGenObject,allocator<myGenObject> >::iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<=", 997, G__eventdict__0_1755, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'vector<myGenObject,allocator<myGenObject> >::iterator' - 11 - x u 'vector<myGenObject,allocator<myGenObject> >::iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>=", 999, G__eventdict__0_1756, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'vector<myGenObject,allocator<myGenObject> >::iterator' - 11 - x u 'vector<myGenObject,allocator<myGenObject> >::iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator-", 921, G__eventdict__0_1757, 108, -1, G__defined_typename("difference_type"), 0, 2, 1, 1, 8, 
"u 'vector<myGenObject,allocator<myGenObject> >::iterator' - 11 - x u 'vector<myGenObject,allocator<myGenObject> >::iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator+", 919, G__eventdict__0_1758, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 8, 
"l - 'difference_type' 10 - x u 'vector<myGenObject,allocator<myGenObject> >::iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__eventdict__0_1819, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'vector<myTriggerObject,allocator<myTriggerObject> >::iterator' - 11 - x u 'vector<myTriggerObject,allocator<myTriggerObject> >::iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__eventdict__0_1820, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'vector<myTriggerObject,allocator<myTriggerObject> >::iterator' - 11 - x u 'vector<myTriggerObject,allocator<myTriggerObject> >::iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<", 936, G__eventdict__0_1821, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'vector<myTriggerObject,allocator<myTriggerObject> >::iterator' - 11 - x u 'vector<myTriggerObject,allocator<myTriggerObject> >::iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>", 938, G__eventdict__0_1822, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'vector<myTriggerObject,allocator<myTriggerObject> >::iterator' - 11 - x u 'vector<myTriggerObject,allocator<myTriggerObject> >::iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<=", 997, G__eventdict__0_1823, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'vector<myTriggerObject,allocator<myTriggerObject> >::iterator' - 11 - x u 'vector<myTriggerObject,allocator<myTriggerObject> >::iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>=", 999, G__eventdict__0_1824, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'vector<myTriggerObject,allocator<myTriggerObject> >::iterator' - 11 - x u 'vector<myTriggerObject,allocator<myTriggerObject> >::iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator-", 921, G__eventdict__0_1825, 108, -1, G__defined_typename("difference_type"), 0, 2, 1, 1, 8, 
"u 'vector<myTriggerObject,allocator<myTriggerObject> >::iterator' - 11 - x u 'vector<myTriggerObject,allocator<myTriggerObject> >::iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator+", 919, G__eventdict__0_1826, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 8, 
"l - 'difference_type' 10 - x u 'vector<myTriggerObject,allocator<myTriggerObject> >::iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
}

static void G__cpp_setup_func18() {
   G__memfunc_setup("operator==", 998, G__eventdict__0_1887, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'vector<myJet,allocator<myJet> >::iterator' - 11 - x u 'vector<myJet,allocator<myJet> >::iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__eventdict__0_1888, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'vector<myJet,allocator<myJet> >::iterator' - 11 - x u 'vector<myJet,allocator<myJet> >::iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<", 936, G__eventdict__0_1889, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'vector<myJet,allocator<myJet> >::iterator' - 11 - x u 'vector<myJet,allocator<myJet> >::iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>", 938, G__eventdict__0_1890, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'vector<myJet,allocator<myJet> >::iterator' - 11 - x u 'vector<myJet,allocator<myJet> >::iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<=", 997, G__eventdict__0_1891, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'vector<myJet,allocator<myJet> >::iterator' - 11 - x u 'vector<myJet,allocator<myJet> >::iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>=", 999, G__eventdict__0_1892, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'vector<myJet,allocator<myJet> >::iterator' - 11 - x u 'vector<myJet,allocator<myJet> >::iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator-", 921, G__eventdict__0_1893, 108, -1, G__defined_typename("difference_type"), 0, 2, 1, 1, 8, 
"u 'vector<myJet,allocator<myJet> >::iterator' - 11 - x u 'vector<myJet,allocator<myJet> >::iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator+", 919, G__eventdict__0_1894, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyJetcOallocatorlEmyJetgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 8, 
"l - 'difference_type' 10 - x u 'vector<myJet,allocator<myJet> >::iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
}

static void G__cpp_setup_func19() {
   G__memfunc_setup("operator==", 998, G__eventdict__0_1955, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'vector<myElectron,allocator<myElectron> >::iterator' - 11 - x u 'vector<myElectron,allocator<myElectron> >::iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__eventdict__0_1956, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'vector<myElectron,allocator<myElectron> >::iterator' - 11 - x u 'vector<myElectron,allocator<myElectron> >::iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<", 936, G__eventdict__0_1957, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'vector<myElectron,allocator<myElectron> >::iterator' - 11 - x u 'vector<myElectron,allocator<myElectron> >::iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>", 938, G__eventdict__0_1958, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'vector<myElectron,allocator<myElectron> >::iterator' - 11 - x u 'vector<myElectron,allocator<myElectron> >::iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<=", 997, G__eventdict__0_1959, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'vector<myElectron,allocator<myElectron> >::iterator' - 11 - x u 'vector<myElectron,allocator<myElectron> >::iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>=", 999, G__eventdict__0_1960, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'vector<myElectron,allocator<myElectron> >::iterator' - 11 - x u 'vector<myElectron,allocator<myElectron> >::iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator-", 921, G__eventdict__0_1961, 108, -1, G__defined_typename("difference_type"), 0, 2, 1, 1, 8, 
"u 'vector<myElectron,allocator<myElectron> >::iterator' - 11 - x u 'vector<myElectron,allocator<myElectron> >::iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator+", 919, G__eventdict__0_1962, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyElectroncOallocatorlEmyElectrongRsPgRcLcLiterator), -1, 0, 2, 1, 1, 8, 
"l - 'difference_type' 10 - x u 'vector<myElectron,allocator<myElectron> >::iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__eventdict__0_2023, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'vector<myMuon,allocator<myMuon> >::iterator' - 11 - x u 'vector<myMuon,allocator<myMuon> >::iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__eventdict__0_2024, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'vector<myMuon,allocator<myMuon> >::iterator' - 11 - x u 'vector<myMuon,allocator<myMuon> >::iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<", 936, G__eventdict__0_2025, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'vector<myMuon,allocator<myMuon> >::iterator' - 11 - x u 'vector<myMuon,allocator<myMuon> >::iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>", 938, G__eventdict__0_2026, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'vector<myMuon,allocator<myMuon> >::iterator' - 11 - x u 'vector<myMuon,allocator<myMuon> >::iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<=", 997, G__eventdict__0_2027, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'vector<myMuon,allocator<myMuon> >::iterator' - 11 - x u 'vector<myMuon,allocator<myMuon> >::iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>=", 999, G__eventdict__0_2028, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'vector<myMuon,allocator<myMuon> >::iterator' - 11 - x u 'vector<myMuon,allocator<myMuon> >::iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator-", 921, G__eventdict__0_2029, 108, -1, G__defined_typename("difference_type"), 0, 2, 1, 1, 8, 
"u 'vector<myMuon,allocator<myMuon> >::iterator' - 11 - x u 'vector<myMuon,allocator<myMuon> >::iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator+", 919, G__eventdict__0_2030, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMuoncOallocatorlEmyMuongRsPgRcLcLiterator), -1, 0, 2, 1, 1, 8, 
"l - 'difference_type' 10 - x u 'vector<myMuon,allocator<myMuon> >::iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
}

static void G__cpp_setup_func20() {
   G__memfunc_setup("operator==", 998, G__eventdict__0_2091, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'vector<myTau,allocator<myTau> >::iterator' - 11 - x u 'vector<myTau,allocator<myTau> >::iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__eventdict__0_2092, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'vector<myTau,allocator<myTau> >::iterator' - 11 - x u 'vector<myTau,allocator<myTau> >::iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<", 936, G__eventdict__0_2093, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'vector<myTau,allocator<myTau> >::iterator' - 11 - x u 'vector<myTau,allocator<myTau> >::iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>", 938, G__eventdict__0_2094, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'vector<myTau,allocator<myTau> >::iterator' - 11 - x u 'vector<myTau,allocator<myTau> >::iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<=", 997, G__eventdict__0_2095, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'vector<myTau,allocator<myTau> >::iterator' - 11 - x u 'vector<myTau,allocator<myTau> >::iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>=", 999, G__eventdict__0_2096, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'vector<myTau,allocator<myTau> >::iterator' - 11 - x u 'vector<myTau,allocator<myTau> >::iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator-", 921, G__eventdict__0_2097, 108, -1, G__defined_typename("difference_type"), 0, 2, 1, 1, 8, 
"u 'vector<myTau,allocator<myTau> >::iterator' - 11 - x u 'vector<myTau,allocator<myTau> >::iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator+", 919, G__eventdict__0_2098, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyTaucOallocatorlEmyTaugRsPgRcLcLiterator), -1, 0, 2, 1, 1, 8, 
"l - 'difference_type' 10 - x u 'vector<myTau,allocator<myTau> >::iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
}

static void G__cpp_setup_func21() {
   G__memfunc_setup("operator==", 998, G__eventdict__0_2159, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'vector<myMET,allocator<myMET> >::iterator' - 11 - x u 'vector<myMET,allocator<myMET> >::iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__eventdict__0_2160, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'vector<myMET,allocator<myMET> >::iterator' - 11 - x u 'vector<myMET,allocator<myMET> >::iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<", 936, G__eventdict__0_2161, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'vector<myMET,allocator<myMET> >::iterator' - 11 - x u 'vector<myMET,allocator<myMET> >::iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>", 938, G__eventdict__0_2162, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'vector<myMET,allocator<myMET> >::iterator' - 11 - x u 'vector<myMET,allocator<myMET> >::iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<=", 997, G__eventdict__0_2163, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'vector<myMET,allocator<myMET> >::iterator' - 11 - x u 'vector<myMET,allocator<myMET> >::iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>=", 999, G__eventdict__0_2164, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'vector<myMET,allocator<myMET> >::iterator' - 11 - x u 'vector<myMET,allocator<myMET> >::iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator-", 921, G__eventdict__0_2165, 108, -1, G__defined_typename("difference_type"), 0, 2, 1, 1, 8, 
"u 'vector<myMET,allocator<myMET> >::iterator' - 11 - x u 'vector<myMET,allocator<myMET> >::iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator+", 919, G__eventdict__0_2166, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyMETcOallocatorlEmyMETgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 8, 
"l - 'difference_type' 10 - x u 'vector<myMET,allocator<myMET> >::iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__eventdict__0_2227, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'vector<myVertex,allocator<myVertex> >::iterator' - 11 - x u 'vector<myVertex,allocator<myVertex> >::iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__eventdict__0_2228, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'vector<myVertex,allocator<myVertex> >::iterator' - 11 - x u 'vector<myVertex,allocator<myVertex> >::iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<", 936, G__eventdict__0_2229, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'vector<myVertex,allocator<myVertex> >::iterator' - 11 - x u 'vector<myVertex,allocator<myVertex> >::iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>", 938, G__eventdict__0_2230, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'vector<myVertex,allocator<myVertex> >::iterator' - 11 - x u 'vector<myVertex,allocator<myVertex> >::iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<=", 997, G__eventdict__0_2231, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'vector<myVertex,allocator<myVertex> >::iterator' - 11 - x u 'vector<myVertex,allocator<myVertex> >::iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>=", 999, G__eventdict__0_2232, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'vector<myVertex,allocator<myVertex> >::iterator' - 11 - x u 'vector<myVertex,allocator<myVertex> >::iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator-", 921, G__eventdict__0_2233, 108, -1, G__defined_typename("difference_type"), 0, 2, 1, 1, 8, 
"u 'vector<myVertex,allocator<myVertex> >::iterator' - 11 - x u 'vector<myVertex,allocator<myVertex> >::iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator+", 919, G__eventdict__0_2234, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmyVertexcOallocatorlEmyVertexgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 8, 
"l - 'difference_type' 10 - x u 'vector<myVertex,allocator<myVertex> >::iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
}

static void G__cpp_setup_func22() {
   G__memfunc_setup("operator==", 998, G__eventdict__0_2295, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'vector<mySV,allocator<mySV> >::iterator' - 11 - x u 'vector<mySV,allocator<mySV> >::iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__eventdict__0_2296, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'vector<mySV,allocator<mySV> >::iterator' - 11 - x u 'vector<mySV,allocator<mySV> >::iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<", 936, G__eventdict__0_2297, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'vector<mySV,allocator<mySV> >::iterator' - 11 - x u 'vector<mySV,allocator<mySV> >::iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>", 938, G__eventdict__0_2298, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'vector<mySV,allocator<mySV> >::iterator' - 11 - x u 'vector<mySV,allocator<mySV> >::iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<=", 997, G__eventdict__0_2299, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'vector<mySV,allocator<mySV> >::iterator' - 11 - x u 'vector<mySV,allocator<mySV> >::iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>=", 999, G__eventdict__0_2300, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'vector<mySV,allocator<mySV> >::iterator' - 11 - x u 'vector<mySV,allocator<mySV> >::iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator-", 921, G__eventdict__0_2301, 108, -1, G__defined_typename("difference_type"), 0, 2, 1, 1, 8, 
"u 'vector<mySV,allocator<mySV> >::iterator' - 11 - x u 'vector<mySV,allocator<mySV> >::iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator+", 919, G__eventdict__0_2302, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEmySVcOallocatorlEmySVgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 8, 
"l - 'difference_type' 10 - x u 'vector<mySV,allocator<mySV> >::iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
}

static void G__cpp_setup_func23() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funceventdict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
  G__cpp_setup_func23();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__eventdictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEfloatcOallocatorlEfloatgRsPgR = { "vector<float,allocator<float> >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_string = { "string" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR = { "map<string,int,less<string>,allocator<pair<const string,int> > >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__eventdictLN_myVertex = { "myVertex" , 99 , -1 };
G__linked_taginfo G__eventdictLN_myTriggerObject = { "myTriggerObject" , 99 , -1 };
G__linked_taginfo G__eventdictLN_myGenObject = { "myGenObject" , 99 , -1 };
G__linked_taginfo G__eventdictLN_myMuon = { "myMuon" , 99 , -1 };
G__linked_taginfo G__eventdictLN_myElectron = { "myElectron" , 99 , -1 };
G__linked_taginfo G__eventdictLN_myTau = { "myTau" , 99 , -1 };
G__linked_taginfo G__eventdictLN_myJet = { "myJet" , 99 , -1 };
G__linked_taginfo G__eventdictLN_myMET = { "myMET" , 99 , -1 };
G__linked_taginfo G__eventdictLN_mySV = { "mySV" , 99 , -1 };
G__linked_taginfo G__eventdictLN_myevent = { "myevent" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgR = { "vector<myGenObject,allocator<myGenObject> >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgRcLcLiterator = { "vector<myGenObject,allocator<myGenObject> >::iterator" , 99 , -1 };
G__linked_taginfo G__eventdictLN_reverse_iteratorlEvectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<myGenObject,allocator<myGenObject> >::iterator>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgR = { "vector<myTriggerObject,allocator<myTriggerObject> >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgRcLcLiterator = { "vector<myTriggerObject,allocator<myTriggerObject> >::iterator" , 99 , -1 };
G__linked_taginfo G__eventdictLN_reverse_iteratorlEvectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<myTriggerObject,allocator<myTriggerObject> >::iterator>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEmyJetcOallocatorlEmyJetgRsPgR = { "vector<myJet,allocator<myJet> >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEmyJetcOallocatorlEmyJetgRsPgRcLcLiterator = { "vector<myJet,allocator<myJet> >::iterator" , 99 , -1 };
G__linked_taginfo G__eventdictLN_reverse_iteratorlEvectorlEmyJetcOallocatorlEmyJetgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<myJet,allocator<myJet> >::iterator>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEmyElectroncOallocatorlEmyElectrongRsPgR = { "vector<myElectron,allocator<myElectron> >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEmyElectroncOallocatorlEmyElectrongRsPgRcLcLiterator = { "vector<myElectron,allocator<myElectron> >::iterator" , 99 , -1 };
G__linked_taginfo G__eventdictLN_reverse_iteratorlEvectorlEmyElectroncOallocatorlEmyElectrongRsPgRcLcLiteratorgR = { "reverse_iterator<vector<myElectron,allocator<myElectron> >::iterator>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEmyMuoncOallocatorlEmyMuongRsPgR = { "vector<myMuon,allocator<myMuon> >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEmyMuoncOallocatorlEmyMuongRsPgRcLcLiterator = { "vector<myMuon,allocator<myMuon> >::iterator" , 99 , -1 };
G__linked_taginfo G__eventdictLN_reverse_iteratorlEvectorlEmyMuoncOallocatorlEmyMuongRsPgRcLcLiteratorgR = { "reverse_iterator<vector<myMuon,allocator<myMuon> >::iterator>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEmyTaucOallocatorlEmyTaugRsPgR = { "vector<myTau,allocator<myTau> >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEmyTaucOallocatorlEmyTaugRsPgRcLcLiterator = { "vector<myTau,allocator<myTau> >::iterator" , 99 , -1 };
G__linked_taginfo G__eventdictLN_reverse_iteratorlEvectorlEmyTaucOallocatorlEmyTaugRsPgRcLcLiteratorgR = { "reverse_iterator<vector<myTau,allocator<myTau> >::iterator>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEmyMETcOallocatorlEmyMETgRsPgR = { "vector<myMET,allocator<myMET> >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEmyMETcOallocatorlEmyMETgRsPgRcLcLiterator = { "vector<myMET,allocator<myMET> >::iterator" , 99 , -1 };
G__linked_taginfo G__eventdictLN_reverse_iteratorlEvectorlEmyMETcOallocatorlEmyMETgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<myMET,allocator<myMET> >::iterator>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEmyVertexcOallocatorlEmyVertexgRsPgR = { "vector<myVertex,allocator<myVertex> >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEmyVertexcOallocatorlEmyVertexgRsPgRcLcLiterator = { "vector<myVertex,allocator<myVertex> >::iterator" , 99 , -1 };
G__linked_taginfo G__eventdictLN_reverse_iteratorlEvectorlEmyVertexcOallocatorlEmyVertexgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<myVertex,allocator<myVertex> >::iterator>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEmySVcOallocatorlEmySVgRsPgR = { "vector<mySV,allocator<mySV> >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEmySVcOallocatorlEmySVgRsPgRcLcLiterator = { "vector<mySV,allocator<mySV> >::iterator" , 99 , -1 };
G__linked_taginfo G__eventdictLN_reverse_iteratorlEvectorlEmySVcOallocatorlEmySVgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<mySV,allocator<mySV> >::iterator>" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableeventdict() {
  G__eventdictLN_TClass.tagnum = -1 ;
  G__eventdictLN_TBuffer.tagnum = -1 ;
  G__eventdictLN_TMemberInspector.tagnum = -1 ;
  G__eventdictLN_TObject.tagnum = -1 ;
  G__eventdictLN_vectorlEfloatcOallocatorlEfloatgRsPgR.tagnum = -1 ;
  G__eventdictLN_string.tagnum = -1 ;
  G__eventdictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__eventdictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__eventdictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__eventdictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__eventdictLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR.tagnum = -1 ;
  G__eventdictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__eventdictLN_myVertex.tagnum = -1 ;
  G__eventdictLN_myTriggerObject.tagnum = -1 ;
  G__eventdictLN_myGenObject.tagnum = -1 ;
  G__eventdictLN_myMuon.tagnum = -1 ;
  G__eventdictLN_myElectron.tagnum = -1 ;
  G__eventdictLN_myTau.tagnum = -1 ;
  G__eventdictLN_myJet.tagnum = -1 ;
  G__eventdictLN_myMET.tagnum = -1 ;
  G__eventdictLN_mySV.tagnum = -1 ;
  G__eventdictLN_myevent.tagnum = -1 ;
  G__eventdictLN_vectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgR.tagnum = -1 ;
  G__eventdictLN_vectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgRcLcLiterator.tagnum = -1 ;
  G__eventdictLN_reverse_iteratorlEvectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__eventdictLN_vectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgR.tagnum = -1 ;
  G__eventdictLN_vectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgRcLcLiterator.tagnum = -1 ;
  G__eventdictLN_reverse_iteratorlEvectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__eventdictLN_vectorlEmyJetcOallocatorlEmyJetgRsPgR.tagnum = -1 ;
  G__eventdictLN_vectorlEmyJetcOallocatorlEmyJetgRsPgRcLcLiterator.tagnum = -1 ;
  G__eventdictLN_reverse_iteratorlEvectorlEmyJetcOallocatorlEmyJetgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__eventdictLN_vectorlEmyElectroncOallocatorlEmyElectrongRsPgR.tagnum = -1 ;
  G__eventdictLN_vectorlEmyElectroncOallocatorlEmyElectrongRsPgRcLcLiterator.tagnum = -1 ;
  G__eventdictLN_reverse_iteratorlEvectorlEmyElectroncOallocatorlEmyElectrongRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__eventdictLN_vectorlEmyMuoncOallocatorlEmyMuongRsPgR.tagnum = -1 ;
  G__eventdictLN_vectorlEmyMuoncOallocatorlEmyMuongRsPgRcLcLiterator.tagnum = -1 ;
  G__eventdictLN_reverse_iteratorlEvectorlEmyMuoncOallocatorlEmyMuongRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__eventdictLN_vectorlEmyTaucOallocatorlEmyTaugRsPgR.tagnum = -1 ;
  G__eventdictLN_vectorlEmyTaucOallocatorlEmyTaugRsPgRcLcLiterator.tagnum = -1 ;
  G__eventdictLN_reverse_iteratorlEvectorlEmyTaucOallocatorlEmyTaugRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__eventdictLN_vectorlEmyMETcOallocatorlEmyMETgRsPgR.tagnum = -1 ;
  G__eventdictLN_vectorlEmyMETcOallocatorlEmyMETgRsPgRcLcLiterator.tagnum = -1 ;
  G__eventdictLN_reverse_iteratorlEvectorlEmyMETcOallocatorlEmyMETgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__eventdictLN_vectorlEmyVertexcOallocatorlEmyVertexgRsPgR.tagnum = -1 ;
  G__eventdictLN_vectorlEmyVertexcOallocatorlEmyVertexgRsPgRcLcLiterator.tagnum = -1 ;
  G__eventdictLN_reverse_iteratorlEvectorlEmyVertexcOallocatorlEmyVertexgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__eventdictLN_vectorlEmySVcOallocatorlEmySVgRsPgR.tagnum = -1 ;
  G__eventdictLN_vectorlEmySVcOallocatorlEmySVgRsPgRcLcLiterator.tagnum = -1 ;
  G__eventdictLN_reverse_iteratorlEvectorlEmySVcOallocatorlEmySVgRsPgRcLcLiteratorgR.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableeventdict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__eventdictLN_TClass);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TObject);
   G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEfloatcOallocatorlEfloatgRsPgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_string);
   G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_myVertex),sizeof(myVertex),-1,292096,(char*)NULL,G__setup_memvarmyVertex,G__setup_memfuncmyVertex);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_myTriggerObject),sizeof(myTriggerObject),-1,292096,(char*)NULL,G__setup_memvarmyTriggerObject,G__setup_memfuncmyTriggerObject);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_myGenObject),sizeof(myGenObject),-1,292096,(char*)NULL,G__setup_memvarmyGenObject,G__setup_memfuncmyGenObject);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_myMuon),sizeof(myMuon),-1,292096,(char*)NULL,G__setup_memvarmyMuon,G__setup_memfuncmyMuon);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_myElectron),sizeof(myElectron),-1,292096,(char*)NULL,G__setup_memvarmyElectron,G__setup_memfuncmyElectron);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_myTau),sizeof(myTau),-1,292096,(char*)NULL,G__setup_memvarmyTau,G__setup_memfuncmyTau);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_myJet),sizeof(myJet),-1,292096,(char*)NULL,G__setup_memvarmyJet,G__setup_memfuncmyJet);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_myMET),sizeof(myMET),-1,292096,(char*)NULL,G__setup_memvarmyMET,G__setup_memfuncmyMET);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_mySV),sizeof(mySV),-1,292096,(char*)NULL,G__setup_memvarmySV,G__setup_memfuncmySV);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_myevent),sizeof(myevent),-1,292096,(char*)NULL,G__setup_memvarmyevent,G__setup_memfuncmyevent);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgR),sizeof(vector<myGenObject,allocator<myGenObject> >),-1,36608,(char*)NULL,G__setup_memvarvectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgR,G__setup_memfuncvectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgRcLcLiterator),sizeof(vector<myGenObject,allocator<myGenObject> >::iterator),-1,35072,(char*)NULL,G__setup_memvarvectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgRcLcLiterator,G__setup_memfuncvectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__eventdictLN_reverse_iteratorlEvectorlEmyGenObjectcOallocatorlEmyGenObjectgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgR),sizeof(vector<myTriggerObject,allocator<myTriggerObject> >),-1,36608,(char*)NULL,G__setup_memvarvectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgR,G__setup_memfuncvectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgRcLcLiterator),sizeof(vector<myTriggerObject,allocator<myTriggerObject> >::iterator),-1,35072,(char*)NULL,G__setup_memvarvectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgRcLcLiterator,G__setup_memfuncvectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__eventdictLN_reverse_iteratorlEvectorlEmyTriggerObjectcOallocatorlEmyTriggerObjectgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEmyJetcOallocatorlEmyJetgRsPgR),sizeof(vector<myJet,allocator<myJet> >),-1,36608,(char*)NULL,G__setup_memvarvectorlEmyJetcOallocatorlEmyJetgRsPgR,G__setup_memfuncvectorlEmyJetcOallocatorlEmyJetgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEmyJetcOallocatorlEmyJetgRsPgRcLcLiterator),sizeof(vector<myJet,allocator<myJet> >::iterator),-1,35072,(char*)NULL,G__setup_memvarvectorlEmyJetcOallocatorlEmyJetgRsPgRcLcLiterator,G__setup_memfuncvectorlEmyJetcOallocatorlEmyJetgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__eventdictLN_reverse_iteratorlEvectorlEmyJetcOallocatorlEmyJetgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEmyElectroncOallocatorlEmyElectrongRsPgR),sizeof(vector<myElectron,allocator<myElectron> >),-1,36608,(char*)NULL,G__setup_memvarvectorlEmyElectroncOallocatorlEmyElectrongRsPgR,G__setup_memfuncvectorlEmyElectroncOallocatorlEmyElectrongRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEmyElectroncOallocatorlEmyElectrongRsPgRcLcLiterator),sizeof(vector<myElectron,allocator<myElectron> >::iterator),-1,35072,(char*)NULL,G__setup_memvarvectorlEmyElectroncOallocatorlEmyElectrongRsPgRcLcLiterator,G__setup_memfuncvectorlEmyElectroncOallocatorlEmyElectrongRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__eventdictLN_reverse_iteratorlEvectorlEmyElectroncOallocatorlEmyElectrongRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEmyMuoncOallocatorlEmyMuongRsPgR),sizeof(vector<myMuon,allocator<myMuon> >),-1,36608,(char*)NULL,G__setup_memvarvectorlEmyMuoncOallocatorlEmyMuongRsPgR,G__setup_memfuncvectorlEmyMuoncOallocatorlEmyMuongRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEmyMuoncOallocatorlEmyMuongRsPgRcLcLiterator),sizeof(vector<myMuon,allocator<myMuon> >::iterator),-1,35072,(char*)NULL,G__setup_memvarvectorlEmyMuoncOallocatorlEmyMuongRsPgRcLcLiterator,G__setup_memfuncvectorlEmyMuoncOallocatorlEmyMuongRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__eventdictLN_reverse_iteratorlEvectorlEmyMuoncOallocatorlEmyMuongRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEmyTaucOallocatorlEmyTaugRsPgR),sizeof(vector<myTau,allocator<myTau> >),-1,36608,(char*)NULL,G__setup_memvarvectorlEmyTaucOallocatorlEmyTaugRsPgR,G__setup_memfuncvectorlEmyTaucOallocatorlEmyTaugRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEmyTaucOallocatorlEmyTaugRsPgRcLcLiterator),sizeof(vector<myTau,allocator<myTau> >::iterator),-1,35072,(char*)NULL,G__setup_memvarvectorlEmyTaucOallocatorlEmyTaugRsPgRcLcLiterator,G__setup_memfuncvectorlEmyTaucOallocatorlEmyTaugRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__eventdictLN_reverse_iteratorlEvectorlEmyTaucOallocatorlEmyTaugRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEmyMETcOallocatorlEmyMETgRsPgR),sizeof(vector<myMET,allocator<myMET> >),-1,36608,(char*)NULL,G__setup_memvarvectorlEmyMETcOallocatorlEmyMETgRsPgR,G__setup_memfuncvectorlEmyMETcOallocatorlEmyMETgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEmyMETcOallocatorlEmyMETgRsPgRcLcLiterator),sizeof(vector<myMET,allocator<myMET> >::iterator),-1,35072,(char*)NULL,G__setup_memvarvectorlEmyMETcOallocatorlEmyMETgRsPgRcLcLiterator,G__setup_memfuncvectorlEmyMETcOallocatorlEmyMETgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__eventdictLN_reverse_iteratorlEvectorlEmyMETcOallocatorlEmyMETgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEmyVertexcOallocatorlEmyVertexgRsPgR),sizeof(vector<myVertex,allocator<myVertex> >),-1,36608,(char*)NULL,G__setup_memvarvectorlEmyVertexcOallocatorlEmyVertexgRsPgR,G__setup_memfuncvectorlEmyVertexcOallocatorlEmyVertexgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEmyVertexcOallocatorlEmyVertexgRsPgRcLcLiterator),sizeof(vector<myVertex,allocator<myVertex> >::iterator),-1,35072,(char*)NULL,G__setup_memvarvectorlEmyVertexcOallocatorlEmyVertexgRsPgRcLcLiterator,G__setup_memfuncvectorlEmyVertexcOallocatorlEmyVertexgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__eventdictLN_reverse_iteratorlEvectorlEmyVertexcOallocatorlEmyVertexgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEmySVcOallocatorlEmySVgRsPgR),sizeof(vector<mySV,allocator<mySV> >),-1,36608,(char*)NULL,G__setup_memvarvectorlEmySVcOallocatorlEmySVgRsPgR,G__setup_memfuncvectorlEmySVcOallocatorlEmySVgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEmySVcOallocatorlEmySVgRsPgRcLcLiterator),sizeof(vector<mySV,allocator<mySV> >::iterator),-1,35072,(char*)NULL,G__setup_memvarvectorlEmySVcOallocatorlEmySVgRsPgRcLcLiterator,G__setup_memfuncvectorlEmySVcOallocatorlEmySVgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__eventdictLN_reverse_iteratorlEvectorlEmySVcOallocatorlEmySVgRsPgRcLcLiteratorgR);
}
extern "C" void G__cpp_setupeventdict(void) {
  G__check_setup_version(30051515,"G__cpp_setupeventdict()");
  G__set_cpp_environmenteventdict();
  G__cpp_setup_tagtableeventdict();

  G__cpp_setup_inheritanceeventdict();

  G__cpp_setup_typetableeventdict();

  G__cpp_setup_memvareventdict();

  G__cpp_setup_memfunceventdict();
  G__cpp_setup_globaleventdict();
  G__cpp_setup_funceventdict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfunceventdict();
  return;
}
class G__cpp_setup_initeventdict {
  public:
    G__cpp_setup_initeventdict() { G__add_setup_func("eventdict",(G__incsetup)(&G__cpp_setupeventdict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initeventdict() { G__remove_setup_func("eventdict"); }
};
G__cpp_setup_initeventdict G__cpp_setup_initializereventdict;

